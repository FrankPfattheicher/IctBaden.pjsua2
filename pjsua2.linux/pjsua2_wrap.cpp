/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040201
#define SWIGCSHARP
#define SWIG_DIRECTORS

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_pjsua2(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_pjsua2(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_pjsua2(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };
}


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include "pjsua2.hpp"
using namespace std;
using namespace pj;


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>

SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(int capacity){
        std::vector< std::string >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::string >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::string std_vector_Sl_std_string_Sg__getitemcopy(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg__getitem(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__setitem(std::vector< std::string > *self,int index,std::string const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__AddRange(std::vector< std::string > *self,std::vector< std::string > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__GetRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::string >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Insert(std::vector< std::string > *self,int index,std::string const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__InsertRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveAt(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__Repeat(std::string const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::string >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_0(std::vector< std::string > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_1(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__SetRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Contains(std::vector< std::string > *self,std::string const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__IndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__LastIndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Remove(std::vector< std::string > *self,std::string const &value){
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< int > *new_std_vector_Sl_int_Sg___SWIG_2(int capacity){
        std::vector< int >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< int >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN int std_vector_Sl_int_Sg__getitemcopy(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< int >::value_type const &std_vector_Sl_int_Sg__getitem(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__setitem(std::vector< int > *self,int index,int const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__AddRange(std::vector< int > *self,std::vector< int > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__GetRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< int >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Insert(std::vector< int > *self,int index,int const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__InsertRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveAt(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__Repeat(int const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< int >(count, value);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_0(std::vector< int > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_1(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__SetRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Contains(std::vector< int > *self,int const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_int_Sg__IndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_int_Sg__LastIndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Remove(std::vector< int > *self,int const &value){
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< unsigned char > *new_std_vector_Sl_unsigned_SS_char_Sg___SWIG_2(int capacity){
        std::vector< unsigned char >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< unsigned char >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN unsigned char std_vector_Sl_unsigned_SS_char_Sg__getitemcopy(std::vector< unsigned char > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< unsigned char >::value_type const &std_vector_Sl_unsigned_SS_char_Sg__getitem(std::vector< unsigned char > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__setitem(std::vector< unsigned char > *self,int index,unsigned char const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__AddRange(std::vector< unsigned char > *self,std::vector< unsigned char > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< unsigned char > *std_vector_Sl_unsigned_SS_char_Sg__GetRange(std::vector< unsigned char > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< unsigned char >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__Insert(std::vector< unsigned char > *self,int index,unsigned char const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__InsertRange(std::vector< unsigned char > *self,int index,std::vector< unsigned char > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__RemoveAt(std::vector< unsigned char > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__RemoveRange(std::vector< unsigned char > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< unsigned char > *std_vector_Sl_unsigned_SS_char_Sg__Repeat(unsigned char const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< unsigned char >(count, value);
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__Reverse__SWIG_0(std::vector< unsigned char > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__Reverse__SWIG_1(std::vector< unsigned char > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__SetRange(std::vector< unsigned char > *self,int index,std::vector< unsigned char > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_unsigned_SS_char_Sg__Contains(std::vector< unsigned char > *self,unsigned char const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_unsigned_SS_char_Sg__IndexOf(std::vector< unsigned char > *self,unsigned char const &value){
        int index = -1;
        std::vector< unsigned char >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_unsigned_SS_char_Sg__LastIndexOf(std::vector< unsigned char > *self,unsigned char const &value){
        int index = -1;
        std::vector< unsigned char >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_unsigned_SS_char_Sg__Remove(std::vector< unsigned char > *self,unsigned char const &value){
        std::vector< unsigned char >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< string,string >::mapped_type const &std_map_Sl_string_Sc_string_Sg__getitem(std::map< string,string > *self,std::map< string,string >::key_type const &key){
        std::map< std::string, std::string, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_string_Sc_string_Sg__setitem(std::map< string,string > *self,std::map< string,string >::key_type const &key,std::map< string,string >::mapped_type const &x){
#ifdef __cpp_lib_map_try_emplace
        (*self).insert_or_assign(key, x);
#else
        (*self)[key] = x;
#endif
      }
SWIGINTERN bool std_map_Sl_string_Sc_string_Sg__ContainsKey(std::map< string,string > *self,std::map< string,string >::key_type const &key){
        std::map< std::string, std::string, std::less< std::string > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_string_Sc_string_Sg__Add(std::map< string,string > *self,std::map< string,string >::key_type const &key,std::map< string,string >::mapped_type const &value){
        std::map< std::string, std::string, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< std::string, std::string >(key, value));
      }
SWIGINTERN bool std_map_Sl_string_Sc_string_Sg__Remove(std::map< string,string > *self,std::map< string,string >::key_type const &key){
        std::map< std::string, std::string, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< std::string,std::string,std::less< std::string > >::iterator *std_map_Sl_string_Sc_string_Sg__create_iterator_begin(std::map< string,string > *self){
        return new std::map< std::string, std::string, std::less< std::string > >::iterator(self->begin());
      }
SWIGINTERN std::map< string,string >::key_type const &std_map_Sl_string_Sc_string_Sg__get_next_key(std::map< string,string > *self,std::map< std::string,std::string,std::less< std::string > >::iterator *swigiterator){
        (void)self;
        std::map< std::string, std::string, std::less< std::string > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_string_Sc_string_Sg__destroy_iterator(std::map< string,string > *self,std::map< std::string,std::string,std::less< std::string > >::iterator *swigiterator){
        (void)self;
        delete swigiterator;
      }
SWIGINTERN std::vector< pj::SockOpt > *new_std_vector_Sl_pj_SockOpt_Sg___SWIG_2(int capacity){
        std::vector< pj::SockOpt >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::SockOpt >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::SockOpt std_vector_Sl_pj_SockOpt_Sg__getitemcopy(std::vector< pj::SockOpt > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< pj::SockOpt >::value_type const &std_vector_Sl_pj_SockOpt_Sg__getitem(std::vector< pj::SockOpt > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SockOpt_Sg__setitem(std::vector< pj::SockOpt > *self,int index,pj::SockOpt const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SockOpt_Sg__AddRange(std::vector< pj::SockOpt > *self,std::vector< pj::SockOpt > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::SockOpt > *std_vector_Sl_pj_SockOpt_Sg__GetRange(std::vector< pj::SockOpt > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::SockOpt >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_SockOpt_Sg__Insert(std::vector< pj::SockOpt > *self,int index,pj::SockOpt const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SockOpt_Sg__InsertRange(std::vector< pj::SockOpt > *self,int index,std::vector< pj::SockOpt > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SockOpt_Sg__RemoveAt(std::vector< pj::SockOpt > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SockOpt_Sg__RemoveRange(std::vector< pj::SockOpt > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::SockOpt > *std_vector_Sl_pj_SockOpt_Sg__Repeat(pj::SockOpt const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::SockOpt >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_SockOpt_Sg__Reverse__SWIG_0(std::vector< pj::SockOpt > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_SockOpt_Sg__Reverse__SWIG_1(std::vector< pj::SockOpt > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_SockOpt_Sg__SetRange(std::vector< pj::SockOpt > *self,int index,std::vector< pj::SockOpt > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< pj::SipHeader > *new_std_vector_Sl_pj_SipHeader_Sg___SWIG_2(int capacity){
        std::vector< pj::SipHeader >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::SipHeader >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::SipHeader std_vector_Sl_pj_SipHeader_Sg__getitemcopy(std::vector< pj::SipHeader > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< pj::SipHeader >::value_type const &std_vector_Sl_pj_SipHeader_Sg__getitem(std::vector< pj::SipHeader > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SipHeader_Sg__setitem(std::vector< pj::SipHeader > *self,int index,pj::SipHeader const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SipHeader_Sg__AddRange(std::vector< pj::SipHeader > *self,std::vector< pj::SipHeader > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::SipHeader > *std_vector_Sl_pj_SipHeader_Sg__GetRange(std::vector< pj::SipHeader > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::SipHeader >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_SipHeader_Sg__Insert(std::vector< pj::SipHeader > *self,int index,pj::SipHeader const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SipHeader_Sg__InsertRange(std::vector< pj::SipHeader > *self,int index,std::vector< pj::SipHeader > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SipHeader_Sg__RemoveAt(std::vector< pj::SipHeader > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SipHeader_Sg__RemoveRange(std::vector< pj::SipHeader > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::SipHeader > *std_vector_Sl_pj_SipHeader_Sg__Repeat(pj::SipHeader const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::SipHeader >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_SipHeader_Sg__Reverse__SWIG_0(std::vector< pj::SipHeader > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_SipHeader_Sg__Reverse__SWIG_1(std::vector< pj::SipHeader > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_SipHeader_Sg__SetRange(std::vector< pj::SipHeader > *self,int index,std::vector< pj::SipHeader > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< pj::AuthCredInfo > *new_std_vector_Sl_pj_AuthCredInfo_Sg___SWIG_2(int capacity){
        std::vector< pj::AuthCredInfo >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::AuthCredInfo >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::AuthCredInfo std_vector_Sl_pj_AuthCredInfo_Sg__getitemcopy(std::vector< pj::AuthCredInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< pj::AuthCredInfo >::value_type const &std_vector_Sl_pj_AuthCredInfo_Sg__getitem(std::vector< pj::AuthCredInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AuthCredInfo_Sg__setitem(std::vector< pj::AuthCredInfo > *self,int index,pj::AuthCredInfo const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AuthCredInfo_Sg__AddRange(std::vector< pj::AuthCredInfo > *self,std::vector< pj::AuthCredInfo > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::AuthCredInfo > *std_vector_Sl_pj_AuthCredInfo_Sg__GetRange(std::vector< pj::AuthCredInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::AuthCredInfo >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_AuthCredInfo_Sg__Insert(std::vector< pj::AuthCredInfo > *self,int index,pj::AuthCredInfo const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AuthCredInfo_Sg__InsertRange(std::vector< pj::AuthCredInfo > *self,int index,std::vector< pj::AuthCredInfo > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AuthCredInfo_Sg__RemoveAt(std::vector< pj::AuthCredInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AuthCredInfo_Sg__RemoveRange(std::vector< pj::AuthCredInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::AuthCredInfo > *std_vector_Sl_pj_AuthCredInfo_Sg__Repeat(pj::AuthCredInfo const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::AuthCredInfo >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_AuthCredInfo_Sg__Reverse__SWIG_0(std::vector< pj::AuthCredInfo > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_AuthCredInfo_Sg__Reverse__SWIG_1(std::vector< pj::AuthCredInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_AuthCredInfo_Sg__SetRange(std::vector< pj::AuthCredInfo > *self,int index,std::vector< pj::AuthCredInfo > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< pj::SrtpCrypto > *new_std_vector_Sl_pj_SrtpCrypto_Sg___SWIG_2(int capacity){
        std::vector< pj::SrtpCrypto >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::SrtpCrypto >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::SrtpCrypto std_vector_Sl_pj_SrtpCrypto_Sg__getitemcopy(std::vector< pj::SrtpCrypto > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< pj::SrtpCrypto >::value_type const &std_vector_Sl_pj_SrtpCrypto_Sg__getitem(std::vector< pj::SrtpCrypto > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SrtpCrypto_Sg__setitem(std::vector< pj::SrtpCrypto > *self,int index,pj::SrtpCrypto const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SrtpCrypto_Sg__AddRange(std::vector< pj::SrtpCrypto > *self,std::vector< pj::SrtpCrypto > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::SrtpCrypto > *std_vector_Sl_pj_SrtpCrypto_Sg__GetRange(std::vector< pj::SrtpCrypto > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::SrtpCrypto >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_SrtpCrypto_Sg__Insert(std::vector< pj::SrtpCrypto > *self,int index,pj::SrtpCrypto const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SrtpCrypto_Sg__InsertRange(std::vector< pj::SrtpCrypto > *self,int index,std::vector< pj::SrtpCrypto > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SrtpCrypto_Sg__RemoveAt(std::vector< pj::SrtpCrypto > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SrtpCrypto_Sg__RemoveRange(std::vector< pj::SrtpCrypto > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::SrtpCrypto > *std_vector_Sl_pj_SrtpCrypto_Sg__Repeat(pj::SrtpCrypto const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::SrtpCrypto >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_SrtpCrypto_Sg__Reverse__SWIG_0(std::vector< pj::SrtpCrypto > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_SrtpCrypto_Sg__Reverse__SWIG_1(std::vector< pj::SrtpCrypto > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_SrtpCrypto_Sg__SetRange(std::vector< pj::SrtpCrypto > *self,int index,std::vector< pj::SrtpCrypto > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< pj::SipMultipartPart > *new_std_vector_Sl_pj_SipMultipartPart_Sg___SWIG_2(int capacity){
        std::vector< pj::SipMultipartPart >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::SipMultipartPart >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::SipMultipartPart std_vector_Sl_pj_SipMultipartPart_Sg__getitemcopy(std::vector< pj::SipMultipartPart > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< pj::SipMultipartPart >::value_type const &std_vector_Sl_pj_SipMultipartPart_Sg__getitem(std::vector< pj::SipMultipartPart > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SipMultipartPart_Sg__setitem(std::vector< pj::SipMultipartPart > *self,int index,pj::SipMultipartPart const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SipMultipartPart_Sg__AddRange(std::vector< pj::SipMultipartPart > *self,std::vector< pj::SipMultipartPart > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::SipMultipartPart > *std_vector_Sl_pj_SipMultipartPart_Sg__GetRange(std::vector< pj::SipMultipartPart > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::SipMultipartPart >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_SipMultipartPart_Sg__Insert(std::vector< pj::SipMultipartPart > *self,int index,pj::SipMultipartPart const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SipMultipartPart_Sg__InsertRange(std::vector< pj::SipMultipartPart > *self,int index,std::vector< pj::SipMultipartPart > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SipMultipartPart_Sg__RemoveAt(std::vector< pj::SipMultipartPart > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SipMultipartPart_Sg__RemoveRange(std::vector< pj::SipMultipartPart > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::SipMultipartPart > *std_vector_Sl_pj_SipMultipartPart_Sg__Repeat(pj::SipMultipartPart const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::SipMultipartPart >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_SipMultipartPart_Sg__Reverse__SWIG_0(std::vector< pj::SipMultipartPart > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_SipMultipartPart_Sg__Reverse__SWIG_1(std::vector< pj::SipMultipartPart > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_SipMultipartPart_Sg__SetRange(std::vector< pj::SipMultipartPart > *self,int index,std::vector< pj::SipMultipartPart > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< pj::Buddy * > *new_std_vector_Sl_pj_Buddy_Sm__Sg___SWIG_2(int capacity){
        std::vector< pj::Buddy * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::Buddy * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::Buddy *std_vector_Sl_pj_Buddy_Sm__Sg__getitemcopy(std::vector< pj::Buddy * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< pj::Buddy * >::value_type const &std_vector_Sl_pj_Buddy_Sm__Sg__getitem(std::vector< pj::Buddy * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_Buddy_Sm__Sg__setitem(std::vector< pj::Buddy * > *self,int index,pj::Buddy *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_Buddy_Sm__Sg__AddRange(std::vector< pj::Buddy * > *self,std::vector< pj::Buddy * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::Buddy * > *std_vector_Sl_pj_Buddy_Sm__Sg__GetRange(std::vector< pj::Buddy * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::Buddy * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_Buddy_Sm__Sg__Insert(std::vector< pj::Buddy * > *self,int index,pj::Buddy *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_Buddy_Sm__Sg__InsertRange(std::vector< pj::Buddy * > *self,int index,std::vector< pj::Buddy * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_Buddy_Sm__Sg__RemoveAt(std::vector< pj::Buddy * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_Buddy_Sm__Sg__RemoveRange(std::vector< pj::Buddy * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::Buddy * > *std_vector_Sl_pj_Buddy_Sm__Sg__Repeat(pj::Buddy *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::Buddy * >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_Buddy_Sm__Sg__Reverse__SWIG_0(std::vector< pj::Buddy * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_Buddy_Sm__Sg__Reverse__SWIG_1(std::vector< pj::Buddy * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_Buddy_Sm__Sg__SetRange(std::vector< pj::Buddy * > *self,int index,std::vector< pj::Buddy * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_pj_Buddy_Sm__Sg__Contains(std::vector< pj::Buddy * > *self,pj::Buddy *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_pj_Buddy_Sm__Sg__IndexOf(std::vector< pj::Buddy * > *self,pj::Buddy *const &value){
        int index = -1;
        std::vector< pj::Buddy * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_pj_Buddy_Sm__Sg__LastIndexOf(std::vector< pj::Buddy * > *self,pj::Buddy *const &value){
        int index = -1;
        std::vector< pj::Buddy * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_pj_Buddy_Sm__Sg__Remove(std::vector< pj::Buddy * > *self,pj::Buddy *const &value){
        std::vector< pj::Buddy * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< pj::Buddy > *new_std_vector_Sl_pj_Buddy_Sg___SWIG_2(int capacity){
        std::vector< pj::Buddy >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::Buddy >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::Buddy std_vector_Sl_pj_Buddy_Sg__getitemcopy(std::vector< pj::Buddy > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< pj::Buddy >::value_type const &std_vector_Sl_pj_Buddy_Sg__getitem(std::vector< pj::Buddy > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_Buddy_Sg__setitem(std::vector< pj::Buddy > *self,int index,pj::Buddy const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_Buddy_Sg__AddRange(std::vector< pj::Buddy > *self,std::vector< pj::Buddy > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::Buddy > *std_vector_Sl_pj_Buddy_Sg__GetRange(std::vector< pj::Buddy > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::Buddy >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_Buddy_Sg__Insert(std::vector< pj::Buddy > *self,int index,pj::Buddy const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_Buddy_Sg__InsertRange(std::vector< pj::Buddy > *self,int index,std::vector< pj::Buddy > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_Buddy_Sg__RemoveAt(std::vector< pj::Buddy > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_Buddy_Sg__RemoveRange(std::vector< pj::Buddy > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::Buddy > *std_vector_Sl_pj_Buddy_Sg__Repeat(pj::Buddy const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::Buddy >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_Buddy_Sg__Reverse__SWIG_0(std::vector< pj::Buddy > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_Buddy_Sg__Reverse__SWIG_1(std::vector< pj::Buddy > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_Buddy_Sg__SetRange(std::vector< pj::Buddy > *self,int index,std::vector< pj::Buddy > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< pj::AudioMedia * > *new_std_vector_Sl_pj_AudioMedia_Sm__Sg___SWIG_2(int capacity){
        std::vector< pj::AudioMedia * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::AudioMedia * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::AudioMedia *std_vector_Sl_pj_AudioMedia_Sm__Sg__getitemcopy(std::vector< pj::AudioMedia * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< pj::AudioMedia * >::value_type const &std_vector_Sl_pj_AudioMedia_Sm__Sg__getitem(std::vector< pj::AudioMedia * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sm__Sg__setitem(std::vector< pj::AudioMedia * > *self,int index,pj::AudioMedia *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sm__Sg__AddRange(std::vector< pj::AudioMedia * > *self,std::vector< pj::AudioMedia * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::AudioMedia * > *std_vector_Sl_pj_AudioMedia_Sm__Sg__GetRange(std::vector< pj::AudioMedia * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::AudioMedia * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sm__Sg__Insert(std::vector< pj::AudioMedia * > *self,int index,pj::AudioMedia *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sm__Sg__InsertRange(std::vector< pj::AudioMedia * > *self,int index,std::vector< pj::AudioMedia * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sm__Sg__RemoveAt(std::vector< pj::AudioMedia * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sm__Sg__RemoveRange(std::vector< pj::AudioMedia * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::AudioMedia * > *std_vector_Sl_pj_AudioMedia_Sm__Sg__Repeat(pj::AudioMedia *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::AudioMedia * >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sm__Sg__Reverse__SWIG_0(std::vector< pj::AudioMedia * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sm__Sg__Reverse__SWIG_1(std::vector< pj::AudioMedia * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sm__Sg__SetRange(std::vector< pj::AudioMedia * > *self,int index,std::vector< pj::AudioMedia * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_pj_AudioMedia_Sm__Sg__Contains(std::vector< pj::AudioMedia * > *self,pj::AudioMedia *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_pj_AudioMedia_Sm__Sg__IndexOf(std::vector< pj::AudioMedia * > *self,pj::AudioMedia *const &value){
        int index = -1;
        std::vector< pj::AudioMedia * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_pj_AudioMedia_Sm__Sg__LastIndexOf(std::vector< pj::AudioMedia * > *self,pj::AudioMedia *const &value){
        int index = -1;
        std::vector< pj::AudioMedia * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_pj_AudioMedia_Sm__Sg__Remove(std::vector< pj::AudioMedia * > *self,pj::AudioMedia *const &value){
        std::vector< pj::AudioMedia * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< pj::AudioMedia > *new_std_vector_Sl_pj_AudioMedia_Sg___SWIG_2(int capacity){
        std::vector< pj::AudioMedia >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::AudioMedia >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::AudioMedia std_vector_Sl_pj_AudioMedia_Sg__getitemcopy(std::vector< pj::AudioMedia > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< pj::AudioMedia >::value_type const &std_vector_Sl_pj_AudioMedia_Sg__getitem(std::vector< pj::AudioMedia > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sg__setitem(std::vector< pj::AudioMedia > *self,int index,pj::AudioMedia const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sg__AddRange(std::vector< pj::AudioMedia > *self,std::vector< pj::AudioMedia > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::AudioMedia > *std_vector_Sl_pj_AudioMedia_Sg__GetRange(std::vector< pj::AudioMedia > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::AudioMedia >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sg__Insert(std::vector< pj::AudioMedia > *self,int index,pj::AudioMedia const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sg__InsertRange(std::vector< pj::AudioMedia > *self,int index,std::vector< pj::AudioMedia > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sg__RemoveAt(std::vector< pj::AudioMedia > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sg__RemoveRange(std::vector< pj::AudioMedia > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::AudioMedia > *std_vector_Sl_pj_AudioMedia_Sg__Repeat(pj::AudioMedia const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::AudioMedia >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sg__Reverse__SWIG_0(std::vector< pj::AudioMedia > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sg__Reverse__SWIG_1(std::vector< pj::AudioMedia > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sg__SetRange(std::vector< pj::AudioMedia > *self,int index,std::vector< pj::AudioMedia > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< pj::VideoMedia > *new_std_vector_Sl_pj_VideoMedia_Sg___SWIG_2(int capacity){
        std::vector< pj::VideoMedia >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::VideoMedia >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::VideoMedia std_vector_Sl_pj_VideoMedia_Sg__getitemcopy(std::vector< pj::VideoMedia > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< pj::VideoMedia >::value_type const &std_vector_Sl_pj_VideoMedia_Sg__getitem(std::vector< pj::VideoMedia > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_VideoMedia_Sg__setitem(std::vector< pj::VideoMedia > *self,int index,pj::VideoMedia const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_VideoMedia_Sg__AddRange(std::vector< pj::VideoMedia > *self,std::vector< pj::VideoMedia > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::VideoMedia > *std_vector_Sl_pj_VideoMedia_Sg__GetRange(std::vector< pj::VideoMedia > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::VideoMedia >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_VideoMedia_Sg__Insert(std::vector< pj::VideoMedia > *self,int index,pj::VideoMedia const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_VideoMedia_Sg__InsertRange(std::vector< pj::VideoMedia > *self,int index,std::vector< pj::VideoMedia > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_VideoMedia_Sg__RemoveAt(std::vector< pj::VideoMedia > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_VideoMedia_Sg__RemoveRange(std::vector< pj::VideoMedia > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::VideoMedia > *std_vector_Sl_pj_VideoMedia_Sg__Repeat(pj::VideoMedia const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::VideoMedia >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_VideoMedia_Sg__Reverse__SWIG_0(std::vector< pj::VideoMedia > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_VideoMedia_Sg__Reverse__SWIG_1(std::vector< pj::VideoMedia > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_VideoMedia_Sg__SetRange(std::vector< pj::VideoMedia > *self,int index,std::vector< pj::VideoMedia > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< pj::ToneDesc > *new_std_vector_Sl_pj_ToneDesc_Sg___SWIG_2(int capacity){
        std::vector< pj::ToneDesc >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::ToneDesc >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::ToneDesc std_vector_Sl_pj_ToneDesc_Sg__getitemcopy(std::vector< pj::ToneDesc > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< pj::ToneDesc >::value_type const &std_vector_Sl_pj_ToneDesc_Sg__getitem(std::vector< pj::ToneDesc > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_ToneDesc_Sg__setitem(std::vector< pj::ToneDesc > *self,int index,pj::ToneDesc const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_ToneDesc_Sg__AddRange(std::vector< pj::ToneDesc > *self,std::vector< pj::ToneDesc > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::ToneDesc > *std_vector_Sl_pj_ToneDesc_Sg__GetRange(std::vector< pj::ToneDesc > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::ToneDesc >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_ToneDesc_Sg__Insert(std::vector< pj::ToneDesc > *self,int index,pj::ToneDesc const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_ToneDesc_Sg__InsertRange(std::vector< pj::ToneDesc > *self,int index,std::vector< pj::ToneDesc > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_ToneDesc_Sg__RemoveAt(std::vector< pj::ToneDesc > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_ToneDesc_Sg__RemoveRange(std::vector< pj::ToneDesc > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::ToneDesc > *std_vector_Sl_pj_ToneDesc_Sg__Repeat(pj::ToneDesc const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::ToneDesc >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_ToneDesc_Sg__Reverse__SWIG_0(std::vector< pj::ToneDesc > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_ToneDesc_Sg__Reverse__SWIG_1(std::vector< pj::ToneDesc > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_ToneDesc_Sg__SetRange(std::vector< pj::ToneDesc > *self,int index,std::vector< pj::ToneDesc > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< pj::ToneDigit > *new_std_vector_Sl_pj_ToneDigit_Sg___SWIG_2(int capacity){
        std::vector< pj::ToneDigit >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::ToneDigit >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::ToneDigit std_vector_Sl_pj_ToneDigit_Sg__getitemcopy(std::vector< pj::ToneDigit > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< pj::ToneDigit >::value_type const &std_vector_Sl_pj_ToneDigit_Sg__getitem(std::vector< pj::ToneDigit > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigit_Sg__setitem(std::vector< pj::ToneDigit > *self,int index,pj::ToneDigit const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigit_Sg__AddRange(std::vector< pj::ToneDigit > *self,std::vector< pj::ToneDigit > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::ToneDigit > *std_vector_Sl_pj_ToneDigit_Sg__GetRange(std::vector< pj::ToneDigit > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::ToneDigit >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigit_Sg__Insert(std::vector< pj::ToneDigit > *self,int index,pj::ToneDigit const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigit_Sg__InsertRange(std::vector< pj::ToneDigit > *self,int index,std::vector< pj::ToneDigit > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigit_Sg__RemoveAt(std::vector< pj::ToneDigit > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigit_Sg__RemoveRange(std::vector< pj::ToneDigit > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::ToneDigit > *std_vector_Sl_pj_ToneDigit_Sg__Repeat(pj::ToneDigit const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::ToneDigit >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigit_Sg__Reverse__SWIG_0(std::vector< pj::ToneDigit > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigit_Sg__Reverse__SWIG_1(std::vector< pj::ToneDigit > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigit_Sg__SetRange(std::vector< pj::ToneDigit > *self,int index,std::vector< pj::ToneDigit > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< pj::ToneDigitMapDigit > *new_std_vector_Sl_pj_ToneDigitMapDigit_Sg___SWIG_2(int capacity){
        std::vector< pj::ToneDigitMapDigit >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::ToneDigitMapDigit >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::ToneDigitMapDigit std_vector_Sl_pj_ToneDigitMapDigit_Sg__getitemcopy(std::vector< pj::ToneDigitMapDigit > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< pj::ToneDigitMapDigit >::value_type const &std_vector_Sl_pj_ToneDigitMapDigit_Sg__getitem(std::vector< pj::ToneDigitMapDigit > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigitMapDigit_Sg__setitem(std::vector< pj::ToneDigitMapDigit > *self,int index,pj::ToneDigitMapDigit const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigitMapDigit_Sg__AddRange(std::vector< pj::ToneDigitMapDigit > *self,std::vector< pj::ToneDigitMapDigit > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::ToneDigitMapDigit > *std_vector_Sl_pj_ToneDigitMapDigit_Sg__GetRange(std::vector< pj::ToneDigitMapDigit > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::ToneDigitMapDigit >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigitMapDigit_Sg__Insert(std::vector< pj::ToneDigitMapDigit > *self,int index,pj::ToneDigitMapDigit const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigitMapDigit_Sg__InsertRange(std::vector< pj::ToneDigitMapDigit > *self,int index,std::vector< pj::ToneDigitMapDigit > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigitMapDigit_Sg__RemoveAt(std::vector< pj::ToneDigitMapDigit > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigitMapDigit_Sg__RemoveRange(std::vector< pj::ToneDigitMapDigit > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::ToneDigitMapDigit > *std_vector_Sl_pj_ToneDigitMapDigit_Sg__Repeat(pj::ToneDigitMapDigit const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::ToneDigitMapDigit >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigitMapDigit_Sg__Reverse__SWIG_0(std::vector< pj::ToneDigitMapDigit > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigitMapDigit_Sg__Reverse__SWIG_1(std::vector< pj::ToneDigitMapDigit > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigitMapDigit_Sg__SetRange(std::vector< pj::ToneDigitMapDigit > *self,int index,std::vector< pj::ToneDigitMapDigit > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< pj::AudioDevInfo * > *new_std_vector_Sl_pj_AudioDevInfo_Sm__Sg___SWIG_2(int capacity){
        std::vector< pj::AudioDevInfo * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::AudioDevInfo * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::AudioDevInfo *std_vector_Sl_pj_AudioDevInfo_Sm__Sg__getitemcopy(std::vector< pj::AudioDevInfo * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< pj::AudioDevInfo * >::value_type const &std_vector_Sl_pj_AudioDevInfo_Sm__Sg__getitem(std::vector< pj::AudioDevInfo * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sm__Sg__setitem(std::vector< pj::AudioDevInfo * > *self,int index,pj::AudioDevInfo *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sm__Sg__AddRange(std::vector< pj::AudioDevInfo * > *self,std::vector< pj::AudioDevInfo * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::AudioDevInfo * > *std_vector_Sl_pj_AudioDevInfo_Sm__Sg__GetRange(std::vector< pj::AudioDevInfo * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::AudioDevInfo * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sm__Sg__Insert(std::vector< pj::AudioDevInfo * > *self,int index,pj::AudioDevInfo *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sm__Sg__InsertRange(std::vector< pj::AudioDevInfo * > *self,int index,std::vector< pj::AudioDevInfo * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sm__Sg__RemoveAt(std::vector< pj::AudioDevInfo * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sm__Sg__RemoveRange(std::vector< pj::AudioDevInfo * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::AudioDevInfo * > *std_vector_Sl_pj_AudioDevInfo_Sm__Sg__Repeat(pj::AudioDevInfo *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::AudioDevInfo * >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sm__Sg__Reverse__SWIG_0(std::vector< pj::AudioDevInfo * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sm__Sg__Reverse__SWIG_1(std::vector< pj::AudioDevInfo * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sm__Sg__SetRange(std::vector< pj::AudioDevInfo * > *self,int index,std::vector< pj::AudioDevInfo * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_pj_AudioDevInfo_Sm__Sg__Contains(std::vector< pj::AudioDevInfo * > *self,pj::AudioDevInfo *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_pj_AudioDevInfo_Sm__Sg__IndexOf(std::vector< pj::AudioDevInfo * > *self,pj::AudioDevInfo *const &value){
        int index = -1;
        std::vector< pj::AudioDevInfo * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_pj_AudioDevInfo_Sm__Sg__LastIndexOf(std::vector< pj::AudioDevInfo * > *self,pj::AudioDevInfo *const &value){
        int index = -1;
        std::vector< pj::AudioDevInfo * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_pj_AudioDevInfo_Sm__Sg__Remove(std::vector< pj::AudioDevInfo * > *self,pj::AudioDevInfo *const &value){
        std::vector< pj::AudioDevInfo * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< pj::AudioDevInfo > *new_std_vector_Sl_pj_AudioDevInfo_Sg___SWIG_2(int capacity){
        std::vector< pj::AudioDevInfo >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::AudioDevInfo >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::AudioDevInfo std_vector_Sl_pj_AudioDevInfo_Sg__getitemcopy(std::vector< pj::AudioDevInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< pj::AudioDevInfo >::value_type const &std_vector_Sl_pj_AudioDevInfo_Sg__getitem(std::vector< pj::AudioDevInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sg__setitem(std::vector< pj::AudioDevInfo > *self,int index,pj::AudioDevInfo const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sg__AddRange(std::vector< pj::AudioDevInfo > *self,std::vector< pj::AudioDevInfo > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::AudioDevInfo > *std_vector_Sl_pj_AudioDevInfo_Sg__GetRange(std::vector< pj::AudioDevInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::AudioDevInfo >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sg__Insert(std::vector< pj::AudioDevInfo > *self,int index,pj::AudioDevInfo const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sg__InsertRange(std::vector< pj::AudioDevInfo > *self,int index,std::vector< pj::AudioDevInfo > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sg__RemoveAt(std::vector< pj::AudioDevInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sg__RemoveRange(std::vector< pj::AudioDevInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::AudioDevInfo > *std_vector_Sl_pj_AudioDevInfo_Sg__Repeat(pj::AudioDevInfo const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::AudioDevInfo >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sg__Reverse__SWIG_0(std::vector< pj::AudioDevInfo > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sg__Reverse__SWIG_1(std::vector< pj::AudioDevInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sg__SetRange(std::vector< pj::AudioDevInfo > *self,int index,std::vector< pj::AudioDevInfo > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< pj::CodecInfo * > *new_std_vector_Sl_pj_CodecInfo_Sm__Sg___SWIG_2(int capacity){
        std::vector< pj::CodecInfo * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::CodecInfo * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::CodecInfo *std_vector_Sl_pj_CodecInfo_Sm__Sg__getitemcopy(std::vector< pj::CodecInfo * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< pj::CodecInfo * >::value_type const &std_vector_Sl_pj_CodecInfo_Sm__Sg__getitem(std::vector< pj::CodecInfo * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sm__Sg__setitem(std::vector< pj::CodecInfo * > *self,int index,pj::CodecInfo *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sm__Sg__AddRange(std::vector< pj::CodecInfo * > *self,std::vector< pj::CodecInfo * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::CodecInfo * > *std_vector_Sl_pj_CodecInfo_Sm__Sg__GetRange(std::vector< pj::CodecInfo * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::CodecInfo * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sm__Sg__Insert(std::vector< pj::CodecInfo * > *self,int index,pj::CodecInfo *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sm__Sg__InsertRange(std::vector< pj::CodecInfo * > *self,int index,std::vector< pj::CodecInfo * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sm__Sg__RemoveAt(std::vector< pj::CodecInfo * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sm__Sg__RemoveRange(std::vector< pj::CodecInfo * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::CodecInfo * > *std_vector_Sl_pj_CodecInfo_Sm__Sg__Repeat(pj::CodecInfo *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::CodecInfo * >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sm__Sg__Reverse__SWIG_0(std::vector< pj::CodecInfo * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sm__Sg__Reverse__SWIG_1(std::vector< pj::CodecInfo * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sm__Sg__SetRange(std::vector< pj::CodecInfo * > *self,int index,std::vector< pj::CodecInfo * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_pj_CodecInfo_Sm__Sg__Contains(std::vector< pj::CodecInfo * > *self,pj::CodecInfo *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_pj_CodecInfo_Sm__Sg__IndexOf(std::vector< pj::CodecInfo * > *self,pj::CodecInfo *const &value){
        int index = -1;
        std::vector< pj::CodecInfo * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_pj_CodecInfo_Sm__Sg__LastIndexOf(std::vector< pj::CodecInfo * > *self,pj::CodecInfo *const &value){
        int index = -1;
        std::vector< pj::CodecInfo * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_pj_CodecInfo_Sm__Sg__Remove(std::vector< pj::CodecInfo * > *self,pj::CodecInfo *const &value){
        std::vector< pj::CodecInfo * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< pj::CodecInfo > *new_std_vector_Sl_pj_CodecInfo_Sg___SWIG_2(int capacity){
        std::vector< pj::CodecInfo >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::CodecInfo >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::CodecInfo std_vector_Sl_pj_CodecInfo_Sg__getitemcopy(std::vector< pj::CodecInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< pj::CodecInfo >::value_type const &std_vector_Sl_pj_CodecInfo_Sg__getitem(std::vector< pj::CodecInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sg__setitem(std::vector< pj::CodecInfo > *self,int index,pj::CodecInfo const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sg__AddRange(std::vector< pj::CodecInfo > *self,std::vector< pj::CodecInfo > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::CodecInfo > *std_vector_Sl_pj_CodecInfo_Sg__GetRange(std::vector< pj::CodecInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::CodecInfo >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sg__Insert(std::vector< pj::CodecInfo > *self,int index,pj::CodecInfo const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sg__InsertRange(std::vector< pj::CodecInfo > *self,int index,std::vector< pj::CodecInfo > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sg__RemoveAt(std::vector< pj::CodecInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sg__RemoveRange(std::vector< pj::CodecInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::CodecInfo > *std_vector_Sl_pj_CodecInfo_Sg__Repeat(pj::CodecInfo const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::CodecInfo >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sg__Reverse__SWIG_0(std::vector< pj::CodecInfo > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sg__Reverse__SWIG_1(std::vector< pj::CodecInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sg__SetRange(std::vector< pj::CodecInfo > *self,int index,std::vector< pj::CodecInfo > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< pj::VideoDevInfo * > *new_std_vector_Sl_pj_VideoDevInfo_Sm__Sg___SWIG_2(int capacity){
        std::vector< pj::VideoDevInfo * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::VideoDevInfo * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::VideoDevInfo *std_vector_Sl_pj_VideoDevInfo_Sm__Sg__getitemcopy(std::vector< pj::VideoDevInfo * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< pj::VideoDevInfo * >::value_type const &std_vector_Sl_pj_VideoDevInfo_Sm__Sg__getitem(std::vector< pj::VideoDevInfo * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_VideoDevInfo_Sm__Sg__setitem(std::vector< pj::VideoDevInfo * > *self,int index,pj::VideoDevInfo *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_VideoDevInfo_Sm__Sg__AddRange(std::vector< pj::VideoDevInfo * > *self,std::vector< pj::VideoDevInfo * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::VideoDevInfo * > *std_vector_Sl_pj_VideoDevInfo_Sm__Sg__GetRange(std::vector< pj::VideoDevInfo * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::VideoDevInfo * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_VideoDevInfo_Sm__Sg__Insert(std::vector< pj::VideoDevInfo * > *self,int index,pj::VideoDevInfo *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_VideoDevInfo_Sm__Sg__InsertRange(std::vector< pj::VideoDevInfo * > *self,int index,std::vector< pj::VideoDevInfo * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_VideoDevInfo_Sm__Sg__RemoveAt(std::vector< pj::VideoDevInfo * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_VideoDevInfo_Sm__Sg__RemoveRange(std::vector< pj::VideoDevInfo * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::VideoDevInfo * > *std_vector_Sl_pj_VideoDevInfo_Sm__Sg__Repeat(pj::VideoDevInfo *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::VideoDevInfo * >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_VideoDevInfo_Sm__Sg__Reverse__SWIG_0(std::vector< pj::VideoDevInfo * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_VideoDevInfo_Sm__Sg__Reverse__SWIG_1(std::vector< pj::VideoDevInfo * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_VideoDevInfo_Sm__Sg__SetRange(std::vector< pj::VideoDevInfo * > *self,int index,std::vector< pj::VideoDevInfo * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_pj_VideoDevInfo_Sm__Sg__Contains(std::vector< pj::VideoDevInfo * > *self,pj::VideoDevInfo *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_pj_VideoDevInfo_Sm__Sg__IndexOf(std::vector< pj::VideoDevInfo * > *self,pj::VideoDevInfo *const &value){
        int index = -1;
        std::vector< pj::VideoDevInfo * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_pj_VideoDevInfo_Sm__Sg__LastIndexOf(std::vector< pj::VideoDevInfo * > *self,pj::VideoDevInfo *const &value){
        int index = -1;
        std::vector< pj::VideoDevInfo * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_pj_VideoDevInfo_Sm__Sg__Remove(std::vector< pj::VideoDevInfo * > *self,pj::VideoDevInfo *const &value){
        std::vector< pj::VideoDevInfo * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< pj::VideoDevInfo > *new_std_vector_Sl_pj_VideoDevInfo_Sg___SWIG_2(int capacity){
        std::vector< pj::VideoDevInfo >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::VideoDevInfo >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::VideoDevInfo std_vector_Sl_pj_VideoDevInfo_Sg__getitemcopy(std::vector< pj::VideoDevInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< pj::VideoDevInfo >::value_type const &std_vector_Sl_pj_VideoDevInfo_Sg__getitem(std::vector< pj::VideoDevInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_VideoDevInfo_Sg__setitem(std::vector< pj::VideoDevInfo > *self,int index,pj::VideoDevInfo const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_VideoDevInfo_Sg__AddRange(std::vector< pj::VideoDevInfo > *self,std::vector< pj::VideoDevInfo > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::VideoDevInfo > *std_vector_Sl_pj_VideoDevInfo_Sg__GetRange(std::vector< pj::VideoDevInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::VideoDevInfo >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_VideoDevInfo_Sg__Insert(std::vector< pj::VideoDevInfo > *self,int index,pj::VideoDevInfo const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_VideoDevInfo_Sg__InsertRange(std::vector< pj::VideoDevInfo > *self,int index,std::vector< pj::VideoDevInfo > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_VideoDevInfo_Sg__RemoveAt(std::vector< pj::VideoDevInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_VideoDevInfo_Sg__RemoveRange(std::vector< pj::VideoDevInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::VideoDevInfo > *std_vector_Sl_pj_VideoDevInfo_Sg__Repeat(pj::VideoDevInfo const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::VideoDevInfo >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_VideoDevInfo_Sg__Reverse__SWIG_0(std::vector< pj::VideoDevInfo > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_VideoDevInfo_Sg__Reverse__SWIG_1(std::vector< pj::VideoDevInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_VideoDevInfo_Sg__SetRange(std::vector< pj::VideoDevInfo > *self,int index,std::vector< pj::VideoDevInfo > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< pj::CodecFmtp > *new_std_vector_Sl_pj_CodecFmtp_Sg___SWIG_2(int capacity){
        std::vector< pj::CodecFmtp >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::CodecFmtp >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::CodecFmtp std_vector_Sl_pj_CodecFmtp_Sg__getitemcopy(std::vector< pj::CodecFmtp > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< pj::CodecFmtp >::value_type const &std_vector_Sl_pj_CodecFmtp_Sg__getitem(std::vector< pj::CodecFmtp > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CodecFmtp_Sg__setitem(std::vector< pj::CodecFmtp > *self,int index,pj::CodecFmtp const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CodecFmtp_Sg__AddRange(std::vector< pj::CodecFmtp > *self,std::vector< pj::CodecFmtp > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::CodecFmtp > *std_vector_Sl_pj_CodecFmtp_Sg__GetRange(std::vector< pj::CodecFmtp > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::CodecFmtp >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_CodecFmtp_Sg__Insert(std::vector< pj::CodecFmtp > *self,int index,pj::CodecFmtp const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CodecFmtp_Sg__InsertRange(std::vector< pj::CodecFmtp > *self,int index,std::vector< pj::CodecFmtp > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CodecFmtp_Sg__RemoveAt(std::vector< pj::CodecFmtp > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CodecFmtp_Sg__RemoveRange(std::vector< pj::CodecFmtp > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::CodecFmtp > *std_vector_Sl_pj_CodecFmtp_Sg__Repeat(pj::CodecFmtp const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::CodecFmtp >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_CodecFmtp_Sg__Reverse__SWIG_0(std::vector< pj::CodecFmtp > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_CodecFmtp_Sg__Reverse__SWIG_1(std::vector< pj::CodecFmtp > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_CodecFmtp_Sg__SetRange(std::vector< pj::CodecFmtp > *self,int index,std::vector< pj::CodecFmtp > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< pj::MediaFormatAudio > *new_std_vector_Sl_pj_MediaFormatAudio_Sg___SWIG_2(int capacity){
        std::vector< pj::MediaFormatAudio >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::MediaFormatAudio >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::MediaFormatAudio std_vector_Sl_pj_MediaFormatAudio_Sg__getitemcopy(std::vector< pj::MediaFormatAudio > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< pj::MediaFormatAudio >::value_type const &std_vector_Sl_pj_MediaFormatAudio_Sg__getitem(std::vector< pj::MediaFormatAudio > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_MediaFormatAudio_Sg__setitem(std::vector< pj::MediaFormatAudio > *self,int index,pj::MediaFormatAudio const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_MediaFormatAudio_Sg__AddRange(std::vector< pj::MediaFormatAudio > *self,std::vector< pj::MediaFormatAudio > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::MediaFormatAudio > *std_vector_Sl_pj_MediaFormatAudio_Sg__GetRange(std::vector< pj::MediaFormatAudio > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::MediaFormatAudio >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_MediaFormatAudio_Sg__Insert(std::vector< pj::MediaFormatAudio > *self,int index,pj::MediaFormatAudio const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_MediaFormatAudio_Sg__InsertRange(std::vector< pj::MediaFormatAudio > *self,int index,std::vector< pj::MediaFormatAudio > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_MediaFormatAudio_Sg__RemoveAt(std::vector< pj::MediaFormatAudio > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_MediaFormatAudio_Sg__RemoveRange(std::vector< pj::MediaFormatAudio > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::MediaFormatAudio > *std_vector_Sl_pj_MediaFormatAudio_Sg__Repeat(pj::MediaFormatAudio const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::MediaFormatAudio >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_MediaFormatAudio_Sg__Reverse__SWIG_0(std::vector< pj::MediaFormatAudio > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_MediaFormatAudio_Sg__Reverse__SWIG_1(std::vector< pj::MediaFormatAudio > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_MediaFormatAudio_Sg__SetRange(std::vector< pj::MediaFormatAudio > *self,int index,std::vector< pj::MediaFormatAudio > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< pj::MediaFormatVideo > *new_std_vector_Sl_pj_MediaFormatVideo_Sg___SWIG_2(int capacity){
        std::vector< pj::MediaFormatVideo >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::MediaFormatVideo >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::MediaFormatVideo std_vector_Sl_pj_MediaFormatVideo_Sg__getitemcopy(std::vector< pj::MediaFormatVideo > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< pj::MediaFormatVideo >::value_type const &std_vector_Sl_pj_MediaFormatVideo_Sg__getitem(std::vector< pj::MediaFormatVideo > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_MediaFormatVideo_Sg__setitem(std::vector< pj::MediaFormatVideo > *self,int index,pj::MediaFormatVideo const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_MediaFormatVideo_Sg__AddRange(std::vector< pj::MediaFormatVideo > *self,std::vector< pj::MediaFormatVideo > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::MediaFormatVideo > *std_vector_Sl_pj_MediaFormatVideo_Sg__GetRange(std::vector< pj::MediaFormatVideo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::MediaFormatVideo >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_MediaFormatVideo_Sg__Insert(std::vector< pj::MediaFormatVideo > *self,int index,pj::MediaFormatVideo const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_MediaFormatVideo_Sg__InsertRange(std::vector< pj::MediaFormatVideo > *self,int index,std::vector< pj::MediaFormatVideo > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_MediaFormatVideo_Sg__RemoveAt(std::vector< pj::MediaFormatVideo > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_MediaFormatVideo_Sg__RemoveRange(std::vector< pj::MediaFormatVideo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::MediaFormatVideo > *std_vector_Sl_pj_MediaFormatVideo_Sg__Repeat(pj::MediaFormatVideo const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::MediaFormatVideo >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_MediaFormatVideo_Sg__Reverse__SWIG_0(std::vector< pj::MediaFormatVideo > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_MediaFormatVideo_Sg__Reverse__SWIG_1(std::vector< pj::MediaFormatVideo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_MediaFormatVideo_Sg__SetRange(std::vector< pj::MediaFormatVideo > *self,int index,std::vector< pj::MediaFormatVideo > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< pj::CallMediaInfo > *new_std_vector_Sl_pj_CallMediaInfo_Sg___SWIG_2(int capacity){
        std::vector< pj::CallMediaInfo >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::CallMediaInfo >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::CallMediaInfo std_vector_Sl_pj_CallMediaInfo_Sg__getitemcopy(std::vector< pj::CallMediaInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< pj::CallMediaInfo >::value_type const &std_vector_Sl_pj_CallMediaInfo_Sg__getitem(std::vector< pj::CallMediaInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CallMediaInfo_Sg__setitem(std::vector< pj::CallMediaInfo > *self,int index,pj::CallMediaInfo const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CallMediaInfo_Sg__AddRange(std::vector< pj::CallMediaInfo > *self,std::vector< pj::CallMediaInfo > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::CallMediaInfo > *std_vector_Sl_pj_CallMediaInfo_Sg__GetRange(std::vector< pj::CallMediaInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::CallMediaInfo >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_CallMediaInfo_Sg__Insert(std::vector< pj::CallMediaInfo > *self,int index,pj::CallMediaInfo const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CallMediaInfo_Sg__InsertRange(std::vector< pj::CallMediaInfo > *self,int index,std::vector< pj::CallMediaInfo > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CallMediaInfo_Sg__RemoveAt(std::vector< pj::CallMediaInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CallMediaInfo_Sg__RemoveRange(std::vector< pj::CallMediaInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::CallMediaInfo > *std_vector_Sl_pj_CallMediaInfo_Sg__Repeat(pj::CallMediaInfo const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::CallMediaInfo >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_CallMediaInfo_Sg__Reverse__SWIG_0(std::vector< pj::CallMediaInfo > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_CallMediaInfo_Sg__Reverse__SWIG_1(std::vector< pj::CallMediaInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_CallMediaInfo_Sg__SetRange(std::vector< pj::CallMediaInfo > *self,int index,std::vector< pj::CallMediaInfo > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< pj::RtcpFbCap > *new_std_vector_Sl_pj_RtcpFbCap_Sg___SWIG_2(int capacity){
        std::vector< pj::RtcpFbCap >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::RtcpFbCap >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::RtcpFbCap std_vector_Sl_pj_RtcpFbCap_Sg__getitemcopy(std::vector< pj::RtcpFbCap > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< pj::RtcpFbCap >::value_type const &std_vector_Sl_pj_RtcpFbCap_Sg__getitem(std::vector< pj::RtcpFbCap > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_RtcpFbCap_Sg__setitem(std::vector< pj::RtcpFbCap > *self,int index,pj::RtcpFbCap const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_RtcpFbCap_Sg__AddRange(std::vector< pj::RtcpFbCap > *self,std::vector< pj::RtcpFbCap > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::RtcpFbCap > *std_vector_Sl_pj_RtcpFbCap_Sg__GetRange(std::vector< pj::RtcpFbCap > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::RtcpFbCap >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_RtcpFbCap_Sg__Insert(std::vector< pj::RtcpFbCap > *self,int index,pj::RtcpFbCap const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_RtcpFbCap_Sg__InsertRange(std::vector< pj::RtcpFbCap > *self,int index,std::vector< pj::RtcpFbCap > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_RtcpFbCap_Sg__RemoveAt(std::vector< pj::RtcpFbCap > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_RtcpFbCap_Sg__RemoveRange(std::vector< pj::RtcpFbCap > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::RtcpFbCap > *std_vector_Sl_pj_RtcpFbCap_Sg__Repeat(pj::RtcpFbCap const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::RtcpFbCap >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_RtcpFbCap_Sg__Reverse__SWIG_0(std::vector< pj::RtcpFbCap > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_RtcpFbCap_Sg__Reverse__SWIG_1(std::vector< pj::RtcpFbCap > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_RtcpFbCap_Sg__SetRange(std::vector< pj::RtcpFbCap > *self,int index,std::vector< pj::RtcpFbCap > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< pj::SslCertName > *new_std_vector_Sl_pj_SslCertName_Sg___SWIG_2(int capacity){
        std::vector< pj::SslCertName >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::SslCertName >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::SslCertName std_vector_Sl_pj_SslCertName_Sg__getitemcopy(std::vector< pj::SslCertName > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< pj::SslCertName >::value_type const &std_vector_Sl_pj_SslCertName_Sg__getitem(std::vector< pj::SslCertName > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SslCertName_Sg__setitem(std::vector< pj::SslCertName > *self,int index,pj::SslCertName const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SslCertName_Sg__AddRange(std::vector< pj::SslCertName > *self,std::vector< pj::SslCertName > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::SslCertName > *std_vector_Sl_pj_SslCertName_Sg__GetRange(std::vector< pj::SslCertName > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::SslCertName >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_SslCertName_Sg__Insert(std::vector< pj::SslCertName > *self,int index,pj::SslCertName const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SslCertName_Sg__InsertRange(std::vector< pj::SslCertName > *self,int index,std::vector< pj::SslCertName > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SslCertName_Sg__RemoveAt(std::vector< pj::SslCertName > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SslCertName_Sg__RemoveRange(std::vector< pj::SslCertName > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::SslCertName > *std_vector_Sl_pj_SslCertName_Sg__Repeat(pj::SslCertName const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::SslCertName >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_SslCertName_Sg__Reverse__SWIG_0(std::vector< pj::SslCertName > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_SslCertName_Sg__Reverse__SWIG_1(std::vector< pj::SslCertName > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_SslCertName_Sg__SetRange(std::vector< pj::SslCertName > *self,int index,std::vector< pj::SslCertName > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#include "pjsua2/media.hpp"

SWIGINTERN void pj_WindowHandle_setWindow(pj::WindowHandle *self,long long hwnd){ self->window = (void*)hwnd; }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "pjsua2_wrap.h"

SwigDirector_AudioMediaPort::SwigDirector_AudioMediaPort() : pj::AudioMediaPort(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_AudioMediaPort::~SwigDirector_AudioMediaPort() {
  
}


void SwigDirector_AudioMediaPort::onFrameRequested(pj::MediaFrame &frame) {
  void * jframe = 0 ;
  
  if (!swig_callbackonFrameRequested) {
    pj::AudioMediaPort::onFrameRequested(frame);
    return;
  } else {
    jframe = (pj::MediaFrame *) &frame; 
    swig_callbackonFrameRequested(jframe);
  }
}

void SwigDirector_AudioMediaPort::onFrameReceived(pj::MediaFrame &frame) {
  void * jframe = 0 ;
  
  if (!swig_callbackonFrameReceived) {
    pj::AudioMediaPort::onFrameReceived(frame);
    return;
  } else {
    jframe = (pj::MediaFrame *) &frame; 
    swig_callbackonFrameReceived(jframe);
  }
}

void SwigDirector_AudioMediaPort::swig_connect_director(SWIG_Callback0_t callbackonFrameRequested, SWIG_Callback1_t callbackonFrameReceived) {
  swig_callbackonFrameRequested = callbackonFrameRequested;
  swig_callbackonFrameReceived = callbackonFrameReceived;
}

void SwigDirector_AudioMediaPort::swig_init_callbacks() {
  swig_callbackonFrameRequested = 0;
  swig_callbackonFrameReceived = 0;
}

SwigDirector_AudioMediaPlayer::SwigDirector_AudioMediaPlayer() : pj::AudioMediaPlayer(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_AudioMediaPlayer::~SwigDirector_AudioMediaPlayer() {
  
}


void SwigDirector_AudioMediaPlayer::onEof2() {
  if (!swig_callbackonEof2) {
    pj::AudioMediaPlayer::onEof2();
    return;
  } else {
    swig_callbackonEof2();
  }
}

void SwigDirector_AudioMediaPlayer::swig_connect_director(SWIG_Callback0_t callbackonEof2) {
  swig_callbackonEof2 = callbackonEof2;
}

void SwigDirector_AudioMediaPlayer::swig_init_callbacks() {
  swig_callbackonEof2 = 0;
}

SwigDirector_AudioMediaCapture::SwigDirector_AudioMediaCapture() : pj::AudioMediaCapture(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_AudioMediaCapture::~SwigDirector_AudioMediaCapture() {
  
}


void SwigDirector_AudioMediaCapture::onNewFrame() {
  if (!swig_callbackonNewFrame) {
    Swig::DirectorPureVirtualException::raise("pj::AudioMediaCapture::onNewFrame");
    return;
  } else {
    swig_callbackonNewFrame();
  }
}

void SwigDirector_AudioMediaCapture::swig_connect_director(SWIG_Callback0_t callbackonNewFrame) {
  swig_callbackonNewFrame = callbackonNewFrame;
}

void SwigDirector_AudioMediaCapture::swig_init_callbacks() {
  swig_callbackonNewFrame = 0;
}

SwigDirector_Buddy::SwigDirector_Buddy() : pj::Buddy(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_Buddy::~SwigDirector_Buddy() {
  
}


void SwigDirector_Buddy::onBuddyState() {
  if (!swig_callbackonBuddyState) {
    pj::Buddy::onBuddyState();
    return;
  } else {
    swig_callbackonBuddyState();
  }
}

void SwigDirector_Buddy::onBuddyEvSubState(pj::OnBuddyEvSubStateParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonBuddyEvSubState) {
    pj::Buddy::onBuddyEvSubState(prm);
    return;
  } else {
    jprm = (pj::OnBuddyEvSubStateParam *) &prm; 
    swig_callbackonBuddyEvSubState(jprm);
  }
}

void SwigDirector_Buddy::swig_connect_director(SWIG_Callback0_t callbackonBuddyState, SWIG_Callback1_t callbackonBuddyEvSubState) {
  swig_callbackonBuddyState = callbackonBuddyState;
  swig_callbackonBuddyEvSubState = callbackonBuddyEvSubState;
}

void SwigDirector_Buddy::swig_init_callbacks() {
  swig_callbackonBuddyState = 0;
  swig_callbackonBuddyEvSubState = 0;
}

SwigDirector_FindBuddyMatch::SwigDirector_FindBuddyMatch() : pj::FindBuddyMatch(), Swig::Director() {
  swig_init_callbacks();
}

bool SwigDirector_FindBuddyMatch::match(pj::string const &token,pj::Buddy const &buddy) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  const char * jtoken = 0 ;
  void * jbuddy = 0 ;
  
  if (!swig_callbackmatch) {
    return pj::FindBuddyMatch::match(token,buddy);
  } else {
    jtoken = (&token)->c_str(); 
    jbuddy = (pj::Buddy *) &buddy; 
    jresult = (unsigned int) swig_callbackmatch(jtoken, jbuddy);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

SwigDirector_FindBuddyMatch::~SwigDirector_FindBuddyMatch() {
  
}


void SwigDirector_FindBuddyMatch::swig_connect_director(SWIG_Callback0_t callbackmatch) {
  swig_callbackmatch = callbackmatch;
}

void SwigDirector_FindBuddyMatch::swig_init_callbacks() {
  swig_callbackmatch = 0;
}

SwigDirector_Account::SwigDirector_Account() : pj::Account(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_Account::~SwigDirector_Account() {
  
}


void SwigDirector_Account::onIncomingCall(pj::OnIncomingCallParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonIncomingCall) {
    pj::Account::onIncomingCall(prm);
    return;
  } else {
    jprm = (pj::OnIncomingCallParam *) &prm; 
    swig_callbackonIncomingCall(jprm);
  }
}

void SwigDirector_Account::onRegStarted(pj::OnRegStartedParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonRegStarted) {
    pj::Account::onRegStarted(prm);
    return;
  } else {
    jprm = (pj::OnRegStartedParam *) &prm; 
    swig_callbackonRegStarted(jprm);
  }
}

void SwigDirector_Account::onRegState(pj::OnRegStateParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonRegState) {
    pj::Account::onRegState(prm);
    return;
  } else {
    jprm = (pj::OnRegStateParam *) &prm; 
    swig_callbackonRegState(jprm);
  }
}

void SwigDirector_Account::onIncomingSubscribe(pj::OnIncomingSubscribeParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonIncomingSubscribe) {
    pj::Account::onIncomingSubscribe(prm);
    return;
  } else {
    jprm = (pj::OnIncomingSubscribeParam *) &prm; 
    swig_callbackonIncomingSubscribe(jprm);
  }
}

void SwigDirector_Account::onInstantMessage(pj::OnInstantMessageParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonInstantMessage) {
    pj::Account::onInstantMessage(prm);
    return;
  } else {
    jprm = (pj::OnInstantMessageParam *) &prm; 
    swig_callbackonInstantMessage(jprm);
  }
}

void SwigDirector_Account::onInstantMessageStatus(pj::OnInstantMessageStatusParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonInstantMessageStatus) {
    pj::Account::onInstantMessageStatus(prm);
    return;
  } else {
    jprm = (pj::OnInstantMessageStatusParam *) &prm; 
    swig_callbackonInstantMessageStatus(jprm);
  }
}

void SwigDirector_Account::onTypingIndication(pj::OnTypingIndicationParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonTypingIndication) {
    pj::Account::onTypingIndication(prm);
    return;
  } else {
    jprm = (pj::OnTypingIndicationParam *) &prm; 
    swig_callbackonTypingIndication(jprm);
  }
}

void SwigDirector_Account::onMwiInfo(pj::OnMwiInfoParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonMwiInfo) {
    pj::Account::onMwiInfo(prm);
    return;
  } else {
    jprm = (pj::OnMwiInfoParam *) &prm; 
    swig_callbackonMwiInfo(jprm);
  }
}

void SwigDirector_Account::swig_connect_director(SWIG_Callback0_t callbackonIncomingCall, SWIG_Callback1_t callbackonRegStarted, SWIG_Callback2_t callbackonRegState, SWIG_Callback3_t callbackonIncomingSubscribe, SWIG_Callback4_t callbackonInstantMessage, SWIG_Callback5_t callbackonInstantMessageStatus, SWIG_Callback6_t callbackonTypingIndication, SWIG_Callback7_t callbackonMwiInfo) {
  swig_callbackonIncomingCall = callbackonIncomingCall;
  swig_callbackonRegStarted = callbackonRegStarted;
  swig_callbackonRegState = callbackonRegState;
  swig_callbackonIncomingSubscribe = callbackonIncomingSubscribe;
  swig_callbackonInstantMessage = callbackonInstantMessage;
  swig_callbackonInstantMessageStatus = callbackonInstantMessageStatus;
  swig_callbackonTypingIndication = callbackonTypingIndication;
  swig_callbackonMwiInfo = callbackonMwiInfo;
}

void SwigDirector_Account::swig_init_callbacks() {
  swig_callbackonIncomingCall = 0;
  swig_callbackonRegStarted = 0;
  swig_callbackonRegState = 0;
  swig_callbackonIncomingSubscribe = 0;
  swig_callbackonInstantMessage = 0;
  swig_callbackonInstantMessageStatus = 0;
  swig_callbackonTypingIndication = 0;
  swig_callbackonMwiInfo = 0;
}

SwigDirector_Call::SwigDirector_Call(pj::Account &acc,int call_id) : pj::Call(acc, call_id), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_Call::~SwigDirector_Call() {
  
}


void SwigDirector_Call::onCallState(pj::OnCallStateParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonCallState) {
    pj::Call::onCallState(prm);
    return;
  } else {
    jprm = (pj::OnCallStateParam *) &prm; 
    swig_callbackonCallState(jprm);
  }
}

void SwigDirector_Call::onCallTsxState(pj::OnCallTsxStateParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonCallTsxState) {
    pj::Call::onCallTsxState(prm);
    return;
  } else {
    jprm = (pj::OnCallTsxStateParam *) &prm; 
    swig_callbackonCallTsxState(jprm);
  }
}

void SwigDirector_Call::onCallMediaState(pj::OnCallMediaStateParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonCallMediaState) {
    pj::Call::onCallMediaState(prm);
    return;
  } else {
    jprm = (pj::OnCallMediaStateParam *) &prm; 
    swig_callbackonCallMediaState(jprm);
  }
}

void SwigDirector_Call::onCallSdpCreated(pj::OnCallSdpCreatedParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonCallSdpCreated) {
    pj::Call::onCallSdpCreated(prm);
    return;
  } else {
    jprm = (pj::OnCallSdpCreatedParam *) &prm; 
    swig_callbackonCallSdpCreated(jprm);
  }
}

void SwigDirector_Call::onStreamPreCreate(pj::OnStreamPreCreateParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonStreamPreCreate) {
    pj::Call::onStreamPreCreate(prm);
    return;
  } else {
    jprm = (pj::OnStreamPreCreateParam *) &prm; 
    swig_callbackonStreamPreCreate(jprm);
  }
}

void SwigDirector_Call::onStreamCreated(pj::OnStreamCreatedParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonStreamCreated) {
    pj::Call::onStreamCreated(prm);
    return;
  } else {
    jprm = (pj::OnStreamCreatedParam *) &prm; 
    swig_callbackonStreamCreated(jprm);
  }
}

void SwigDirector_Call::onStreamDestroyed(pj::OnStreamDestroyedParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonStreamDestroyed) {
    pj::Call::onStreamDestroyed(prm);
    return;
  } else {
    jprm = (pj::OnStreamDestroyedParam *) &prm; 
    swig_callbackonStreamDestroyed(jprm);
  }
}

void SwigDirector_Call::onDtmfDigit(pj::OnDtmfDigitParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonDtmfDigit) {
    pj::Call::onDtmfDigit(prm);
    return;
  } else {
    jprm = (pj::OnDtmfDigitParam *) &prm; 
    swig_callbackonDtmfDigit(jprm);
  }
}

void SwigDirector_Call::onDtmfEvent(pj::OnDtmfEventParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonDtmfEvent) {
    pj::Call::onDtmfEvent(prm);
    return;
  } else {
    jprm = (pj::OnDtmfEventParam *) &prm; 
    swig_callbackonDtmfEvent(jprm);
  }
}

void SwigDirector_Call::onCallTransferRequest(pj::OnCallTransferRequestParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonCallTransferRequest) {
    pj::Call::onCallTransferRequest(prm);
    return;
  } else {
    jprm = (pj::OnCallTransferRequestParam *) &prm; 
    swig_callbackonCallTransferRequest(jprm);
  }
}

void SwigDirector_Call::onCallTransferStatus(pj::OnCallTransferStatusParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonCallTransferStatus) {
    pj::Call::onCallTransferStatus(prm);
    return;
  } else {
    jprm = (pj::OnCallTransferStatusParam *) &prm; 
    swig_callbackonCallTransferStatus(jprm);
  }
}

void SwigDirector_Call::onCallReplaceRequest(pj::OnCallReplaceRequestParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonCallReplaceRequest) {
    pj::Call::onCallReplaceRequest(prm);
    return;
  } else {
    jprm = (pj::OnCallReplaceRequestParam *) &prm; 
    swig_callbackonCallReplaceRequest(jprm);
  }
}

void SwigDirector_Call::onCallReplaced(pj::OnCallReplacedParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonCallReplaced) {
    pj::Call::onCallReplaced(prm);
    return;
  } else {
    jprm = (pj::OnCallReplacedParam *) &prm; 
    swig_callbackonCallReplaced(jprm);
  }
}

void SwigDirector_Call::onCallRxOffer(pj::OnCallRxOfferParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonCallRxOffer) {
    pj::Call::onCallRxOffer(prm);
    return;
  } else {
    jprm = (pj::OnCallRxOfferParam *) &prm; 
    swig_callbackonCallRxOffer(jprm);
  }
}

void SwigDirector_Call::onCallRxReinvite(pj::OnCallRxReinviteParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonCallRxReinvite) {
    pj::Call::onCallRxReinvite(prm);
    return;
  } else {
    jprm = (pj::OnCallRxReinviteParam *) &prm; 
    swig_callbackonCallRxReinvite(jprm);
  }
}

void SwigDirector_Call::onCallTxOffer(pj::OnCallTxOfferParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonCallTxOffer) {
    pj::Call::onCallTxOffer(prm);
    return;
  } else {
    jprm = (pj::OnCallTxOfferParam *) &prm; 
    swig_callbackonCallTxOffer(jprm);
  }
}

void SwigDirector_Call::onInstantMessage(pj::OnInstantMessageParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonInstantMessage) {
    pj::Call::onInstantMessage(prm);
    return;
  } else {
    jprm = (pj::OnInstantMessageParam *) &prm; 
    swig_callbackonInstantMessage(jprm);
  }
}

void SwigDirector_Call::onInstantMessageStatus(pj::OnInstantMessageStatusParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonInstantMessageStatus) {
    pj::Call::onInstantMessageStatus(prm);
    return;
  } else {
    jprm = (pj::OnInstantMessageStatusParam *) &prm; 
    swig_callbackonInstantMessageStatus(jprm);
  }
}

void SwigDirector_Call::onTypingIndication(pj::OnTypingIndicationParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonTypingIndication) {
    pj::Call::onTypingIndication(prm);
    return;
  } else {
    jprm = (pj::OnTypingIndicationParam *) &prm; 
    swig_callbackonTypingIndication(jprm);
  }
}

pjsip_redirect_op SwigDirector_Call::onCallRedirected(pj::OnCallRedirectedParam &prm) {
  pjsip_redirect_op c_result = SwigValueInit< pjsip_redirect_op >() ;
  int jresult = 0 ;
  void * jprm = 0 ;
  
  if (!swig_callbackonCallRedirected) {
    return pj::Call::onCallRedirected(prm);
  } else {
    jprm = (pj::OnCallRedirectedParam *) &prm; 
    jresult = (int) swig_callbackonCallRedirected(jprm);
    c_result = (pjsip_redirect_op)jresult; 
  }
  return c_result;
}

void SwigDirector_Call::onCallMediaTransportState(pj::OnCallMediaTransportStateParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonCallMediaTransportState) {
    pj::Call::onCallMediaTransportState(prm);
    return;
  } else {
    jprm = (pj::OnCallMediaTransportStateParam *) &prm; 
    swig_callbackonCallMediaTransportState(jprm);
  }
}

void SwigDirector_Call::onCallMediaEvent(pj::OnCallMediaEventParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonCallMediaEvent) {
    pj::Call::onCallMediaEvent(prm);
    return;
  } else {
    jprm = (pj::OnCallMediaEventParam *) &prm; 
    swig_callbackonCallMediaEvent(jprm);
  }
}

void SwigDirector_Call::onCreateMediaTransport(pj::OnCreateMediaTransportParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonCreateMediaTransport) {
    pj::Call::onCreateMediaTransport(prm);
    return;
  } else {
    jprm = (pj::OnCreateMediaTransportParam *) &prm; 
    swig_callbackonCreateMediaTransport(jprm);
  }
}

void SwigDirector_Call::onCreateMediaTransportSrtp(pj::OnCreateMediaTransportSrtpParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonCreateMediaTransportSrtp) {
    pj::Call::onCreateMediaTransportSrtp(prm);
    return;
  } else {
    jprm = (pj::OnCreateMediaTransportSrtpParam *) &prm; 
    swig_callbackonCreateMediaTransportSrtp(jprm);
  }
}

void SwigDirector_Call::swig_connect_director(SWIG_Callback0_t callbackonCallState, SWIG_Callback1_t callbackonCallTsxState, SWIG_Callback2_t callbackonCallMediaState, SWIG_Callback3_t callbackonCallSdpCreated, SWIG_Callback4_t callbackonStreamPreCreate, SWIG_Callback5_t callbackonStreamCreated, SWIG_Callback6_t callbackonStreamDestroyed, SWIG_Callback7_t callbackonDtmfDigit, SWIG_Callback8_t callbackonDtmfEvent, SWIG_Callback9_t callbackonCallTransferRequest, SWIG_Callback10_t callbackonCallTransferStatus, SWIG_Callback11_t callbackonCallReplaceRequest, SWIG_Callback12_t callbackonCallReplaced, SWIG_Callback13_t callbackonCallRxOffer, SWIG_Callback14_t callbackonCallRxReinvite, SWIG_Callback15_t callbackonCallTxOffer, SWIG_Callback16_t callbackonInstantMessage, SWIG_Callback17_t callbackonInstantMessageStatus, SWIG_Callback18_t callbackonTypingIndication, SWIG_Callback19_t callbackonCallRedirected, SWIG_Callback20_t callbackonCallMediaTransportState, SWIG_Callback21_t callbackonCallMediaEvent, SWIG_Callback22_t callbackonCreateMediaTransport, SWIG_Callback23_t callbackonCreateMediaTransportSrtp) {
  swig_callbackonCallState = callbackonCallState;
  swig_callbackonCallTsxState = callbackonCallTsxState;
  swig_callbackonCallMediaState = callbackonCallMediaState;
  swig_callbackonCallSdpCreated = callbackonCallSdpCreated;
  swig_callbackonStreamPreCreate = callbackonStreamPreCreate;
  swig_callbackonStreamCreated = callbackonStreamCreated;
  swig_callbackonStreamDestroyed = callbackonStreamDestroyed;
  swig_callbackonDtmfDigit = callbackonDtmfDigit;
  swig_callbackonDtmfEvent = callbackonDtmfEvent;
  swig_callbackonCallTransferRequest = callbackonCallTransferRequest;
  swig_callbackonCallTransferStatus = callbackonCallTransferStatus;
  swig_callbackonCallReplaceRequest = callbackonCallReplaceRequest;
  swig_callbackonCallReplaced = callbackonCallReplaced;
  swig_callbackonCallRxOffer = callbackonCallRxOffer;
  swig_callbackonCallRxReinvite = callbackonCallRxReinvite;
  swig_callbackonCallTxOffer = callbackonCallTxOffer;
  swig_callbackonInstantMessage = callbackonInstantMessage;
  swig_callbackonInstantMessageStatus = callbackonInstantMessageStatus;
  swig_callbackonTypingIndication = callbackonTypingIndication;
  swig_callbackonCallRedirected = callbackonCallRedirected;
  swig_callbackonCallMediaTransportState = callbackonCallMediaTransportState;
  swig_callbackonCallMediaEvent = callbackonCallMediaEvent;
  swig_callbackonCreateMediaTransport = callbackonCreateMediaTransport;
  swig_callbackonCreateMediaTransportSrtp = callbackonCreateMediaTransportSrtp;
}

void SwigDirector_Call::swig_init_callbacks() {
  swig_callbackonCallState = 0;
  swig_callbackonCallTsxState = 0;
  swig_callbackonCallMediaState = 0;
  swig_callbackonCallSdpCreated = 0;
  swig_callbackonStreamPreCreate = 0;
  swig_callbackonStreamCreated = 0;
  swig_callbackonStreamDestroyed = 0;
  swig_callbackonDtmfDigit = 0;
  swig_callbackonDtmfEvent = 0;
  swig_callbackonCallTransferRequest = 0;
  swig_callbackonCallTransferStatus = 0;
  swig_callbackonCallReplaceRequest = 0;
  swig_callbackonCallReplaced = 0;
  swig_callbackonCallRxOffer = 0;
  swig_callbackonCallRxReinvite = 0;
  swig_callbackonCallTxOffer = 0;
  swig_callbackonInstantMessage = 0;
  swig_callbackonInstantMessageStatus = 0;
  swig_callbackonTypingIndication = 0;
  swig_callbackonCallRedirected = 0;
  swig_callbackonCallMediaTransportState = 0;
  swig_callbackonCallMediaEvent = 0;
  swig_callbackonCreateMediaTransport = 0;
  swig_callbackonCreateMediaTransportSrtp = 0;
}

SwigDirector_LogWriter::SwigDirector_LogWriter() : pj::LogWriter(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_LogWriter::~SwigDirector_LogWriter() {
  
}


void SwigDirector_LogWriter::write(pj::LogEntry const &entry) {
  void * jentry = 0 ;
  
  if (!swig_callbackwrite) {
    Swig::DirectorPureVirtualException::raise("pj::LogWriter::write");
    return;
  } else {
    jentry = (pj::LogEntry *) &entry; 
    swig_callbackwrite(jentry);
  }
}

void SwigDirector_LogWriter::swig_connect_director(SWIG_Callback0_t callbackwrite) {
  swig_callbackwrite = callbackwrite;
}

void SwigDirector_LogWriter::swig_init_callbacks() {
  swig_callbackwrite = 0;
}

SwigDirector_Endpoint::SwigDirector_Endpoint() : pj::Endpoint(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_Endpoint::~SwigDirector_Endpoint() {
  
}


void SwigDirector_Endpoint::onNatDetectionComplete(pj::OnNatDetectionCompleteParam const &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonNatDetectionComplete) {
    pj::Endpoint::onNatDetectionComplete(prm);
    return;
  } else {
    jprm = (pj::OnNatDetectionCompleteParam *) &prm; 
    swig_callbackonNatDetectionComplete(jprm);
  }
}

void SwigDirector_Endpoint::onNatCheckStunServersComplete(pj::OnNatCheckStunServersCompleteParam const &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonNatCheckStunServersComplete) {
    pj::Endpoint::onNatCheckStunServersComplete(prm);
    return;
  } else {
    jprm = (pj::OnNatCheckStunServersCompleteParam *) &prm; 
    swig_callbackonNatCheckStunServersComplete(jprm);
  }
}

void SwigDirector_Endpoint::onTransportState(pj::OnTransportStateParam const &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonTransportState) {
    pj::Endpoint::onTransportState(prm);
    return;
  } else {
    jprm = (pj::OnTransportStateParam *) &prm; 
    swig_callbackonTransportState(jprm);
  }
}

void SwigDirector_Endpoint::onTimer(pj::OnTimerParam const &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonTimer) {
    pj::Endpoint::onTimer(prm);
    return;
  } else {
    jprm = (pj::OnTimerParam *) &prm; 
    swig_callbackonTimer(jprm);
  }
}

void SwigDirector_Endpoint::onSelectAccount(pj::OnSelectAccountParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonSelectAccount) {
    pj::Endpoint::onSelectAccount(prm);
    return;
  } else {
    jprm = (pj::OnSelectAccountParam *) &prm; 
    swig_callbackonSelectAccount(jprm);
  }
}

void SwigDirector_Endpoint::onIpChangeProgress(pj::OnIpChangeProgressParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonIpChangeProgress) {
    pj::Endpoint::onIpChangeProgress(prm);
    return;
  } else {
    jprm = (pj::OnIpChangeProgressParam *) &prm; 
    swig_callbackonIpChangeProgress(jprm);
  }
}

void SwigDirector_Endpoint::onMediaEvent(pj::OnMediaEventParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonMediaEvent) {
    pj::Endpoint::onMediaEvent(prm);
    return;
  } else {
    jprm = (pj::OnMediaEventParam *) &prm; 
    swig_callbackonMediaEvent(jprm);
  }
}

pj_status_t SwigDirector_Endpoint::onCredAuth(pj::OnCredAuthParam &prm) {
  pj_status_t c_result = SwigValueInit< pj_status_t >() ;
  int jresult = 0 ;
  void * jprm = 0 ;
  
  if (!swig_callbackonCredAuth) {
    return pj::Endpoint::onCredAuth(prm);
  } else {
    jprm = (pj::OnCredAuthParam *) &prm; 
    jresult = (int) swig_callbackonCredAuth(jprm);
    c_result = (pj_status_t)jresult; 
  }
  return c_result;
}

void SwigDirector_Endpoint::onRejectedIncomingCall(pj::OnRejectedIncomingCallParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonRejectedIncomingCall) {
    pj::Endpoint::onRejectedIncomingCall(prm);
    return;
  } else {
    jprm = (pj::OnRejectedIncomingCallParam *) &prm; 
    swig_callbackonRejectedIncomingCall(jprm);
  }
}

void SwigDirector_Endpoint::swig_connect_director(SWIG_Callback0_t callbackonNatDetectionComplete, SWIG_Callback1_t callbackonNatCheckStunServersComplete, SWIG_Callback2_t callbackonTransportState, SWIG_Callback3_t callbackonTimer, SWIG_Callback4_t callbackonSelectAccount, SWIG_Callback5_t callbackonIpChangeProgress, SWIG_Callback6_t callbackonMediaEvent, SWIG_Callback7_t callbackonCredAuth, SWIG_Callback8_t callbackonRejectedIncomingCall) {
  swig_callbackonNatDetectionComplete = callbackonNatDetectionComplete;
  swig_callbackonNatCheckStunServersComplete = callbackonNatCheckStunServersComplete;
  swig_callbackonTransportState = callbackonTransportState;
  swig_callbackonTimer = callbackonTimer;
  swig_callbackonSelectAccount = callbackonSelectAccount;
  swig_callbackonIpChangeProgress = callbackonIpChangeProgress;
  swig_callbackonMediaEvent = callbackonMediaEvent;
  swig_callbackonCredAuth = callbackonCredAuth;
  swig_callbackonRejectedIncomingCall = callbackonRejectedIncomingCall;
}

void SwigDirector_Endpoint::swig_init_callbacks() {
  swig_callbackonNatDetectionComplete = 0;
  swig_callbackonNatCheckStunServersComplete = 0;
  swig_callbackonTransportState = 0;
  swig_callbackonTimer = 0;
  swig_callbackonSelectAccount = 0;
  swig_callbackonIpChangeProgress = 0;
  swig_callbackonMediaEvent = 0;
  swig_callbackonCredAuth = 0;
  swig_callbackonRejectedIncomingCall = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_pj_qos_params_flags_set(void * jarg1, unsigned char jarg2) {
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  pj_uint8_t arg2 ;
  
  arg1 = (pj_qos_params *)jarg1; 
  arg2 = (pj_uint8_t)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_pj_qos_params_flags_get(void * jarg1) {
  unsigned char jresult ;
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  pj_uint8_t result;
  
  arg1 = (pj_qos_params *)jarg1; 
  result = (pj_uint8_t) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pj_qos_params_dscp_val_set(void * jarg1, unsigned char jarg2) {
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  pj_uint8_t arg2 ;
  
  arg1 = (pj_qos_params *)jarg1; 
  arg2 = (pj_uint8_t)jarg2; 
  if (arg1) (arg1)->dscp_val = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_pj_qos_params_dscp_val_get(void * jarg1) {
  unsigned char jresult ;
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  pj_uint8_t result;
  
  arg1 = (pj_qos_params *)jarg1; 
  result = (pj_uint8_t) ((arg1)->dscp_val);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pj_qos_params_so_prio_set(void * jarg1, unsigned char jarg2) {
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  pj_uint8_t arg2 ;
  
  arg1 = (pj_qos_params *)jarg1; 
  arg2 = (pj_uint8_t)jarg2; 
  if (arg1) (arg1)->so_prio = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_pj_qos_params_so_prio_get(void * jarg1) {
  unsigned char jresult ;
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  pj_uint8_t result;
  
  arg1 = (pj_qos_params *)jarg1; 
  result = (pj_uint8_t) ((arg1)->so_prio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pj_qos_params_wmm_prio_set(void * jarg1, int jarg2) {
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  pj_qos_wmm_prio arg2 ;
  
  arg1 = (pj_qos_params *)jarg1; 
  arg2 = (pj_qos_wmm_prio)jarg2; 
  if (arg1) (arg1)->wmm_prio = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pj_qos_params_wmm_prio_get(void * jarg1) {
  int jresult ;
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  pj_qos_wmm_prio result;
  
  arg1 = (pj_qos_params *)jarg1; 
  result = (pj_qos_wmm_prio) ((arg1)->wmm_prio);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_pj_qos_params() {
  void * jresult ;
  pj_qos_params *result = 0 ;
  
  result = (pj_qos_params *)new pj_qos_params();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_pj_qos_params(void * jarg1) {
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  
  arg1 = (pj_qos_params *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjmedia_tone_digit_digit_set(void * jarg1, char jarg2) {
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  char arg2 ;
  
  arg1 = (pjmedia_tone_digit *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->digit = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_pjmedia_tone_digit_digit_get(void * jarg1) {
  char jresult ;
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  char result;
  
  arg1 = (pjmedia_tone_digit *)jarg1; 
  result = (char) ((arg1)->digit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjmedia_tone_digit_on_msec_set(void * jarg1, short jarg2) {
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  short arg2 ;
  
  arg1 = (pjmedia_tone_digit *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->on_msec = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_pjmedia_tone_digit_on_msec_get(void * jarg1) {
  short jresult ;
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  short result;
  
  arg1 = (pjmedia_tone_digit *)jarg1; 
  result = (short) ((arg1)->on_msec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjmedia_tone_digit_off_msec_set(void * jarg1, short jarg2) {
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  short arg2 ;
  
  arg1 = (pjmedia_tone_digit *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->off_msec = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_pjmedia_tone_digit_off_msec_get(void * jarg1) {
  short jresult ;
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  short result;
  
  arg1 = (pjmedia_tone_digit *)jarg1; 
  result = (short) ((arg1)->off_msec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjmedia_tone_digit_volume_set(void * jarg1, short jarg2) {
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  short arg2 ;
  
  arg1 = (pjmedia_tone_digit *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->volume = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_pjmedia_tone_digit_volume_get(void * jarg1) {
  short jresult ;
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  short result;
  
  arg1 = (pjmedia_tone_digit *)jarg1; 
  result = (short) ((arg1)->volume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_pjmedia_tone_digit() {
  void * jresult ;
  pjmedia_tone_digit *result = 0 ;
  
  result = (pjmedia_tone_digit *)new pjmedia_tone_digit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_pjmedia_tone_digit(void * jarg1) {
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  
  arg1 = (pjmedia_tone_digit *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjmedia_tone_digit_map_count_set(void * jarg1, unsigned int jarg2) {
  pjmedia_tone_digit_map *arg1 = (pjmedia_tone_digit_map *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pjmedia_tone_digit_map *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjmedia_tone_digit_map_count_get(void * jarg1) {
  unsigned int jresult ;
  pjmedia_tone_digit_map *arg1 = (pjmedia_tone_digit_map *) 0 ;
  unsigned int result;
  
  arg1 = (pjmedia_tone_digit_map *)jarg1; 
  result = (unsigned int) ((arg1)->count);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_pjmedia_tone_digit_map() {
  void * jresult ;
  pjmedia_tone_digit_map *result = 0 ;
  
  result = (pjmedia_tone_digit_map *)new pjmedia_tone_digit_map();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_pjmedia_tone_digit_map(void * jarg1) {
  pjmedia_tone_digit_map *arg1 = (pjmedia_tone_digit_map *) 0 ;
  
  arg1 = (pjmedia_tone_digit_map *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjmedia_tone_desc_freq1_set(void * jarg1, short jarg2) {
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short arg2 ;
  
  arg1 = (pjmedia_tone_desc *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->freq1 = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_pjmedia_tone_desc_freq1_get(void * jarg1) {
  short jresult ;
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short result;
  
  arg1 = (pjmedia_tone_desc *)jarg1; 
  result = (short) ((arg1)->freq1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjmedia_tone_desc_freq2_set(void * jarg1, short jarg2) {
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short arg2 ;
  
  arg1 = (pjmedia_tone_desc *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->freq2 = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_pjmedia_tone_desc_freq2_get(void * jarg1) {
  short jresult ;
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short result;
  
  arg1 = (pjmedia_tone_desc *)jarg1; 
  result = (short) ((arg1)->freq2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjmedia_tone_desc_on_msec_set(void * jarg1, short jarg2) {
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short arg2 ;
  
  arg1 = (pjmedia_tone_desc *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->on_msec = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_pjmedia_tone_desc_on_msec_get(void * jarg1) {
  short jresult ;
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short result;
  
  arg1 = (pjmedia_tone_desc *)jarg1; 
  result = (short) ((arg1)->on_msec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjmedia_tone_desc_off_msec_set(void * jarg1, short jarg2) {
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short arg2 ;
  
  arg1 = (pjmedia_tone_desc *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->off_msec = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_pjmedia_tone_desc_off_msec_get(void * jarg1) {
  short jresult ;
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short result;
  
  arg1 = (pjmedia_tone_desc *)jarg1; 
  result = (short) ((arg1)->off_msec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjmedia_tone_desc_volume_set(void * jarg1, short jarg2) {
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short arg2 ;
  
  arg1 = (pjmedia_tone_desc *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->volume = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_pjmedia_tone_desc_volume_get(void * jarg1) {
  short jresult ;
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short result;
  
  arg1 = (pjmedia_tone_desc *)jarg1; 
  result = (short) ((arg1)->volume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjmedia_tone_desc_flags_set(void * jarg1, short jarg2) {
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short arg2 ;
  
  arg1 = (pjmedia_tone_desc *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_pjmedia_tone_desc_flags_get(void * jarg1) {
  short jresult ;
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short result;
  
  arg1 = (pjmedia_tone_desc *)jarg1; 
  result = (short) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_pjmedia_tone_desc() {
  void * jresult ;
  pjmedia_tone_desc *result = 0 ;
  
  result = (pjmedia_tone_desc *)new pjmedia_tone_desc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_pjmedia_tone_desc(void * jarg1) {
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  
  arg1 = (pjmedia_tone_desc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringVector__SWIG_0() {
  void * jresult ;
  std::vector< std::string > *result = 0 ;
  
  result = (std::vector< std::string > *)new std::vector< std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return 0;
  } 
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Clear(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Add(void * jarg1, const char * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->push_back((std::string const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringVector_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringVector_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_StringVector_getitemcopy(void * jarg1, int jarg2) {
  const char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_string_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_StringVector_getitem(void * jarg1, int jarg2) {
  const char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_setitem(void * jarg1, int jarg2, const char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__setitem(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  std_vector_Sl_std_string_Sg__AddRange(arg1,(std::vector< std::string > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Insert(void * jarg1, int jarg2, const char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__Insert(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__InsertRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_string_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringVector_Repeat(const char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::vector< std::string > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__Repeat((std::string const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  std_vector_Sl_std_string_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__SetRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringVector_Contains(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Contains(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StringVector_IndexOf(void * jarg1, const char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__IndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StringVector_LastIndexOf(void * jarg1, const char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__LastIndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringVector_Remove(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StringVector(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntVector__SWIG_0() {
  void * jresult ;
  std::vector< int > *result = 0 ;
  
  result = (std::vector< int > *)new std::vector< int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return 0;
  } 
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_Clear(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_Add(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((int const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntVector_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = ((std::vector< int > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = (bool)((std::vector< int > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntVector_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< int > *)new_std_vector_Sl_int_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntVector_getitemcopy(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (int)std_vector_Sl_int_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntVector_getitem(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_setitem(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__setitem(arg1,arg2,(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return ;
  } 
  std_vector_Sl_int_Sg__AddRange(arg1,(std::vector< int > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< int > *)std_vector_Sl_int_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_Insert(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__Insert(arg1,arg2,(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int_Sg__InsertRange(arg1,arg2,(std::vector< int > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_int_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntVector_Repeat(int jarg1, int jarg2) {
  void * jresult ;
  int *arg1 = 0 ;
  int arg2 ;
  int temp1 ;
  std::vector< int > *result = 0 ;
  
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int > *)std_vector_Sl_int_Sg__Repeat((int const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  std_vector_Sl_int_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int_Sg__SetRange(arg1,arg2,(std::vector< int > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntVector_Contains(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int_Sg__Contains(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntVector_IndexOf(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int_Sg__IndexOf(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntVector_LastIndexOf(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int_Sg__LastIndexOf(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntVector_Remove(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int_Sg__Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IntVector(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ByteVector__SWIG_0() {
  void * jresult ;
  std::vector< unsigned char > *result = 0 ;
  
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ByteVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< unsigned char > *arg1 = 0 ;
  std::vector< unsigned char > *result = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & is null", 0);
    return 0;
  } 
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >((std::vector< unsigned char > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ByteVector_Clear(void * jarg1) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ByteVector_Add(void * jarg1, unsigned char jarg2) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((unsigned char const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ByteVector_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  result = ((std::vector< unsigned char > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ByteVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  bool result;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  result = (bool)((std::vector< unsigned char > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ByteVector_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  result = ((std::vector< unsigned char > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ByteVector_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type arg2 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (std::vector< unsigned char >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ByteVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< unsigned char > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< unsigned char > *)new_std_vector_Sl_unsigned_SS_char_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ByteVector_getitemcopy(void * jarg1, int jarg2) {
  unsigned char jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  unsigned char result;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (unsigned char)std_vector_Sl_unsigned_SS_char_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ByteVector_getitem(void * jarg1, int jarg2) {
  unsigned char jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  std::vector< unsigned char >::value_type *result = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned char >::value_type *) &std_vector_Sl_unsigned_SS_char_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ByteVector_setitem(void * jarg1, int jarg2, unsigned char jarg3) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  unsigned char *arg3 = 0 ;
  unsigned char temp3 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned char)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_unsigned_SS_char_Sg__setitem(arg1,arg2,(unsigned char const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ByteVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char > *arg2 = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (std::vector< unsigned char > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & is null", 0);
    return ;
  } 
  std_vector_Sl_unsigned_SS_char_Sg__AddRange(arg1,(std::vector< unsigned char > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ByteVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< unsigned char > *result = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< unsigned char > *)std_vector_Sl_unsigned_SS_char_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ByteVector_Insert(void * jarg1, int jarg2, unsigned char jarg3) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  unsigned char *arg3 = 0 ;
  unsigned char temp3 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned char)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_unsigned_SS_char_Sg__Insert(arg1,arg2,(unsigned char const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ByteVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  std::vector< unsigned char > *arg3 = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned char > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_unsigned_SS_char_Sg__InsertRange(arg1,arg2,(std::vector< unsigned char > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ByteVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_unsigned_SS_char_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ByteVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_unsigned_SS_char_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ByteVector_Repeat(unsigned char jarg1, int jarg2) {
  void * jresult ;
  unsigned char *arg1 = 0 ;
  int arg2 ;
  unsigned char temp1 ;
  std::vector< unsigned char > *result = 0 ;
  
  temp1 = (unsigned char)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned char > *)std_vector_Sl_unsigned_SS_char_Sg__Repeat((unsigned char const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ByteVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  std_vector_Sl_unsigned_SS_char_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ByteVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_unsigned_SS_char_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ByteVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  std::vector< unsigned char > *arg3 = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned char > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_unsigned_SS_char_Sg__SetRange(arg1,arg2,(std::vector< unsigned char > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ByteVector_Contains(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  bool result;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_unsigned_SS_char_Sg__Contains(arg1,(unsigned char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ByteVector_IndexOf(void * jarg1, unsigned char jarg2) {
  int jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  int result;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_unsigned_SS_char_Sg__IndexOf(arg1,(unsigned char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ByteVector_LastIndexOf(void * jarg1, unsigned char jarg2) {
  int jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  int result;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_unsigned_SS_char_Sg__LastIndexOf(arg1,(unsigned char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ByteVector_Remove(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  bool result;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_unsigned_SS_char_Sg__Remove(arg1,(unsigned char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ByteVector(void * jarg1) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringToStringMap__SWIG_0() {
  void * jresult ;
  std::map< string,string > *result = 0 ;
  
  result = (std::map< string,string > *)new std::map< string,string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringToStringMap__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< std::string,std::string > *arg1 = 0 ;
  std::map< string,string > *result = 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,std::string > const & is null", 0);
    return 0;
  } 
  result = (std::map< string,string > *)new std::map< string,string >((std::map< std::string,std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringToStringMap_size(void * jarg1) {
  unsigned int jresult ;
  std::map< string,string > *arg1 = (std::map< string,string > *) 0 ;
  std::map< string,string >::size_type result;
  
  arg1 = (std::map< string,string > *)jarg1; 
  result = ((std::map< string,string > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringToStringMap_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< string,string > *arg1 = (std::map< string,string > *) 0 ;
  bool result;
  
  arg1 = (std::map< string,string > *)jarg1; 
  result = (bool)((std::map< string,string > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringToStringMap_Clear(void * jarg1) {
  std::map< string,string > *arg1 = (std::map< string,string > *) 0 ;
  
  arg1 = (std::map< string,string > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_StringToStringMap_getitem(void * jarg1, const char * jarg2) {
  const char * jresult ;
  std::map< string,string > *arg1 = (std::map< string,string > *) 0 ;
  std::map< string,string >::key_type *arg2 = 0 ;
  std::map< string,string >::mapped_type *result = 0 ;
  
  arg1 = (std::map< string,string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< string,string >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (std::map< string,string >::mapped_type *) &std_map_Sl_string_Sc_string_Sg__getitem(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringToStringMap_setitem(void * jarg1, const char * jarg2, const char * jarg3) {
  std::map< string,string > *arg1 = (std::map< string,string > *) 0 ;
  std::map< string,string >::key_type *arg2 = 0 ;
  std::map< string,string >::mapped_type *arg3 = 0 ;
  
  arg1 = (std::map< string,string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< string,string >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< string,string >::mapped_type arg3_str(jarg3);
  arg3 = &arg3_str; 
  std_map_Sl_string_Sc_string_Sg__setitem(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringToStringMap_ContainsKey(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  std::map< string,string > *arg1 = (std::map< string,string > *) 0 ;
  std::map< string,string >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< string,string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< string,string >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_map_Sl_string_Sc_string_Sg__ContainsKey(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringToStringMap_Add(void * jarg1, const char * jarg2, const char * jarg3) {
  std::map< string,string > *arg1 = (std::map< string,string > *) 0 ;
  std::map< string,string >::key_type *arg2 = 0 ;
  std::map< string,string >::mapped_type *arg3 = 0 ;
  
  arg1 = (std::map< string,string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< string,string >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< string,string >::mapped_type arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_map_Sl_string_Sc_string_Sg__Add(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringToStringMap_Remove(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  std::map< string,string > *arg1 = (std::map< string,string > *) 0 ;
  std::map< string,string >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< string,string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< string,string >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_map_Sl_string_Sc_string_Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringToStringMap_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< string,string > *arg1 = (std::map< string,string > *) 0 ;
  std::map< std::string,std::string,std::less< std::string > >::iterator *result = 0 ;
  
  arg1 = (std::map< string,string > *)jarg1; 
  result = (std::map< std::string,std::string,std::less< std::string > >::iterator *)std_map_Sl_string_Sc_string_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_StringToStringMap_get_next_key(void * jarg1, void * jarg2) {
  const char * jresult ;
  std::map< string,string > *arg1 = (std::map< string,string > *) 0 ;
  std::map< std::string,std::string,std::less< std::string > >::iterator *arg2 = (std::map< std::string,std::string,std::less< std::string > >::iterator *) 0 ;
  std::map< string,string >::key_type *result = 0 ;
  
  arg1 = (std::map< string,string > *)jarg1; 
  arg2 = (std::map< std::string,std::string,std::less< std::string > >::iterator *)jarg2; 
  result = (std::map< string,string >::key_type *) &std_map_Sl_string_Sc_string_Sg__get_next_key(arg1,arg2);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringToStringMap_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< string,string > *arg1 = (std::map< string,string > *) 0 ;
  std::map< std::string,std::string,std::less< std::string > >::iterator *arg2 = (std::map< std::string,std::string,std::less< std::string > >::iterator *) 0 ;
  
  arg1 = (std::map< string,string > *)jarg1; 
  arg2 = (std::map< std::string,std::string,std::less< std::string > >::iterator *)jarg2; 
  std_map_Sl_string_Sc_string_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StringToStringMap(void * jarg1) {
  std::map< string,string > *arg1 = (std::map< string,string > *) 0 ;
  
  arg1 = (std::map< string,string > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_INVALID_ID_get() {
  int jresult ;
  int result;
  
  result = (int)pj::INVALID_ID;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SUCCESS_get() {
  int jresult ;
  int result;
  
  result = (int)pj::SUCCESS;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Error_status_set(void * jarg1, int jarg2) {
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj_status_t arg2 ;
  
  arg1 = (pj::Error *)jarg1; 
  arg2 = (pj_status_t)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Error_status_get(void * jarg1) {
  int jresult ;
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj_status_t result;
  
  arg1 = (pj::Error *)jarg1; 
  result = (pj_status_t) ((arg1)->status);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Error_title_set(void * jarg1, const char * jarg2) {
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::Error *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->title = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Error_title_get(void * jarg1) {
  const char * jresult ;
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::Error *)jarg1; 
  result = (pj::string *) & ((arg1)->title);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Error_reason_set(void * jarg1, const char * jarg2) {
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::Error *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->reason = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Error_reason_get(void * jarg1) {
  const char * jresult ;
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::Error *)jarg1; 
  result = (pj::string *) & ((arg1)->reason);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Error_srcFile_set(void * jarg1, const char * jarg2) {
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::Error *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->srcFile = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Error_srcFile_get(void * jarg1) {
  const char * jresult ;
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::Error *)jarg1; 
  result = (pj::string *) & ((arg1)->srcFile);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Error_srcLine_set(void * jarg1, int jarg2) {
  pj::Error *arg1 = (pj::Error *) 0 ;
  int arg2 ;
  
  arg1 = (pj::Error *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->srcLine = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Error_srcLine_get(void * jarg1) {
  int jresult ;
  pj::Error *arg1 = (pj::Error *) 0 ;
  int result;
  
  arg1 = (pj::Error *)jarg1; 
  result = (int) ((arg1)->srcLine);
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Error_info__SWIG_0(void * jarg1, unsigned int jarg2) {
  const char * jresult ;
  pj::Error *arg1 = (pj::Error *) 0 ;
  bool arg2 ;
  pj::string result;
  
  arg1 = (pj::Error *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = ((pj::Error const *)arg1)->info(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Error_info__SWIG_1(void * jarg1) {
  const char * jresult ;
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj::string result;
  
  arg1 = (pj::Error *)jarg1; 
  result = ((pj::Error const *)arg1)->info();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Error__SWIG_0() {
  void * jresult ;
  pj::Error *result = 0 ;
  
  result = (pj::Error *)new pj::Error();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Error__SWIG_1(int jarg1, const char * jarg2, const char * jarg3, const char * jarg4, int jarg5) {
  void * jresult ;
  pj_status_t arg1 ;
  pj::string *arg2 = 0 ;
  pj::string *arg3 = 0 ;
  pj::string *arg4 = 0 ;
  int arg5 ;
  pj::Error *result = 0 ;
  
  arg1 = (pj_status_t)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (int)jarg5; 
  result = (pj::Error *)new pj::Error(arg1,(pj::string const &)*arg2,(pj::string const &)*arg3,(pj::string const &)*arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Error(void * jarg1) {
  pj::Error *arg1 = (pj::Error *) 0 ;
  
  arg1 = (pj::Error *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Version_major_set(void * jarg1, int jarg2) {
  pj::Version *arg1 = (pj::Version *) 0 ;
  int arg2 ;
  
  arg1 = (pj::Version *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->major = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Version_major_get(void * jarg1) {
  int jresult ;
  pj::Version *arg1 = (pj::Version *) 0 ;
  int result;
  
  arg1 = (pj::Version *)jarg1; 
  result = (int) ((arg1)->major);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Version_minor_set(void * jarg1, int jarg2) {
  pj::Version *arg1 = (pj::Version *) 0 ;
  int arg2 ;
  
  arg1 = (pj::Version *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->minor = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Version_minor_get(void * jarg1) {
  int jresult ;
  pj::Version *arg1 = (pj::Version *) 0 ;
  int result;
  
  arg1 = (pj::Version *)jarg1; 
  result = (int) ((arg1)->minor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Version_rev_set(void * jarg1, int jarg2) {
  pj::Version *arg1 = (pj::Version *) 0 ;
  int arg2 ;
  
  arg1 = (pj::Version *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->rev = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Version_rev_get(void * jarg1) {
  int jresult ;
  pj::Version *arg1 = (pj::Version *) 0 ;
  int result;
  
  arg1 = (pj::Version *)jarg1; 
  result = (int) ((arg1)->rev);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Version_suffix_set(void * jarg1, const char * jarg2) {
  pj::Version *arg1 = (pj::Version *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::Version *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->suffix = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Version_suffix_get(void * jarg1) {
  const char * jresult ;
  pj::Version *arg1 = (pj::Version *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::Version *)jarg1; 
  result = (pj::string *) & ((arg1)->suffix);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Version_full_set(void * jarg1, const char * jarg2) {
  pj::Version *arg1 = (pj::Version *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::Version *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->full = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Version_full_get(void * jarg1) {
  const char * jresult ;
  pj::Version *arg1 = (pj::Version *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::Version *)jarg1; 
  result = (pj::string *) & ((arg1)->full);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Version_numeric_set(void * jarg1, unsigned int jarg2) {
  pj::Version *arg1 = (pj::Version *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::Version *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->numeric = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Version_numeric_get(void * jarg1) {
  unsigned int jresult ;
  pj::Version *arg1 = (pj::Version *) 0 ;
  unsigned int result;
  
  arg1 = (pj::Version *)jarg1; 
  result = (unsigned int) ((arg1)->numeric);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Version() {
  void * jresult ;
  pj::Version *result = 0 ;
  
  result = (pj::Version *)new pj::Version();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Version(void * jarg1) {
  pj::Version *arg1 = (pj::Version *) 0 ;
  
  arg1 = (pj::Version *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TimeVal_sec_set(void * jarg1, int jarg2) {
  pj::TimeVal *arg1 = (pj::TimeVal *) 0 ;
  long arg2 ;
  
  arg1 = (pj::TimeVal *)jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->sec = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TimeVal_sec_get(void * jarg1) {
  int jresult ;
  pj::TimeVal *arg1 = (pj::TimeVal *) 0 ;
  long result;
  
  arg1 = (pj::TimeVal *)jarg1; 
  result = (long) ((arg1)->sec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TimeVal_msec_set(void * jarg1, int jarg2) {
  pj::TimeVal *arg1 = (pj::TimeVal *) 0 ;
  long arg2 ;
  
  arg1 = (pj::TimeVal *)jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->msec = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TimeVal_msec_get(void * jarg1) {
  int jresult ;
  pj::TimeVal *arg1 = (pj::TimeVal *) 0 ;
  long result;
  
  arg1 = (pj::TimeVal *)jarg1; 
  result = (long) ((arg1)->msec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TimeVal() {
  void * jresult ;
  pj::TimeVal *result = 0 ;
  
  result = (pj::TimeVal *)new pj::TimeVal();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TimeVal(void * jarg1) {
  pj::TimeVal *arg1 = (pj::TimeVal *) 0 ;
  
  arg1 = (pj::TimeVal *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PersistentObject(void * jarg1) {
  pj::PersistentObject *arg1 = (pj::PersistentObject *) 0 ;
  
  arg1 = (pj::PersistentObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PersistentObject_readObject(void * jarg1, void * jarg2) {
  pj::PersistentObject *arg1 = (pj::PersistentObject *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::PersistentObject *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PersistentObject_writeObject(void * jarg1, void * jarg2) {
  pj::PersistentObject *arg1 = (pj::PersistentObject *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::PersistentObject *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & is null", 0);
    return ;
  } 
  try {
    ((pj::PersistentObject const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PersistentDocument(void * jarg1) {
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PersistentDocument_loadFile(void * jarg1, const char * jarg2) {
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->loadFile((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PersistentDocument_loadString(void * jarg1, const char * jarg2) {
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->loadString((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PersistentDocument_saveFile(void * jarg1, const char * jarg2) {
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->saveFile((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_PersistentDocument_saveString(void * jarg1) {
  const char * jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  try {
    result = (arg1)->saveString();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PersistentDocument_getRootContainer(void * jarg1) {
  void * jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::ContainerNode *result = 0 ;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  result = (pj::ContainerNode *) &((pj::PersistentDocument const *)arg1)->getRootContainer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PersistentDocument_hasUnread(void * jarg1) {
  unsigned int jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  bool result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  result = (bool)((pj::PersistentDocument const *)arg1)->hasUnread();
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_PersistentDocument_unreadName(void * jarg1) {
  const char * jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  try {
    result = ((pj::PersistentDocument const *)arg1)->unreadName();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PersistentDocument_readInt__SWIG_0(void * jarg1, const char * jarg2) {
  int jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  int result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (int)((pj::PersistentDocument const *)arg1)->readInt((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PersistentDocument_readInt__SWIG_1(void * jarg1) {
  int jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  int result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  try {
    result = (int)((pj::PersistentDocument const *)arg1)->readInt();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PersistentDocument_readNumber__SWIG_0(void * jarg1, const char * jarg2) {
  float jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  float result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (float)((pj::PersistentDocument const *)arg1)->readNumber((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PersistentDocument_readNumber__SWIG_1(void * jarg1) {
  float jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  float result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  try {
    result = (float)((pj::PersistentDocument const *)arg1)->readNumber();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PersistentDocument_readBool__SWIG_0(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  bool result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (bool)((pj::PersistentDocument const *)arg1)->readBool((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PersistentDocument_readBool__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  bool result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  try {
    result = (bool)((pj::PersistentDocument const *)arg1)->readBool();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_PersistentDocument_readString__SWIG_0(void * jarg1, const char * jarg2) {
  const char * jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = ((pj::PersistentDocument const *)arg1)->readString((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_PersistentDocument_readString__SWIG_1(void * jarg1) {
  const char * jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  try {
    result = ((pj::PersistentDocument const *)arg1)->readString();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PersistentDocument_readStringVector__SWIG_0(void * jarg1, const char * jarg2) {
  void * jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::StringVector result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = ((pj::PersistentDocument const *)arg1)->readStringVector((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::StringVector(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PersistentDocument_readStringVector__SWIG_1(void * jarg1) {
  void * jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::StringVector result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  try {
    result = ((pj::PersistentDocument const *)arg1)->readStringVector();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::StringVector(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PersistentDocument_readObject(void * jarg1, void * jarg2) {
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::PersistentObject *arg2 = 0 ;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  arg2 = (pj::PersistentObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::PersistentObject & is null", 0);
    return ;
  } 
  try {
    ((pj::PersistentDocument const *)arg1)->readObject(*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PersistentDocument_readContainer__SWIG_0(void * jarg1, const char * jarg2) {
  void * jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::ContainerNode result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = ((pj::PersistentDocument const *)arg1)->readContainer((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::ContainerNode(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PersistentDocument_readContainer__SWIG_1(void * jarg1) {
  void * jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::ContainerNode result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  try {
    result = ((pj::PersistentDocument const *)arg1)->readContainer();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::ContainerNode(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PersistentDocument_readArray__SWIG_0(void * jarg1, const char * jarg2) {
  void * jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::ContainerNode result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = ((pj::PersistentDocument const *)arg1)->readArray((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::ContainerNode(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PersistentDocument_readArray__SWIG_1(void * jarg1) {
  void * jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::ContainerNode result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  try {
    result = ((pj::PersistentDocument const *)arg1)->readArray();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::ContainerNode(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PersistentDocument_writeNumber(void * jarg1, const char * jarg2, float jarg3) {
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  try {
    (arg1)->writeNumber((pj::string const &)*arg2,arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PersistentDocument_writeInt(void * jarg1, const char * jarg2, int jarg3) {
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  try {
    (arg1)->writeInt((pj::string const &)*arg2,arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PersistentDocument_writeBool(void * jarg1, const char * jarg2, unsigned int jarg3) {
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->writeBool((pj::string const &)*arg2,arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PersistentDocument_writeString(void * jarg1, const char * jarg2, const char * jarg3) {
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string *arg3 = 0 ;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    (arg1)->writeString((pj::string const &)*arg2,(pj::string const &)*arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PersistentDocument_writeStringVector(void * jarg1, const char * jarg2, void * jarg3) {
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::StringVector *arg3 = 0 ;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (pj::StringVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::StringVector const & is null", 0);
    return ;
  } 
  try {
    (arg1)->writeStringVector((pj::string const &)*arg2,(pj::StringVector const &)*arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PersistentDocument_writeObject(void * jarg1, void * jarg2) {
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::PersistentObject *arg2 = 0 ;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  arg2 = (pj::PersistentObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::PersistentObject const & is null", 0);
    return ;
  } 
  try {
    (arg1)->writeObject((pj::PersistentObject const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PersistentDocument_writeNewContainer(void * jarg1, const char * jarg2) {
  void * jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::ContainerNode result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (arg1)->writeNewContainer((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::ContainerNode(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PersistentDocument_writeNewArray(void * jarg1, const char * jarg2) {
  void * jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::ContainerNode result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (arg1)->writeNewArray((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::ContainerNode(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ContainerNode_hasUnread(void * jarg1) {
  unsigned int jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  bool result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  result = (bool)((pj::ContainerNode const *)arg1)->hasUnread();
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ContainerNode_unreadName(void * jarg1) {
  const char * jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  try {
    result = ((pj::ContainerNode const *)arg1)->unreadName();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ContainerNode_readInt__SWIG_0(void * jarg1, const char * jarg2) {
  int jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  int result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (int)((pj::ContainerNode const *)arg1)->readInt((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ContainerNode_readInt__SWIG_1(void * jarg1) {
  int jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  int result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  try {
    result = (int)((pj::ContainerNode const *)arg1)->readInt();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ContainerNode_readNumber__SWIG_0(void * jarg1, const char * jarg2) {
  float jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  float result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (float)((pj::ContainerNode const *)arg1)->readNumber((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ContainerNode_readNumber__SWIG_1(void * jarg1) {
  float jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  float result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  try {
    result = (float)((pj::ContainerNode const *)arg1)->readNumber();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ContainerNode_readBool__SWIG_0(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  bool result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (bool)((pj::ContainerNode const *)arg1)->readBool((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ContainerNode_readBool__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  bool result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  try {
    result = (bool)((pj::ContainerNode const *)arg1)->readBool();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ContainerNode_readString__SWIG_0(void * jarg1, const char * jarg2) {
  const char * jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = ((pj::ContainerNode const *)arg1)->readString((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ContainerNode_readString__SWIG_1(void * jarg1) {
  const char * jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  try {
    result = ((pj::ContainerNode const *)arg1)->readString();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ContainerNode_readStringVector__SWIG_0(void * jarg1, const char * jarg2) {
  void * jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::StringVector result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = ((pj::ContainerNode const *)arg1)->readStringVector((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::StringVector(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ContainerNode_readStringVector__SWIG_1(void * jarg1) {
  void * jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::StringVector result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  try {
    result = ((pj::ContainerNode const *)arg1)->readStringVector();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::StringVector(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ContainerNode_readObject(void * jarg1, void * jarg2) {
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::PersistentObject *arg2 = 0 ;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  arg2 = (pj::PersistentObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::PersistentObject & is null", 0);
    return ;
  } 
  try {
    ((pj::ContainerNode const *)arg1)->readObject(*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ContainerNode_readContainer__SWIG_0(void * jarg1, const char * jarg2) {
  void * jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::ContainerNode result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = ((pj::ContainerNode const *)arg1)->readContainer((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::ContainerNode(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ContainerNode_readContainer__SWIG_1(void * jarg1) {
  void * jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::ContainerNode result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  try {
    result = ((pj::ContainerNode const *)arg1)->readContainer();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::ContainerNode(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ContainerNode_readArray__SWIG_0(void * jarg1, const char * jarg2) {
  void * jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::ContainerNode result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = ((pj::ContainerNode const *)arg1)->readArray((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::ContainerNode(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ContainerNode_readArray__SWIG_1(void * jarg1) {
  void * jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::ContainerNode result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  try {
    result = ((pj::ContainerNode const *)arg1)->readArray();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::ContainerNode(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ContainerNode_writeNumber(void * jarg1, const char * jarg2, float jarg3) {
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  try {
    (arg1)->writeNumber((pj::string const &)*arg2,arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ContainerNode_writeInt(void * jarg1, const char * jarg2, int jarg3) {
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  try {
    (arg1)->writeInt((pj::string const &)*arg2,arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ContainerNode_writeBool(void * jarg1, const char * jarg2, unsigned int jarg3) {
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->writeBool((pj::string const &)*arg2,arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ContainerNode_writeString(void * jarg1, const char * jarg2, const char * jarg3) {
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string *arg3 = 0 ;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    (arg1)->writeString((pj::string const &)*arg2,(pj::string const &)*arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ContainerNode_writeStringVector(void * jarg1, const char * jarg2, void * jarg3) {
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::StringVector *arg3 = 0 ;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (pj::StringVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::StringVector const & is null", 0);
    return ;
  } 
  try {
    (arg1)->writeStringVector((pj::string const &)*arg2,(pj::StringVector const &)*arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ContainerNode_writeObject(void * jarg1, void * jarg2) {
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::PersistentObject *arg2 = 0 ;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  arg2 = (pj::PersistentObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::PersistentObject const & is null", 0);
    return ;
  } 
  try {
    (arg1)->writeObject((pj::PersistentObject const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ContainerNode_writeNewContainer(void * jarg1, const char * jarg2) {
  void * jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::ContainerNode result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (arg1)->writeNewContainer((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::ContainerNode(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ContainerNode_writeNewArray(void * jarg1, const char * jarg2) {
  void * jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::ContainerNode result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (arg1)->writeNewArray((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::ContainerNode(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ContainerNode() {
  void * jresult ;
  pj::ContainerNode *result = 0 ;
  
  result = (pj::ContainerNode *)new pj::ContainerNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ContainerNode(void * jarg1) {
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AuthCredInfo_scheme_set(void * jarg1, const char * jarg2) {
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->scheme = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AuthCredInfo_scheme_get(void * jarg1) {
  const char * jresult ;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->scheme);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AuthCredInfo_realm_set(void * jarg1, const char * jarg2) {
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->realm = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AuthCredInfo_realm_get(void * jarg1) {
  const char * jresult ;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->realm);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AuthCredInfo_username_set(void * jarg1, const char * jarg2) {
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->username = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AuthCredInfo_username_get(void * jarg1) {
  const char * jresult ;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->username);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AuthCredInfo_dataType_set(void * jarg1, int jarg2) {
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  int arg2 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->dataType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AuthCredInfo_dataType_get(void * jarg1) {
  int jresult ;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  int result;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  result = (int) ((arg1)->dataType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AuthCredInfo_data_set(void * jarg1, const char * jarg2) {
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->data = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AuthCredInfo_data_get(void * jarg1) {
  const char * jresult ;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->data);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AuthCredInfo_akaK_set(void * jarg1, const char * jarg2) {
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->akaK = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AuthCredInfo_akaK_get(void * jarg1) {
  const char * jresult ;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->akaK);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AuthCredInfo_akaOp_set(void * jarg1, const char * jarg2) {
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->akaOp = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AuthCredInfo_akaOp_get(void * jarg1) {
  const char * jresult ;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->akaOp);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AuthCredInfo_akaAmf_set(void * jarg1, const char * jarg2) {
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->akaAmf = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AuthCredInfo_akaAmf_get(void * jarg1) {
  const char * jresult ;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->akaAmf);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AuthCredInfo__SWIG_0() {
  void * jresult ;
  pj::AuthCredInfo *result = 0 ;
  
  result = (pj::AuthCredInfo *)new pj::AuthCredInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AuthCredInfo__SWIG_1(const char * jarg1, const char * jarg2, const char * jarg3, int jarg4, const char * jarg5) {
  void * jresult ;
  pj::string *arg1 = 0 ;
  pj::string *arg2 = 0 ;
  pj::string *arg3 = 0 ;
  int arg4 ;
  pj::string arg5 ;
  pj::AuthCredInfo *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg5)->assign(jarg5); 
  result = (pj::AuthCredInfo *)new pj::AuthCredInfo((pj::string const &)*arg1,(pj::string const &)*arg2,(pj::string const &)*arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AuthCredInfo_readObject(void * jarg1, void * jarg2) {
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AuthCredInfo_writeObject(void * jarg1, void * jarg2) {
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & is null", 0);
    return ;
  } 
  try {
    ((pj::AuthCredInfo const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AuthCredInfo(void * jarg1) {
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SockOpt_level_set(void * jarg1, int jarg2) {
  pj::SockOpt *arg1 = (pj::SockOpt *) 0 ;
  int arg2 ;
  
  arg1 = (pj::SockOpt *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->level = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SockOpt_level_get(void * jarg1) {
  int jresult ;
  pj::SockOpt *arg1 = (pj::SockOpt *) 0 ;
  int result;
  
  arg1 = (pj::SockOpt *)jarg1; 
  result = (int) ((arg1)->level);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SockOpt_optName_set(void * jarg1, int jarg2) {
  pj::SockOpt *arg1 = (pj::SockOpt *) 0 ;
  int arg2 ;
  
  arg1 = (pj::SockOpt *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->optName = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SockOpt_optName_get(void * jarg1) {
  int jresult ;
  pj::SockOpt *arg1 = (pj::SockOpt *) 0 ;
  int result;
  
  arg1 = (pj::SockOpt *)jarg1; 
  result = (int) ((arg1)->optName);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SockOpt__SWIG_0() {
  void * jresult ;
  pj::SockOpt *result = 0 ;
  
  result = (pj::SockOpt *)new pj::SockOpt();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SockOpt__SWIG_1(int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  pj::SockOpt *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (pj::SockOpt *)new pj::SockOpt(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SockOpt_setOptValInt(void * jarg1, int jarg2) {
  pj::SockOpt *arg1 = (pj::SockOpt *) 0 ;
  int arg2 ;
  
  arg1 = (pj::SockOpt *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setOptValInt(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SockOpt(void * jarg1) {
  pj::SockOpt *arg1 = (pj::SockOpt *) 0 ;
  
  arg1 = (pj::SockOpt *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SockOptParams_sockOpts_set(void * jarg1, void * jarg2) {
  pj::SockOptParams *arg1 = (pj::SockOptParams *) 0 ;
  pj::SockOptVector *arg2 = (pj::SockOptVector *) 0 ;
  
  arg1 = (pj::SockOptParams *)jarg1; 
  arg2 = (pj::SockOptVector *)jarg2; 
  if (arg1) (arg1)->sockOpts = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SockOptParams_sockOpts_get(void * jarg1) {
  void * jresult ;
  pj::SockOptParams *arg1 = (pj::SockOptParams *) 0 ;
  pj::SockOptVector *result = 0 ;
  
  arg1 = (pj::SockOptParams *)jarg1; 
  result = (pj::SockOptVector *)& ((arg1)->sockOpts);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SockOptParams() {
  void * jresult ;
  pj::SockOptParams *result = 0 ;
  
  result = (pj::SockOptParams *)new pj::SockOptParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SockOptParams_readObject(void * jarg1, void * jarg2) {
  pj::SockOptParams *arg1 = (pj::SockOptParams *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::SockOptParams *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SockOptParams_writeObject(void * jarg1, void * jarg2) {
  pj::SockOptParams *arg1 = (pj::SockOptParams *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::SockOptParams *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & is null", 0);
    return ;
  } 
  try {
    ((pj::SockOptParams const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SockOptParams(void * jarg1) {
  pj::SockOptParams *arg1 = (pj::SockOptParams *) 0 ;
  
  arg1 = (pj::SockOptParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsConfig_CaListFile_set(void * jarg1, const char * jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->CaListFile = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_TlsConfig_CaListFile_get(void * jarg1) {
  const char * jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->CaListFile);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsConfig_certFile_set(void * jarg1, const char * jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->certFile = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_TlsConfig_certFile_get(void * jarg1) {
  const char * jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->certFile);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsConfig_privKeyFile_set(void * jarg1, const char * jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->privKeyFile = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_TlsConfig_privKeyFile_get(void * jarg1) {
  const char * jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->privKeyFile);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsConfig_password_set(void * jarg1, const char * jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->password = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_TlsConfig_password_get(void * jarg1) {
  const char * jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->password);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsConfig_CaBuf_set(void * jarg1, const char * jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->CaBuf = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_TlsConfig_CaBuf_get(void * jarg1) {
  const char * jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->CaBuf);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsConfig_certBuf_set(void * jarg1, const char * jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->certBuf = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_TlsConfig_certBuf_get(void * jarg1) {
  const char * jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->certBuf);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsConfig_privKeyBuf_set(void * jarg1, const char * jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->privKeyBuf = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_TlsConfig_privKeyBuf_get(void * jarg1) {
  const char * jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->privKeyBuf);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsConfig_certLookupType_set(void * jarg1, int jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj_ssl_cert_lookup_type arg2 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  arg2 = (pj_ssl_cert_lookup_type)jarg2; 
  if (arg1) (arg1)->certLookupType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TlsConfig_certLookupType_get(void * jarg1) {
  int jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj_ssl_cert_lookup_type result;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (pj_ssl_cert_lookup_type) ((arg1)->certLookupType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsConfig_certLookupKeyword_set(void * jarg1, const char * jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->certLookupKeyword = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_TlsConfig_certLookupKeyword_get(void * jarg1) {
  const char * jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->certLookupKeyword);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsConfig_method_set(void * jarg1, int jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pjsip_ssl_method arg2 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  arg2 = (pjsip_ssl_method)jarg2; 
  if (arg1) (arg1)->method = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TlsConfig_method_get(void * jarg1) {
  int jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pjsip_ssl_method result;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (pjsip_ssl_method) ((arg1)->method);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsConfig_proto_set(void * jarg1, unsigned int jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->proto = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TlsConfig_proto_get(void * jarg1) {
  unsigned int jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (unsigned int) ((arg1)->proto);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsConfig_ciphers_set(void * jarg1, void * jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::IntVector *arg2 = (pj::IntVector *) 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  arg2 = (pj::IntVector *)jarg2; 
  if (arg1) (arg1)->ciphers = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TlsConfig_ciphers_get(void * jarg1) {
  void * jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::IntVector *result = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (pj::IntVector *)& ((arg1)->ciphers);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsConfig_verifyServer_set(void * jarg1, unsigned int jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->verifyServer = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TlsConfig_verifyServer_get(void * jarg1) {
  unsigned int jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool result;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (bool) ((arg1)->verifyServer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsConfig_verifyClient_set(void * jarg1, unsigned int jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->verifyClient = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TlsConfig_verifyClient_get(void * jarg1) {
  unsigned int jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool result;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (bool) ((arg1)->verifyClient);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsConfig_requireClientCert_set(void * jarg1, unsigned int jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->requireClientCert = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TlsConfig_requireClientCert_get(void * jarg1) {
  unsigned int jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool result;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (bool) ((arg1)->requireClientCert);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsConfig_msecTimeout_set(void * jarg1, unsigned int jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->msecTimeout = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TlsConfig_msecTimeout_get(void * jarg1) {
  unsigned int jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (unsigned int) ((arg1)->msecTimeout);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsConfig_qosType_set(void * jarg1, int jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj_qos_type arg2 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  arg2 = (pj_qos_type)jarg2; 
  if (arg1) (arg1)->qosType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TlsConfig_qosType_get(void * jarg1) {
  int jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj_qos_type result;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (pj_qos_type) ((arg1)->qosType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsConfig_qosParams_set(void * jarg1, void * jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj_qos_params *arg2 = (pj_qos_params *) 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  arg2 = (pj_qos_params *)jarg2; 
  if (arg1) (arg1)->qosParams = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TlsConfig_qosParams_get(void * jarg1) {
  void * jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj_qos_params *result = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (pj_qos_params *)& ((arg1)->qosParams);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsConfig_qosIgnoreError_set(void * jarg1, unsigned int jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->qosIgnoreError = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TlsConfig_qosIgnoreError_get(void * jarg1) {
  unsigned int jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool result;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (bool) ((arg1)->qosIgnoreError);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsConfig_sockOptParams_set(void * jarg1, void * jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::SockOptParams *arg2 = (pj::SockOptParams *) 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  arg2 = (pj::SockOptParams *)jarg2; 
  if (arg1) (arg1)->sockOptParams = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TlsConfig_sockOptParams_get(void * jarg1) {
  void * jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::SockOptParams *result = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (pj::SockOptParams *)& ((arg1)->sockOptParams);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsConfig_sockOptIgnoreError_set(void * jarg1, unsigned int jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->sockOptIgnoreError = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TlsConfig_sockOptIgnoreError_get(void * jarg1) {
  unsigned int jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool result;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (bool) ((arg1)->sockOptIgnoreError);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsConfig_enableRenegotiation_set(void * jarg1, unsigned int jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enableRenegotiation = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TlsConfig_enableRenegotiation_get(void * jarg1) {
  unsigned int jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool result;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (bool) ((arg1)->enableRenegotiation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TlsConfig() {
  void * jresult ;
  pj::TlsConfig *result = 0 ;
  
  result = (pj::TlsConfig *)new pj::TlsConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsConfig_readObject(void * jarg1, void * jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsConfig_writeObject(void * jarg1, void * jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & is null", 0);
    return ;
  } 
  try {
    ((pj::TlsConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TlsConfig(void * jarg1) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransportConfig_port_set(void * jarg1, unsigned int jarg2) {
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->port = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TransportConfig_port_get(void * jarg1) {
  unsigned int jresult ;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  result = (unsigned int) ((arg1)->port);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransportConfig_portRange_set(void * jarg1, unsigned int jarg2) {
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->portRange = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TransportConfig_portRange_get(void * jarg1) {
  unsigned int jresult ;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  result = (unsigned int) ((arg1)->portRange);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransportConfig_randomizePort_set(void * jarg1, unsigned int jarg2) {
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->randomizePort = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TransportConfig_randomizePort_get(void * jarg1) {
  unsigned int jresult ;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  bool result;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  result = (bool) ((arg1)->randomizePort);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransportConfig_publicAddress_set(void * jarg1, const char * jarg2) {
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->publicAddress = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_TransportConfig_publicAddress_get(void * jarg1) {
  const char * jresult ;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->publicAddress);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransportConfig_boundAddress_set(void * jarg1, const char * jarg2) {
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->boundAddress = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_TransportConfig_boundAddress_get(void * jarg1) {
  const char * jresult ;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->boundAddress);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransportConfig_tlsConfig_set(void * jarg1, void * jarg2) {
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::TlsConfig *arg2 = (pj::TlsConfig *) 0 ;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  arg2 = (pj::TlsConfig *)jarg2; 
  if (arg1) (arg1)->tlsConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TransportConfig_tlsConfig_get(void * jarg1) {
  void * jresult ;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::TlsConfig *result = 0 ;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  result = (pj::TlsConfig *)& ((arg1)->tlsConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransportConfig_qosType_set(void * jarg1, int jarg2) {
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj_qos_type arg2 ;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  arg2 = (pj_qos_type)jarg2; 
  if (arg1) (arg1)->qosType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TransportConfig_qosType_get(void * jarg1) {
  int jresult ;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj_qos_type result;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  result = (pj_qos_type) ((arg1)->qosType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransportConfig_qosParams_set(void * jarg1, void * jarg2) {
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj_qos_params *arg2 = (pj_qos_params *) 0 ;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  arg2 = (pj_qos_params *)jarg2; 
  if (arg1) (arg1)->qosParams = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TransportConfig_qosParams_get(void * jarg1) {
  void * jresult ;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj_qos_params *result = 0 ;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  result = (pj_qos_params *)& ((arg1)->qosParams);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransportConfig_sockOptParams_set(void * jarg1, void * jarg2) {
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::SockOptParams *arg2 = (pj::SockOptParams *) 0 ;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  arg2 = (pj::SockOptParams *)jarg2; 
  if (arg1) (arg1)->sockOptParams = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TransportConfig_sockOptParams_get(void * jarg1) {
  void * jresult ;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::SockOptParams *result = 0 ;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  result = (pj::SockOptParams *)& ((arg1)->sockOptParams);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TransportConfig() {
  void * jresult ;
  pj::TransportConfig *result = 0 ;
  
  result = (pj::TransportConfig *)new pj::TransportConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransportConfig_readObject(void * jarg1, void * jarg2) {
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransportConfig_writeObject(void * jarg1, void * jarg2) {
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & is null", 0);
    return ;
  } 
  try {
    ((pj::TransportConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TransportConfig(void * jarg1) {
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransportInfo_id_set(void * jarg1, int jarg2) {
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::TransportId arg2 ;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  arg2 = (pj::TransportId)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TransportInfo_id_get(void * jarg1) {
  int jresult ;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::TransportId result;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  result = (pj::TransportId) ((arg1)->id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransportInfo_type_set(void * jarg1, int jarg2) {
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pjsip_transport_type_e arg2 ;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  arg2 = (pjsip_transport_type_e)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TransportInfo_type_get(void * jarg1) {
  int jresult ;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pjsip_transport_type_e result;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  result = (pjsip_transport_type_e) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransportInfo_typeName_set(void * jarg1, const char * jarg2) {
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->typeName = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_TransportInfo_typeName_get(void * jarg1) {
  const char * jresult ;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->typeName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransportInfo_info_set(void * jarg1, const char * jarg2) {
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->info = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_TransportInfo_info_get(void * jarg1) {
  const char * jresult ;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->info);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransportInfo_flags_set(void * jarg1, unsigned int jarg2) {
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TransportInfo_flags_get(void * jarg1) {
  unsigned int jresult ;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  result = (unsigned int) ((arg1)->flags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransportInfo_localAddress_set(void * jarg1, const char * jarg2) {
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::SocketAddress arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->localAddress = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_TransportInfo_localAddress_get(void * jarg1) {
  const char * jresult ;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->localAddress);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransportInfo_localName_set(void * jarg1, const char * jarg2) {
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::SocketAddress arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->localName = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_TransportInfo_localName_get(void * jarg1) {
  const char * jresult ;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->localName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TransportInfo_usageCount_set(void * jarg1, unsigned int jarg2) {
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->usageCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TransportInfo_usageCount_get(void * jarg1) {
  unsigned int jresult ;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  result = (unsigned int) ((arg1)->usageCount);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TransportInfo() {
  void * jresult ;
  pj::TransportInfo *result = 0 ;
  
  result = (pj::TransportInfo *)new pj::TransportInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TransportInfo(void * jarg1) {
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipRxData_info_set(void * jarg1, const char * jarg2) {
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SipRxData *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->info = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SipRxData_info_get(void * jarg1) {
  const char * jresult ;
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SipRxData *)jarg1; 
  result = (pj::string *) & ((arg1)->info);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipRxData_wholeMsg_set(void * jarg1, const char * jarg2) {
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SipRxData *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->wholeMsg = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SipRxData_wholeMsg_get(void * jarg1) {
  const char * jresult ;
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SipRxData *)jarg1; 
  result = (pj::string *) & ((arg1)->wholeMsg);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipRxData_srcAddress_set(void * jarg1, const char * jarg2) {
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  arg1 = (pj::SipRxData *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::SocketAddress arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->srcAddress = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SipRxData_srcAddress_get(void * jarg1) {
  const char * jresult ;
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  arg1 = (pj::SipRxData *)jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->srcAddress);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipRxData_pjRxData_set(void * jarg1, void * jarg2) {
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (pj::SipRxData *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->pjRxData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SipRxData_pjRxData_get(void * jarg1) {
  void * jresult ;
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  void *result = 0 ;
  
  arg1 = (pj::SipRxData *)jarg1; 
  result = (void *) ((arg1)->pjRxData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SipRxData() {
  void * jresult ;
  pj::SipRxData *result = 0 ;
  
  result = (pj::SipRxData *)new pj::SipRxData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SipRxData(void * jarg1) {
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  
  arg1 = (pj::SipRxData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipTxData_info_set(void * jarg1, const char * jarg2) {
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SipTxData *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->info = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SipTxData_info_get(void * jarg1) {
  const char * jresult ;
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SipTxData *)jarg1; 
  result = (pj::string *) & ((arg1)->info);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipTxData_wholeMsg_set(void * jarg1, const char * jarg2) {
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SipTxData *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->wholeMsg = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SipTxData_wholeMsg_get(void * jarg1) {
  const char * jresult ;
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SipTxData *)jarg1; 
  result = (pj::string *) & ((arg1)->wholeMsg);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipTxData_dstAddress_set(void * jarg1, const char * jarg2) {
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  arg1 = (pj::SipTxData *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::SocketAddress arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->dstAddress = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SipTxData_dstAddress_get(void * jarg1) {
  const char * jresult ;
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  arg1 = (pj::SipTxData *)jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->dstAddress);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipTxData_pjTxData_set(void * jarg1, void * jarg2) {
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (pj::SipTxData *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->pjTxData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SipTxData_pjTxData_get(void * jarg1) {
  void * jresult ;
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  void *result = 0 ;
  
  arg1 = (pj::SipTxData *)jarg1; 
  result = (void *) ((arg1)->pjTxData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SipTxData() {
  void * jresult ;
  pj::SipTxData *result = 0 ;
  
  result = (pj::SipTxData *)new pj::SipTxData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SipTxData(void * jarg1) {
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  
  arg1 = (pj::SipTxData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipTransaction_role_set(void * jarg1, int jarg2) {
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pjsip_role_e arg2 ;
  
  arg1 = (pj::SipTransaction *)jarg1; 
  arg2 = (pjsip_role_e)jarg2; 
  if (arg1) (arg1)->role = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SipTransaction_role_get(void * jarg1) {
  int jresult ;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pjsip_role_e result;
  
  arg1 = (pj::SipTransaction *)jarg1; 
  result = (pjsip_role_e) ((arg1)->role);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipTransaction_method_set(void * jarg1, const char * jarg2) {
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SipTransaction *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->method = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SipTransaction_method_get(void * jarg1) {
  const char * jresult ;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SipTransaction *)jarg1; 
  result = (pj::string *) & ((arg1)->method);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipTransaction_statusCode_set(void * jarg1, int jarg2) {
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  int arg2 ;
  
  arg1 = (pj::SipTransaction *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->statusCode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SipTransaction_statusCode_get(void * jarg1) {
  int jresult ;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  int result;
  
  arg1 = (pj::SipTransaction *)jarg1; 
  result = (int) ((arg1)->statusCode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipTransaction_statusText_set(void * jarg1, const char * jarg2) {
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SipTransaction *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->statusText = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SipTransaction_statusText_get(void * jarg1) {
  const char * jresult ;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SipTransaction *)jarg1; 
  result = (pj::string *) & ((arg1)->statusText);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipTransaction_state_set(void * jarg1, int jarg2) {
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pjsip_tsx_state_e arg2 ;
  
  arg1 = (pj::SipTransaction *)jarg1; 
  arg2 = (pjsip_tsx_state_e)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SipTransaction_state_get(void * jarg1) {
  int jresult ;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pjsip_tsx_state_e result;
  
  arg1 = (pj::SipTransaction *)jarg1; 
  result = (pjsip_tsx_state_e) ((arg1)->state);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipTransaction_lastTx_set(void * jarg1, void * jarg2) {
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pj::SipTxData *arg2 = (pj::SipTxData *) 0 ;
  
  arg1 = (pj::SipTransaction *)jarg1; 
  arg2 = (pj::SipTxData *)jarg2; 
  if (arg1) (arg1)->lastTx = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SipTransaction_lastTx_get(void * jarg1) {
  void * jresult ;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pj::SipTxData *result = 0 ;
  
  arg1 = (pj::SipTransaction *)jarg1; 
  result = (pj::SipTxData *)& ((arg1)->lastTx);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipTransaction_pjTransaction_set(void * jarg1, void * jarg2) {
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (pj::SipTransaction *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->pjTransaction = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SipTransaction_pjTransaction_get(void * jarg1) {
  void * jresult ;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  void *result = 0 ;
  
  arg1 = (pj::SipTransaction *)jarg1; 
  result = (void *) ((arg1)->pjTransaction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SipTransaction() {
  void * jresult ;
  pj::SipTransaction *result = 0 ;
  
  result = (pj::SipTransaction *)new pj::SipTransaction();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SipTransaction(void * jarg1) {
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  
  arg1 = (pj::SipTransaction *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TimerEvent_entry_set(void * jarg1, void * jarg2) {
  pj::TimerEvent *arg1 = (pj::TimerEvent *) 0 ;
  pj::TimerEntry arg2 = (pj::TimerEntry) 0 ;
  
  arg1 = (pj::TimerEvent *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->entry = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TimerEvent_entry_get(void * jarg1) {
  void * jresult ;
  pj::TimerEvent *arg1 = (pj::TimerEvent *) 0 ;
  pj::TimerEntry result;
  
  arg1 = (pj::TimerEvent *)jarg1; 
  result = (pj::TimerEntry) ((arg1)->entry);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TimerEvent() {
  void * jresult ;
  pj::TimerEvent *result = 0 ;
  
  result = (pj::TimerEvent *)new pj::TimerEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TimerEvent(void * jarg1) {
  pj::TimerEvent *arg1 = (pj::TimerEvent *) 0 ;
  
  arg1 = (pj::TimerEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TsxStateEventSrc_rdata_set(void * jarg1, void * jarg2) {
  pj::TsxStateEventSrc *arg1 = (pj::TsxStateEventSrc *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  arg1 = (pj::TsxStateEventSrc *)jarg1; 
  arg2 = (pj::SipRxData *)jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TsxStateEventSrc_rdata_get(void * jarg1) {
  void * jresult ;
  pj::TsxStateEventSrc *arg1 = (pj::TsxStateEventSrc *) 0 ;
  pj::SipRxData *result = 0 ;
  
  arg1 = (pj::TsxStateEventSrc *)jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TsxStateEventSrc_tdata_set(void * jarg1, void * jarg2) {
  pj::TsxStateEventSrc *arg1 = (pj::TsxStateEventSrc *) 0 ;
  pj::SipTxData *arg2 = (pj::SipTxData *) 0 ;
  
  arg1 = (pj::TsxStateEventSrc *)jarg1; 
  arg2 = (pj::SipTxData *)jarg2; 
  if (arg1) (arg1)->tdata = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TsxStateEventSrc_tdata_get(void * jarg1) {
  void * jresult ;
  pj::TsxStateEventSrc *arg1 = (pj::TsxStateEventSrc *) 0 ;
  pj::SipTxData *result = 0 ;
  
  arg1 = (pj::TsxStateEventSrc *)jarg1; 
  result = (pj::SipTxData *)& ((arg1)->tdata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TsxStateEventSrc_timer_set(void * jarg1, void * jarg2) {
  pj::TsxStateEventSrc *arg1 = (pj::TsxStateEventSrc *) 0 ;
  pj::TimerEntry arg2 = (pj::TimerEntry) 0 ;
  
  arg1 = (pj::TsxStateEventSrc *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->timer = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TsxStateEventSrc_timer_get(void * jarg1) {
  void * jresult ;
  pj::TsxStateEventSrc *arg1 = (pj::TsxStateEventSrc *) 0 ;
  pj::TimerEntry result;
  
  arg1 = (pj::TsxStateEventSrc *)jarg1; 
  result = (pj::TimerEntry) ((arg1)->timer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TsxStateEventSrc_status_set(void * jarg1, int jarg2) {
  pj::TsxStateEventSrc *arg1 = (pj::TsxStateEventSrc *) 0 ;
  pj_status_t arg2 ;
  
  arg1 = (pj::TsxStateEventSrc *)jarg1; 
  arg2 = (pj_status_t)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TsxStateEventSrc_status_get(void * jarg1) {
  int jresult ;
  pj::TsxStateEventSrc *arg1 = (pj::TsxStateEventSrc *) 0 ;
  pj_status_t result;
  
  arg1 = (pj::TsxStateEventSrc *)jarg1; 
  result = (pj_status_t) ((arg1)->status);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TsxStateEventSrc_data_set(void * jarg1, void * jarg2) {
  pj::TsxStateEventSrc *arg1 = (pj::TsxStateEventSrc *) 0 ;
  pj::GenericData arg2 = (pj::GenericData) 0 ;
  
  arg1 = (pj::TsxStateEventSrc *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->data = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TsxStateEventSrc_data_get(void * jarg1) {
  void * jresult ;
  pj::TsxStateEventSrc *arg1 = (pj::TsxStateEventSrc *) 0 ;
  pj::GenericData result;
  
  arg1 = (pj::TsxStateEventSrc *)jarg1; 
  result = (pj::GenericData) ((arg1)->data);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TsxStateEventSrc() {
  void * jresult ;
  pj::TsxStateEventSrc *result = 0 ;
  
  result = (pj::TsxStateEventSrc *)new pj::TsxStateEventSrc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TsxStateEventSrc(void * jarg1) {
  pj::TsxStateEventSrc *arg1 = (pj::TsxStateEventSrc *) 0 ;
  
  arg1 = (pj::TsxStateEventSrc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TsxStateEvent_src_set(void * jarg1, void * jarg2) {
  pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) 0 ;
  pj::TsxStateEventSrc *arg2 = (pj::TsxStateEventSrc *) 0 ;
  
  arg1 = (pj::TsxStateEvent *)jarg1; 
  arg2 = (pj::TsxStateEventSrc *)jarg2; 
  if (arg1) (arg1)->src = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TsxStateEvent_src_get(void * jarg1) {
  void * jresult ;
  pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) 0 ;
  pj::TsxStateEventSrc *result = 0 ;
  
  arg1 = (pj::TsxStateEvent *)jarg1; 
  result = (pj::TsxStateEventSrc *)& ((arg1)->src);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TsxStateEvent_tsx_set(void * jarg1, void * jarg2) {
  pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) 0 ;
  pj::SipTransaction *arg2 = (pj::SipTransaction *) 0 ;
  
  arg1 = (pj::TsxStateEvent *)jarg1; 
  arg2 = (pj::SipTransaction *)jarg2; 
  if (arg1) (arg1)->tsx = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TsxStateEvent_tsx_get(void * jarg1) {
  void * jresult ;
  pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) 0 ;
  pj::SipTransaction *result = 0 ;
  
  arg1 = (pj::TsxStateEvent *)jarg1; 
  result = (pj::SipTransaction *)& ((arg1)->tsx);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TsxStateEvent_prevState_set(void * jarg1, int jarg2) {
  pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) 0 ;
  pjsip_tsx_state_e arg2 ;
  
  arg1 = (pj::TsxStateEvent *)jarg1; 
  arg2 = (pjsip_tsx_state_e)jarg2; 
  if (arg1) (arg1)->prevState = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TsxStateEvent_prevState_get(void * jarg1) {
  int jresult ;
  pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) 0 ;
  pjsip_tsx_state_e result;
  
  arg1 = (pj::TsxStateEvent *)jarg1; 
  result = (pjsip_tsx_state_e) ((arg1)->prevState);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TsxStateEvent_type_set(void * jarg1, int jarg2) {
  pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) 0 ;
  pjsip_event_id_e arg2 ;
  
  arg1 = (pj::TsxStateEvent *)jarg1; 
  arg2 = (pjsip_event_id_e)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TsxStateEvent_type_get(void * jarg1) {
  int jresult ;
  pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) 0 ;
  pjsip_event_id_e result;
  
  arg1 = (pj::TsxStateEvent *)jarg1; 
  result = (pjsip_event_id_e) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TsxStateEvent() {
  void * jresult ;
  pj::TsxStateEvent *result = 0 ;
  
  result = (pj::TsxStateEvent *)new pj::TsxStateEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TsxStateEvent(void * jarg1) {
  pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) 0 ;
  
  arg1 = (pj::TsxStateEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TxMsgEvent_tdata_set(void * jarg1, void * jarg2) {
  pj::TxMsgEvent *arg1 = (pj::TxMsgEvent *) 0 ;
  pj::SipTxData *arg2 = (pj::SipTxData *) 0 ;
  
  arg1 = (pj::TxMsgEvent *)jarg1; 
  arg2 = (pj::SipTxData *)jarg2; 
  if (arg1) (arg1)->tdata = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TxMsgEvent_tdata_get(void * jarg1) {
  void * jresult ;
  pj::TxMsgEvent *arg1 = (pj::TxMsgEvent *) 0 ;
  pj::SipTxData *result = 0 ;
  
  arg1 = (pj::TxMsgEvent *)jarg1; 
  result = (pj::SipTxData *)& ((arg1)->tdata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TxMsgEvent() {
  void * jresult ;
  pj::TxMsgEvent *result = 0 ;
  
  result = (pj::TxMsgEvent *)new pj::TxMsgEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TxMsgEvent(void * jarg1) {
  pj::TxMsgEvent *arg1 = (pj::TxMsgEvent *) 0 ;
  
  arg1 = (pj::TxMsgEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TxErrorEvent_tdata_set(void * jarg1, void * jarg2) {
  pj::TxErrorEvent *arg1 = (pj::TxErrorEvent *) 0 ;
  pj::SipTxData *arg2 = (pj::SipTxData *) 0 ;
  
  arg1 = (pj::TxErrorEvent *)jarg1; 
  arg2 = (pj::SipTxData *)jarg2; 
  if (arg1) (arg1)->tdata = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TxErrorEvent_tdata_get(void * jarg1) {
  void * jresult ;
  pj::TxErrorEvent *arg1 = (pj::TxErrorEvent *) 0 ;
  pj::SipTxData *result = 0 ;
  
  arg1 = (pj::TxErrorEvent *)jarg1; 
  result = (pj::SipTxData *)& ((arg1)->tdata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TxErrorEvent_tsx_set(void * jarg1, void * jarg2) {
  pj::TxErrorEvent *arg1 = (pj::TxErrorEvent *) 0 ;
  pj::SipTransaction *arg2 = (pj::SipTransaction *) 0 ;
  
  arg1 = (pj::TxErrorEvent *)jarg1; 
  arg2 = (pj::SipTransaction *)jarg2; 
  if (arg1) (arg1)->tsx = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TxErrorEvent_tsx_get(void * jarg1) {
  void * jresult ;
  pj::TxErrorEvent *arg1 = (pj::TxErrorEvent *) 0 ;
  pj::SipTransaction *result = 0 ;
  
  arg1 = (pj::TxErrorEvent *)jarg1; 
  result = (pj::SipTransaction *)& ((arg1)->tsx);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TxErrorEvent() {
  void * jresult ;
  pj::TxErrorEvent *result = 0 ;
  
  result = (pj::TxErrorEvent *)new pj::TxErrorEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TxErrorEvent(void * jarg1) {
  pj::TxErrorEvent *arg1 = (pj::TxErrorEvent *) 0 ;
  
  arg1 = (pj::TxErrorEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RxMsgEvent_rdata_set(void * jarg1, void * jarg2) {
  pj::RxMsgEvent *arg1 = (pj::RxMsgEvent *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  arg1 = (pj::RxMsgEvent *)jarg1; 
  arg2 = (pj::SipRxData *)jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RxMsgEvent_rdata_get(void * jarg1) {
  void * jresult ;
  pj::RxMsgEvent *arg1 = (pj::RxMsgEvent *) 0 ;
  pj::SipRxData *result = 0 ;
  
  arg1 = (pj::RxMsgEvent *)jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RxMsgEvent() {
  void * jresult ;
  pj::RxMsgEvent *result = 0 ;
  
  result = (pj::RxMsgEvent *)new pj::RxMsgEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RxMsgEvent(void * jarg1) {
  pj::RxMsgEvent *arg1 = (pj::RxMsgEvent *) 0 ;
  
  arg1 = (pj::RxMsgEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UserEvent_user1_set(void * jarg1, void * jarg2) {
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  pj::GenericData arg2 = (pj::GenericData) 0 ;
  
  arg1 = (pj::UserEvent *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->user1 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UserEvent_user1_get(void * jarg1) {
  void * jresult ;
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  pj::GenericData result;
  
  arg1 = (pj::UserEvent *)jarg1; 
  result = (pj::GenericData) ((arg1)->user1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UserEvent_user2_set(void * jarg1, void * jarg2) {
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  pj::GenericData arg2 = (pj::GenericData) 0 ;
  
  arg1 = (pj::UserEvent *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->user2 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UserEvent_user2_get(void * jarg1) {
  void * jresult ;
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  pj::GenericData result;
  
  arg1 = (pj::UserEvent *)jarg1; 
  result = (pj::GenericData) ((arg1)->user2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UserEvent_user3_set(void * jarg1, void * jarg2) {
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  pj::GenericData arg2 = (pj::GenericData) 0 ;
  
  arg1 = (pj::UserEvent *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->user3 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UserEvent_user3_get(void * jarg1) {
  void * jresult ;
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  pj::GenericData result;
  
  arg1 = (pj::UserEvent *)jarg1; 
  result = (pj::GenericData) ((arg1)->user3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UserEvent_user4_set(void * jarg1, void * jarg2) {
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  pj::GenericData arg2 = (pj::GenericData) 0 ;
  
  arg1 = (pj::UserEvent *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->user4 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UserEvent_user4_get(void * jarg1) {
  void * jresult ;
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  pj::GenericData result;
  
  arg1 = (pj::UserEvent *)jarg1; 
  result = (pj::GenericData) ((arg1)->user4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UserEvent() {
  void * jresult ;
  pj::UserEvent *result = 0 ;
  
  result = (pj::UserEvent *)new pj::UserEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UserEvent(void * jarg1) {
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  
  arg1 = (pj::UserEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipEventBody_timer_set(void * jarg1, void * jarg2) {
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::TimerEvent *arg2 = (pj::TimerEvent *) 0 ;
  
  arg1 = (pj::SipEventBody *)jarg1; 
  arg2 = (pj::TimerEvent *)jarg2; 
  if (arg1) (arg1)->timer = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SipEventBody_timer_get(void * jarg1) {
  void * jresult ;
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::TimerEvent *result = 0 ;
  
  arg1 = (pj::SipEventBody *)jarg1; 
  result = (pj::TimerEvent *)& ((arg1)->timer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipEventBody_tsxState_set(void * jarg1, void * jarg2) {
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::TsxStateEvent *arg2 = (pj::TsxStateEvent *) 0 ;
  
  arg1 = (pj::SipEventBody *)jarg1; 
  arg2 = (pj::TsxStateEvent *)jarg2; 
  if (arg1) (arg1)->tsxState = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SipEventBody_tsxState_get(void * jarg1) {
  void * jresult ;
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::TsxStateEvent *result = 0 ;
  
  arg1 = (pj::SipEventBody *)jarg1; 
  result = (pj::TsxStateEvent *)& ((arg1)->tsxState);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipEventBody_txMsg_set(void * jarg1, void * jarg2) {
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::TxMsgEvent *arg2 = (pj::TxMsgEvent *) 0 ;
  
  arg1 = (pj::SipEventBody *)jarg1; 
  arg2 = (pj::TxMsgEvent *)jarg2; 
  if (arg1) (arg1)->txMsg = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SipEventBody_txMsg_get(void * jarg1) {
  void * jresult ;
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::TxMsgEvent *result = 0 ;
  
  arg1 = (pj::SipEventBody *)jarg1; 
  result = (pj::TxMsgEvent *)& ((arg1)->txMsg);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipEventBody_txError_set(void * jarg1, void * jarg2) {
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::TxErrorEvent *arg2 = (pj::TxErrorEvent *) 0 ;
  
  arg1 = (pj::SipEventBody *)jarg1; 
  arg2 = (pj::TxErrorEvent *)jarg2; 
  if (arg1) (arg1)->txError = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SipEventBody_txError_get(void * jarg1) {
  void * jresult ;
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::TxErrorEvent *result = 0 ;
  
  arg1 = (pj::SipEventBody *)jarg1; 
  result = (pj::TxErrorEvent *)& ((arg1)->txError);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipEventBody_rxMsg_set(void * jarg1, void * jarg2) {
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::RxMsgEvent *arg2 = (pj::RxMsgEvent *) 0 ;
  
  arg1 = (pj::SipEventBody *)jarg1; 
  arg2 = (pj::RxMsgEvent *)jarg2; 
  if (arg1) (arg1)->rxMsg = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SipEventBody_rxMsg_get(void * jarg1) {
  void * jresult ;
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::RxMsgEvent *result = 0 ;
  
  arg1 = (pj::SipEventBody *)jarg1; 
  result = (pj::RxMsgEvent *)& ((arg1)->rxMsg);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipEventBody_user_set(void * jarg1, void * jarg2) {
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::UserEvent *arg2 = (pj::UserEvent *) 0 ;
  
  arg1 = (pj::SipEventBody *)jarg1; 
  arg2 = (pj::UserEvent *)jarg2; 
  if (arg1) (arg1)->user = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SipEventBody_user_get(void * jarg1) {
  void * jresult ;
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::UserEvent *result = 0 ;
  
  arg1 = (pj::SipEventBody *)jarg1; 
  result = (pj::UserEvent *)& ((arg1)->user);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SipEventBody() {
  void * jresult ;
  pj::SipEventBody *result = 0 ;
  
  result = (pj::SipEventBody *)new pj::SipEventBody();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SipEventBody(void * jarg1) {
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  
  arg1 = (pj::SipEventBody *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipEvent_type_set(void * jarg1, int jarg2) {
  pj::SipEvent *arg1 = (pj::SipEvent *) 0 ;
  pjsip_event_id_e arg2 ;
  
  arg1 = (pj::SipEvent *)jarg1; 
  arg2 = (pjsip_event_id_e)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SipEvent_type_get(void * jarg1) {
  int jresult ;
  pj::SipEvent *arg1 = (pj::SipEvent *) 0 ;
  pjsip_event_id_e result;
  
  arg1 = (pj::SipEvent *)jarg1; 
  result = (pjsip_event_id_e) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipEvent_body_set(void * jarg1, void * jarg2) {
  pj::SipEvent *arg1 = (pj::SipEvent *) 0 ;
  pj::SipEventBody *arg2 = (pj::SipEventBody *) 0 ;
  
  arg1 = (pj::SipEvent *)jarg1; 
  arg2 = (pj::SipEventBody *)jarg2; 
  if (arg1) (arg1)->body = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SipEvent_body_get(void * jarg1) {
  void * jresult ;
  pj::SipEvent *arg1 = (pj::SipEvent *) 0 ;
  pj::SipEventBody *result = 0 ;
  
  arg1 = (pj::SipEvent *)jarg1; 
  result = (pj::SipEventBody *)& ((arg1)->body);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipEvent_pjEvent_set(void * jarg1, void * jarg2) {
  pj::SipEvent *arg1 = (pj::SipEvent *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (pj::SipEvent *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->pjEvent = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SipEvent_pjEvent_get(void * jarg1) {
  void * jresult ;
  pj::SipEvent *arg1 = (pj::SipEvent *) 0 ;
  void *result = 0 ;
  
  arg1 = (pj::SipEvent *)jarg1; 
  result = (void *) ((arg1)->pjEvent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SipEvent() {
  void * jresult ;
  pj::SipEvent *result = 0 ;
  
  result = (pj::SipEvent *)new pj::SipEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SipEvent(void * jarg1) {
  pj::SipEvent *arg1 = (pj::SipEvent *) 0 ;
  
  arg1 = (pj::SipEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipMediaType_type_set(void * jarg1, const char * jarg2) {
  pj::SipMediaType *arg1 = (pj::SipMediaType *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SipMediaType *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->type = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SipMediaType_type_get(void * jarg1) {
  const char * jresult ;
  pj::SipMediaType *arg1 = (pj::SipMediaType *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SipMediaType *)jarg1; 
  result = (pj::string *) & ((arg1)->type);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipMediaType_subType_set(void * jarg1, const char * jarg2) {
  pj::SipMediaType *arg1 = (pj::SipMediaType *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SipMediaType *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->subType = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SipMediaType_subType_get(void * jarg1) {
  const char * jresult ;
  pj::SipMediaType *arg1 = (pj::SipMediaType *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SipMediaType *)jarg1; 
  result = (pj::string *) & ((arg1)->subType);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SipMediaType() {
  void * jresult ;
  pj::SipMediaType *result = 0 ;
  
  result = (pj::SipMediaType *)new pj::SipMediaType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SipMediaType(void * jarg1) {
  pj::SipMediaType *arg1 = (pj::SipMediaType *) 0 ;
  
  arg1 = (pj::SipMediaType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipHeader_hName_set(void * jarg1, const char * jarg2) {
  pj::SipHeader *arg1 = (pj::SipHeader *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SipHeader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->hName = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SipHeader_hName_get(void * jarg1) {
  const char * jresult ;
  pj::SipHeader *arg1 = (pj::SipHeader *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SipHeader *)jarg1; 
  result = (pj::string *) & ((arg1)->hName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipHeader_hValue_set(void * jarg1, const char * jarg2) {
  pj::SipHeader *arg1 = (pj::SipHeader *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SipHeader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->hValue = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SipHeader_hValue_get(void * jarg1) {
  const char * jresult ;
  pj::SipHeader *arg1 = (pj::SipHeader *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SipHeader *)jarg1; 
  result = (pj::string *) & ((arg1)->hValue);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SipHeader() {
  void * jresult ;
  pj::SipHeader *result = 0 ;
  
  result = (pj::SipHeader *)new pj::SipHeader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SipHeader(void * jarg1) {
  pj::SipHeader *arg1 = (pj::SipHeader *) 0 ;
  
  arg1 = (pj::SipHeader *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipMultipartPart_headers_set(void * jarg1, void * jarg2) {
  pj::SipMultipartPart *arg1 = (pj::SipMultipartPart *) 0 ;
  pj::SipHeaderVector *arg2 = (pj::SipHeaderVector *) 0 ;
  
  arg1 = (pj::SipMultipartPart *)jarg1; 
  arg2 = (pj::SipHeaderVector *)jarg2; 
  if (arg1) (arg1)->headers = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SipMultipartPart_headers_get(void * jarg1) {
  void * jresult ;
  pj::SipMultipartPart *arg1 = (pj::SipMultipartPart *) 0 ;
  pj::SipHeaderVector *result = 0 ;
  
  arg1 = (pj::SipMultipartPart *)jarg1; 
  result = (pj::SipHeaderVector *)& ((arg1)->headers);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipMultipartPart_contentType_set(void * jarg1, void * jarg2) {
  pj::SipMultipartPart *arg1 = (pj::SipMultipartPart *) 0 ;
  pj::SipMediaType *arg2 = (pj::SipMediaType *) 0 ;
  
  arg1 = (pj::SipMultipartPart *)jarg1; 
  arg2 = (pj::SipMediaType *)jarg2; 
  if (arg1) (arg1)->contentType = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SipMultipartPart_contentType_get(void * jarg1) {
  void * jresult ;
  pj::SipMultipartPart *arg1 = (pj::SipMultipartPart *) 0 ;
  pj::SipMediaType *result = 0 ;
  
  arg1 = (pj::SipMultipartPart *)jarg1; 
  result = (pj::SipMediaType *)& ((arg1)->contentType);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipMultipartPart_body_set(void * jarg1, const char * jarg2) {
  pj::SipMultipartPart *arg1 = (pj::SipMultipartPart *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SipMultipartPart *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->body = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SipMultipartPart_body_get(void * jarg1) {
  const char * jresult ;
  pj::SipMultipartPart *arg1 = (pj::SipMultipartPart *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SipMultipartPart *)jarg1; 
  result = (pj::string *) & ((arg1)->body);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SipMultipartPart() {
  void * jresult ;
  pj::SipMultipartPart *result = 0 ;
  
  result = (pj::SipMultipartPart *)new pj::SipMultipartPart();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SipMultipartPart(void * jarg1) {
  pj::SipMultipartPart *arg1 = (pj::SipMultipartPart *) 0 ;
  
  arg1 = (pj::SipMultipartPart *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipTxOption_targetUri_set(void * jarg1, const char * jarg2) {
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SipTxOption *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->targetUri = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SipTxOption_targetUri_get(void * jarg1) {
  const char * jresult ;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SipTxOption *)jarg1; 
  result = (pj::string *) & ((arg1)->targetUri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipTxOption_localUri_set(void * jarg1, const char * jarg2) {
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SipTxOption *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->localUri = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SipTxOption_localUri_get(void * jarg1) {
  const char * jresult ;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SipTxOption *)jarg1; 
  result = (pj::string *) & ((arg1)->localUri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipTxOption_headers_set(void * jarg1, void * jarg2) {
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::SipHeaderVector *arg2 = (pj::SipHeaderVector *) 0 ;
  
  arg1 = (pj::SipTxOption *)jarg1; 
  arg2 = (pj::SipHeaderVector *)jarg2; 
  if (arg1) (arg1)->headers = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SipTxOption_headers_get(void * jarg1) {
  void * jresult ;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::SipHeaderVector *result = 0 ;
  
  arg1 = (pj::SipTxOption *)jarg1; 
  result = (pj::SipHeaderVector *)& ((arg1)->headers);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipTxOption_contentType_set(void * jarg1, const char * jarg2) {
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SipTxOption *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->contentType = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SipTxOption_contentType_get(void * jarg1) {
  const char * jresult ;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SipTxOption *)jarg1; 
  result = (pj::string *) & ((arg1)->contentType);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipTxOption_msgBody_set(void * jarg1, const char * jarg2) {
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SipTxOption *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->msgBody = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SipTxOption_msgBody_get(void * jarg1) {
  const char * jresult ;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SipTxOption *)jarg1; 
  result = (pj::string *) & ((arg1)->msgBody);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipTxOption_multipartContentType_set(void * jarg1, void * jarg2) {
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::SipMediaType *arg2 = (pj::SipMediaType *) 0 ;
  
  arg1 = (pj::SipTxOption *)jarg1; 
  arg2 = (pj::SipMediaType *)jarg2; 
  if (arg1) (arg1)->multipartContentType = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SipTxOption_multipartContentType_get(void * jarg1) {
  void * jresult ;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::SipMediaType *result = 0 ;
  
  arg1 = (pj::SipTxOption *)jarg1; 
  result = (pj::SipMediaType *)& ((arg1)->multipartContentType);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipTxOption_multipartParts_set(void * jarg1, void * jarg2) {
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::SipMultipartPartVector *arg2 = (pj::SipMultipartPartVector *) 0 ;
  
  arg1 = (pj::SipTxOption *)jarg1; 
  arg2 = (pj::SipMultipartPartVector *)jarg2; 
  if (arg1) (arg1)->multipartParts = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SipTxOption_multipartParts_get(void * jarg1) {
  void * jresult ;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::SipMultipartPartVector *result = 0 ;
  
  arg1 = (pj::SipTxOption *)jarg1; 
  result = (pj::SipMultipartPartVector *)& ((arg1)->multipartParts);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipTxOption_isEmpty(void * jarg1) {
  unsigned int jresult ;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  bool result;
  
  arg1 = (pj::SipTxOption *)jarg1; 
  result = (bool)((pj::SipTxOption const *)arg1)->isEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SipTxOption() {
  void * jresult ;
  pj::SipTxOption *result = 0 ;
  
  result = (pj::SipTxOption *)new pj::SipTxOption();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SipTxOption(void * jarg1) {
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  
  arg1 = (pj::SipTxOption *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SendInstantMessageParam_contentType_set(void * jarg1, const char * jarg2) {
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SendInstantMessageParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->contentType = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SendInstantMessageParam_contentType_get(void * jarg1) {
  const char * jresult ;
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SendInstantMessageParam *)jarg1; 
  result = (pj::string *) & ((arg1)->contentType);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SendInstantMessageParam_content_set(void * jarg1, const char * jarg2) {
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SendInstantMessageParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->content = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SendInstantMessageParam_content_get(void * jarg1) {
  const char * jresult ;
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SendInstantMessageParam *)jarg1; 
  result = (pj::string *) & ((arg1)->content);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SendInstantMessageParam_txOption_set(void * jarg1, void * jarg2) {
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  pj::SipTxOption *arg2 = (pj::SipTxOption *) 0 ;
  
  arg1 = (pj::SendInstantMessageParam *)jarg1; 
  arg2 = (pj::SipTxOption *)jarg2; 
  if (arg1) (arg1)->txOption = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SendInstantMessageParam_txOption_get(void * jarg1) {
  void * jresult ;
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  pj::SipTxOption *result = 0 ;
  
  arg1 = (pj::SendInstantMessageParam *)jarg1; 
  result = (pj::SipTxOption *)& ((arg1)->txOption);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SendInstantMessageParam_userData_set(void * jarg1, void * jarg2) {
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  pj::Token arg2 = (pj::Token) 0 ;
  
  arg1 = (pj::SendInstantMessageParam *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->userData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SendInstantMessageParam_userData_get(void * jarg1) {
  void * jresult ;
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  pj::Token result;
  
  arg1 = (pj::SendInstantMessageParam *)jarg1; 
  result = (pj::Token) ((arg1)->userData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SendInstantMessageParam() {
  void * jresult ;
  pj::SendInstantMessageParam *result = 0 ;
  
  result = (pj::SendInstantMessageParam *)new pj::SendInstantMessageParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SendInstantMessageParam(void * jarg1) {
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  
  arg1 = (pj::SendInstantMessageParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SendTypingIndicationParam_isTyping_set(void * jarg1, unsigned int jarg2) {
  pj::SendTypingIndicationParam *arg1 = (pj::SendTypingIndicationParam *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::SendTypingIndicationParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isTyping = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SendTypingIndicationParam_isTyping_get(void * jarg1) {
  unsigned int jresult ;
  pj::SendTypingIndicationParam *arg1 = (pj::SendTypingIndicationParam *) 0 ;
  bool result;
  
  arg1 = (pj::SendTypingIndicationParam *)jarg1; 
  result = (bool) ((arg1)->isTyping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SendTypingIndicationParam_txOption_set(void * jarg1, void * jarg2) {
  pj::SendTypingIndicationParam *arg1 = (pj::SendTypingIndicationParam *) 0 ;
  pj::SipTxOption *arg2 = (pj::SipTxOption *) 0 ;
  
  arg1 = (pj::SendTypingIndicationParam *)jarg1; 
  arg2 = (pj::SipTxOption *)jarg2; 
  if (arg1) (arg1)->txOption = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SendTypingIndicationParam_txOption_get(void * jarg1) {
  void * jresult ;
  pj::SendTypingIndicationParam *arg1 = (pj::SendTypingIndicationParam *) 0 ;
  pj::SipTxOption *result = 0 ;
  
  arg1 = (pj::SendTypingIndicationParam *)jarg1; 
  result = (pj::SipTxOption *)& ((arg1)->txOption);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SendTypingIndicationParam() {
  void * jresult ;
  pj::SendTypingIndicationParam *result = 0 ;
  
  result = (pj::SendTypingIndicationParam *)new pj::SendTypingIndicationParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SendTypingIndicationParam(void * jarg1) {
  pj::SendTypingIndicationParam *arg1 = (pj::SendTypingIndicationParam *) 0 ;
  
  arg1 = (pj::SendTypingIndicationParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SockOptVector__SWIG_0() {
  void * jresult ;
  std::vector< pj::SockOpt > *result = 0 ;
  
  result = (std::vector< pj::SockOpt > *)new std::vector< pj::SockOpt >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SockOptVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< pj::SockOpt > *arg1 = 0 ;
  std::vector< pj::SockOpt > *result = 0 ;
  
  arg1 = (std::vector< pj::SockOpt > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::SockOpt > const & is null", 0);
    return 0;
  } 
  result = (std::vector< pj::SockOpt > *)new std::vector< pj::SockOpt >((std::vector< pj::SockOpt > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SockOptVector_Clear(void * jarg1) {
  std::vector< pj::SockOpt > *arg1 = (std::vector< pj::SockOpt > *) 0 ;
  
  arg1 = (std::vector< pj::SockOpt > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SockOptVector_Add(void * jarg1, void * jarg2) {
  std::vector< pj::SockOpt > *arg1 = (std::vector< pj::SockOpt > *) 0 ;
  pj::SockOpt *arg2 = 0 ;
  
  arg1 = (std::vector< pj::SockOpt > *)jarg1; 
  arg2 = (pj::SockOpt *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SockOpt const & is null", 0);
    return ;
  } 
  (arg1)->push_back((pj::SockOpt const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SockOptVector_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::SockOpt > *arg1 = (std::vector< pj::SockOpt > *) 0 ;
  std::vector< pj::SockOpt >::size_type result;
  
  arg1 = (std::vector< pj::SockOpt > *)jarg1; 
  result = ((std::vector< pj::SockOpt > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SockOptVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::SockOpt > *arg1 = (std::vector< pj::SockOpt > *) 0 ;
  bool result;
  
  arg1 = (std::vector< pj::SockOpt > *)jarg1; 
  result = (bool)((std::vector< pj::SockOpt > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SockOptVector_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::SockOpt > *arg1 = (std::vector< pj::SockOpt > *) 0 ;
  std::vector< pj::SockOpt >::size_type result;
  
  arg1 = (std::vector< pj::SockOpt > *)jarg1; 
  result = ((std::vector< pj::SockOpt > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SockOptVector_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< pj::SockOpt > *arg1 = (std::vector< pj::SockOpt > *) 0 ;
  std::vector< pj::SockOpt >::size_type arg2 ;
  
  arg1 = (std::vector< pj::SockOpt > *)jarg1; 
  arg2 = (std::vector< pj::SockOpt >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SockOptVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::SockOpt > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::SockOpt > *)new_std_vector_Sl_pj_SockOpt_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SockOptVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::SockOpt > *arg1 = (std::vector< pj::SockOpt > *) 0 ;
  int arg2 ;
  pj::SockOpt result;
  
  arg1 = (std::vector< pj::SockOpt > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_pj_SockOpt_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new pj::SockOpt(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SockOptVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::SockOpt > *arg1 = (std::vector< pj::SockOpt > *) 0 ;
  int arg2 ;
  std::vector< pj::SockOpt >::value_type *result = 0 ;
  
  arg1 = (std::vector< pj::SockOpt > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::SockOpt >::value_type *) &std_vector_Sl_pj_SockOpt_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SockOptVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::SockOpt > *arg1 = (std::vector< pj::SockOpt > *) 0 ;
  int arg2 ;
  pj::SockOpt *arg3 = 0 ;
  
  arg1 = (std::vector< pj::SockOpt > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::SockOpt *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SockOpt const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_SockOpt_Sg__setitem(arg1,arg2,(pj::SockOpt const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SockOptVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< pj::SockOpt > *arg1 = (std::vector< pj::SockOpt > *) 0 ;
  std::vector< pj::SockOpt > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::SockOpt > *)jarg1; 
  arg2 = (std::vector< pj::SockOpt > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::SockOpt > const & is null", 0);
    return ;
  } 
  std_vector_Sl_pj_SockOpt_Sg__AddRange(arg1,(std::vector< pj::SockOpt > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SockOptVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::SockOpt > *arg1 = (std::vector< pj::SockOpt > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::SockOpt > *result = 0 ;
  
  arg1 = (std::vector< pj::SockOpt > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::SockOpt > *)std_vector_Sl_pj_SockOpt_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SockOptVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::SockOpt > *arg1 = (std::vector< pj::SockOpt > *) 0 ;
  int arg2 ;
  pj::SockOpt *arg3 = 0 ;
  
  arg1 = (std::vector< pj::SockOpt > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::SockOpt *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SockOpt const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_SockOpt_Sg__Insert(arg1,arg2,(pj::SockOpt const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SockOptVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::SockOpt > *arg1 = (std::vector< pj::SockOpt > *) 0 ;
  int arg2 ;
  std::vector< pj::SockOpt > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::SockOpt > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::SockOpt > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::SockOpt > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_SockOpt_Sg__InsertRange(arg1,arg2,(std::vector< pj::SockOpt > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SockOptVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< pj::SockOpt > *arg1 = (std::vector< pj::SockOpt > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::SockOpt > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_SockOpt_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SockOptVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::SockOpt > *arg1 = (std::vector< pj::SockOpt > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::SockOpt > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_SockOpt_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SockOptVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  pj::SockOpt *arg1 = 0 ;
  int arg2 ;
  std::vector< pj::SockOpt > *result = 0 ;
  
  arg1 = (pj::SockOpt *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SockOpt const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::SockOpt > *)std_vector_Sl_pj_SockOpt_Sg__Repeat((pj::SockOpt const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SockOptVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< pj::SockOpt > *arg1 = (std::vector< pj::SockOpt > *) 0 ;
  
  arg1 = (std::vector< pj::SockOpt > *)jarg1; 
  std_vector_Sl_pj_SockOpt_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SockOptVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::SockOpt > *arg1 = (std::vector< pj::SockOpt > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::SockOpt > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_SockOpt_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SockOptVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::SockOpt > *arg1 = (std::vector< pj::SockOpt > *) 0 ;
  int arg2 ;
  std::vector< pj::SockOpt > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::SockOpt > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::SockOpt > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::SockOpt > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_SockOpt_Sg__SetRange(arg1,arg2,(std::vector< pj::SockOpt > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SockOptVector(void * jarg1) {
  std::vector< pj::SockOpt > *arg1 = (std::vector< pj::SockOpt > *) 0 ;
  
  arg1 = (std::vector< pj::SockOpt > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SipHeaderVector__SWIG_0() {
  void * jresult ;
  std::vector< pj::SipHeader > *result = 0 ;
  
  result = (std::vector< pj::SipHeader > *)new std::vector< pj::SipHeader >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SipHeaderVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< pj::SipHeader > *arg1 = 0 ;
  std::vector< pj::SipHeader > *result = 0 ;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::SipHeader > const & is null", 0);
    return 0;
  } 
  result = (std::vector< pj::SipHeader > *)new std::vector< pj::SipHeader >((std::vector< pj::SipHeader > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipHeaderVector_Clear(void * jarg1) {
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipHeaderVector_Add(void * jarg1, void * jarg2) {
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  pj::SipHeader *arg2 = 0 ;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  arg2 = (pj::SipHeader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SipHeader const & is null", 0);
    return ;
  } 
  (arg1)->push_back((pj::SipHeader const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipHeaderVector_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  std::vector< pj::SipHeader >::size_type result;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  result = ((std::vector< pj::SipHeader > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipHeaderVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  bool result;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  result = (bool)((std::vector< pj::SipHeader > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipHeaderVector_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  std::vector< pj::SipHeader >::size_type result;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  result = ((std::vector< pj::SipHeader > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipHeaderVector_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  std::vector< pj::SipHeader >::size_type arg2 ;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  arg2 = (std::vector< pj::SipHeader >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SipHeaderVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::SipHeader > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::SipHeader > *)new_std_vector_Sl_pj_SipHeader_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SipHeaderVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  int arg2 ;
  pj::SipHeader result;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_pj_SipHeader_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new pj::SipHeader(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SipHeaderVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  int arg2 ;
  std::vector< pj::SipHeader >::value_type *result = 0 ;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::SipHeader >::value_type *) &std_vector_Sl_pj_SipHeader_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipHeaderVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  int arg2 ;
  pj::SipHeader *arg3 = 0 ;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::SipHeader *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SipHeader const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_SipHeader_Sg__setitem(arg1,arg2,(pj::SipHeader const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipHeaderVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  std::vector< pj::SipHeader > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  arg2 = (std::vector< pj::SipHeader > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::SipHeader > const & is null", 0);
    return ;
  } 
  std_vector_Sl_pj_SipHeader_Sg__AddRange(arg1,(std::vector< pj::SipHeader > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SipHeaderVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::SipHeader > *result = 0 ;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::SipHeader > *)std_vector_Sl_pj_SipHeader_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipHeaderVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  int arg2 ;
  pj::SipHeader *arg3 = 0 ;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::SipHeader *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SipHeader const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_SipHeader_Sg__Insert(arg1,arg2,(pj::SipHeader const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipHeaderVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  int arg2 ;
  std::vector< pj::SipHeader > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::SipHeader > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::SipHeader > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_SipHeader_Sg__InsertRange(arg1,arg2,(std::vector< pj::SipHeader > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipHeaderVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_SipHeader_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipHeaderVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_SipHeader_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SipHeaderVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  pj::SipHeader *arg1 = 0 ;
  int arg2 ;
  std::vector< pj::SipHeader > *result = 0 ;
  
  arg1 = (pj::SipHeader *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SipHeader const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::SipHeader > *)std_vector_Sl_pj_SipHeader_Sg__Repeat((pj::SipHeader const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipHeaderVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  std_vector_Sl_pj_SipHeader_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipHeaderVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_SipHeader_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipHeaderVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  int arg2 ;
  std::vector< pj::SipHeader > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::SipHeader > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::SipHeader > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_SipHeader_Sg__SetRange(arg1,arg2,(std::vector< pj::SipHeader > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SipHeaderVector(void * jarg1) {
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AuthCredInfoVector__SWIG_0() {
  void * jresult ;
  std::vector< pj::AuthCredInfo > *result = 0 ;
  
  result = (std::vector< pj::AuthCredInfo > *)new std::vector< pj::AuthCredInfo >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AuthCredInfoVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< pj::AuthCredInfo > *arg1 = 0 ;
  std::vector< pj::AuthCredInfo > *result = 0 ;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::AuthCredInfo > const & is null", 0);
    return 0;
  } 
  result = (std::vector< pj::AuthCredInfo > *)new std::vector< pj::AuthCredInfo >((std::vector< pj::AuthCredInfo > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AuthCredInfoVector_Clear(void * jarg1) {
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AuthCredInfoVector_Add(void * jarg1, void * jarg2) {
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  pj::AuthCredInfo *arg2 = 0 ;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  arg2 = (pj::AuthCredInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AuthCredInfo const & is null", 0);
    return ;
  } 
  (arg1)->push_back((pj::AuthCredInfo const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AuthCredInfoVector_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  std::vector< pj::AuthCredInfo >::size_type result;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  result = ((std::vector< pj::AuthCredInfo > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AuthCredInfoVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  bool result;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  result = (bool)((std::vector< pj::AuthCredInfo > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AuthCredInfoVector_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  std::vector< pj::AuthCredInfo >::size_type result;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  result = ((std::vector< pj::AuthCredInfo > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AuthCredInfoVector_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  std::vector< pj::AuthCredInfo >::size_type arg2 ;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  arg2 = (std::vector< pj::AuthCredInfo >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AuthCredInfoVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::AuthCredInfo > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::AuthCredInfo > *)new_std_vector_Sl_pj_AuthCredInfo_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AuthCredInfoVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  int arg2 ;
  pj::AuthCredInfo result;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_pj_AuthCredInfo_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new pj::AuthCredInfo(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AuthCredInfoVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  int arg2 ;
  std::vector< pj::AuthCredInfo >::value_type *result = 0 ;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::AuthCredInfo >::value_type *) &std_vector_Sl_pj_AuthCredInfo_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AuthCredInfoVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  int arg2 ;
  pj::AuthCredInfo *arg3 = 0 ;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::AuthCredInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AuthCredInfo const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_AuthCredInfo_Sg__setitem(arg1,arg2,(pj::AuthCredInfo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AuthCredInfoVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  std::vector< pj::AuthCredInfo > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  arg2 = (std::vector< pj::AuthCredInfo > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::AuthCredInfo > const & is null", 0);
    return ;
  } 
  std_vector_Sl_pj_AuthCredInfo_Sg__AddRange(arg1,(std::vector< pj::AuthCredInfo > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AuthCredInfoVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::AuthCredInfo > *result = 0 ;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::AuthCredInfo > *)std_vector_Sl_pj_AuthCredInfo_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AuthCredInfoVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  int arg2 ;
  pj::AuthCredInfo *arg3 = 0 ;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::AuthCredInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AuthCredInfo const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_AuthCredInfo_Sg__Insert(arg1,arg2,(pj::AuthCredInfo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AuthCredInfoVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  int arg2 ;
  std::vector< pj::AuthCredInfo > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::AuthCredInfo > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::AuthCredInfo > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_AuthCredInfo_Sg__InsertRange(arg1,arg2,(std::vector< pj::AuthCredInfo > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AuthCredInfoVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_AuthCredInfo_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AuthCredInfoVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_AuthCredInfo_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AuthCredInfoVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  pj::AuthCredInfo *arg1 = 0 ;
  int arg2 ;
  std::vector< pj::AuthCredInfo > *result = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AuthCredInfo const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::AuthCredInfo > *)std_vector_Sl_pj_AuthCredInfo_Sg__Repeat((pj::AuthCredInfo const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AuthCredInfoVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  std_vector_Sl_pj_AuthCredInfo_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AuthCredInfoVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_AuthCredInfo_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AuthCredInfoVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  int arg2 ;
  std::vector< pj::AuthCredInfo > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::AuthCredInfo > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::AuthCredInfo > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_AuthCredInfo_Sg__SetRange(arg1,arg2,(std::vector< pj::AuthCredInfo > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AuthCredInfoVector(void * jarg1) {
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SrtpCryptoVector__SWIG_0() {
  void * jresult ;
  std::vector< pj::SrtpCrypto > *result = 0 ;
  
  result = (std::vector< pj::SrtpCrypto > *)new std::vector< pj::SrtpCrypto >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SrtpCryptoVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< pj::SrtpCrypto > *arg1 = 0 ;
  std::vector< pj::SrtpCrypto > *result = 0 ;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::SrtpCrypto > const & is null", 0);
    return 0;
  } 
  result = (std::vector< pj::SrtpCrypto > *)new std::vector< pj::SrtpCrypto >((std::vector< pj::SrtpCrypto > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SrtpCryptoVector_Clear(void * jarg1) {
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SrtpCryptoVector_Add(void * jarg1, void * jarg2) {
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  pj::SrtpCrypto *arg2 = 0 ;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  arg2 = (pj::SrtpCrypto *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SrtpCrypto const & is null", 0);
    return ;
  } 
  (arg1)->push_back((pj::SrtpCrypto const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SrtpCryptoVector_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  std::vector< pj::SrtpCrypto >::size_type result;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  result = ((std::vector< pj::SrtpCrypto > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SrtpCryptoVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  bool result;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  result = (bool)((std::vector< pj::SrtpCrypto > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SrtpCryptoVector_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  std::vector< pj::SrtpCrypto >::size_type result;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  result = ((std::vector< pj::SrtpCrypto > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SrtpCryptoVector_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  std::vector< pj::SrtpCrypto >::size_type arg2 ;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  arg2 = (std::vector< pj::SrtpCrypto >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SrtpCryptoVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::SrtpCrypto > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::SrtpCrypto > *)new_std_vector_Sl_pj_SrtpCrypto_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SrtpCryptoVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  int arg2 ;
  pj::SrtpCrypto result;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_pj_SrtpCrypto_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new pj::SrtpCrypto(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SrtpCryptoVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  int arg2 ;
  std::vector< pj::SrtpCrypto >::value_type *result = 0 ;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::SrtpCrypto >::value_type *) &std_vector_Sl_pj_SrtpCrypto_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SrtpCryptoVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  int arg2 ;
  pj::SrtpCrypto *arg3 = 0 ;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::SrtpCrypto *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SrtpCrypto const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_SrtpCrypto_Sg__setitem(arg1,arg2,(pj::SrtpCrypto const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SrtpCryptoVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  std::vector< pj::SrtpCrypto > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  arg2 = (std::vector< pj::SrtpCrypto > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::SrtpCrypto > const & is null", 0);
    return ;
  } 
  std_vector_Sl_pj_SrtpCrypto_Sg__AddRange(arg1,(std::vector< pj::SrtpCrypto > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SrtpCryptoVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::SrtpCrypto > *result = 0 ;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::SrtpCrypto > *)std_vector_Sl_pj_SrtpCrypto_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SrtpCryptoVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  int arg2 ;
  pj::SrtpCrypto *arg3 = 0 ;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::SrtpCrypto *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SrtpCrypto const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_SrtpCrypto_Sg__Insert(arg1,arg2,(pj::SrtpCrypto const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SrtpCryptoVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  int arg2 ;
  std::vector< pj::SrtpCrypto > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::SrtpCrypto > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::SrtpCrypto > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_SrtpCrypto_Sg__InsertRange(arg1,arg2,(std::vector< pj::SrtpCrypto > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SrtpCryptoVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_SrtpCrypto_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SrtpCryptoVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_SrtpCrypto_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SrtpCryptoVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  pj::SrtpCrypto *arg1 = 0 ;
  int arg2 ;
  std::vector< pj::SrtpCrypto > *result = 0 ;
  
  arg1 = (pj::SrtpCrypto *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SrtpCrypto const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::SrtpCrypto > *)std_vector_Sl_pj_SrtpCrypto_Sg__Repeat((pj::SrtpCrypto const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SrtpCryptoVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  std_vector_Sl_pj_SrtpCrypto_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SrtpCryptoVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_SrtpCrypto_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SrtpCryptoVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  int arg2 ;
  std::vector< pj::SrtpCrypto > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::SrtpCrypto > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::SrtpCrypto > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_SrtpCrypto_Sg__SetRange(arg1,arg2,(std::vector< pj::SrtpCrypto > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SrtpCryptoVector(void * jarg1) {
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SipMultipartPartVector__SWIG_0() {
  void * jresult ;
  std::vector< pj::SipMultipartPart > *result = 0 ;
  
  result = (std::vector< pj::SipMultipartPart > *)new std::vector< pj::SipMultipartPart >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SipMultipartPartVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< pj::SipMultipartPart > *arg1 = 0 ;
  std::vector< pj::SipMultipartPart > *result = 0 ;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::SipMultipartPart > const & is null", 0);
    return 0;
  } 
  result = (std::vector< pj::SipMultipartPart > *)new std::vector< pj::SipMultipartPart >((std::vector< pj::SipMultipartPart > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipMultipartPartVector_Clear(void * jarg1) {
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipMultipartPartVector_Add(void * jarg1, void * jarg2) {
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  pj::SipMultipartPart *arg2 = 0 ;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  arg2 = (pj::SipMultipartPart *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SipMultipartPart const & is null", 0);
    return ;
  } 
  (arg1)->push_back((pj::SipMultipartPart const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipMultipartPartVector_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  std::vector< pj::SipMultipartPart >::size_type result;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  result = ((std::vector< pj::SipMultipartPart > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipMultipartPartVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  bool result;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  result = (bool)((std::vector< pj::SipMultipartPart > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipMultipartPartVector_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  std::vector< pj::SipMultipartPart >::size_type result;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  result = ((std::vector< pj::SipMultipartPart > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipMultipartPartVector_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  std::vector< pj::SipMultipartPart >::size_type arg2 ;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  arg2 = (std::vector< pj::SipMultipartPart >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SipMultipartPartVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::SipMultipartPart > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::SipMultipartPart > *)new_std_vector_Sl_pj_SipMultipartPart_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SipMultipartPartVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  int arg2 ;
  pj::SipMultipartPart result;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_pj_SipMultipartPart_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new pj::SipMultipartPart(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SipMultipartPartVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  int arg2 ;
  std::vector< pj::SipMultipartPart >::value_type *result = 0 ;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::SipMultipartPart >::value_type *) &std_vector_Sl_pj_SipMultipartPart_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipMultipartPartVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  int arg2 ;
  pj::SipMultipartPart *arg3 = 0 ;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::SipMultipartPart *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SipMultipartPart const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_SipMultipartPart_Sg__setitem(arg1,arg2,(pj::SipMultipartPart const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipMultipartPartVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  std::vector< pj::SipMultipartPart > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  arg2 = (std::vector< pj::SipMultipartPart > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::SipMultipartPart > const & is null", 0);
    return ;
  } 
  std_vector_Sl_pj_SipMultipartPart_Sg__AddRange(arg1,(std::vector< pj::SipMultipartPart > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SipMultipartPartVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::SipMultipartPart > *result = 0 ;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::SipMultipartPart > *)std_vector_Sl_pj_SipMultipartPart_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipMultipartPartVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  int arg2 ;
  pj::SipMultipartPart *arg3 = 0 ;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::SipMultipartPart *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SipMultipartPart const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_SipMultipartPart_Sg__Insert(arg1,arg2,(pj::SipMultipartPart const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipMultipartPartVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  int arg2 ;
  std::vector< pj::SipMultipartPart > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::SipMultipartPart > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::SipMultipartPart > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_SipMultipartPart_Sg__InsertRange(arg1,arg2,(std::vector< pj::SipMultipartPart > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipMultipartPartVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_SipMultipartPart_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipMultipartPartVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_SipMultipartPart_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SipMultipartPartVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  pj::SipMultipartPart *arg1 = 0 ;
  int arg2 ;
  std::vector< pj::SipMultipartPart > *result = 0 ;
  
  arg1 = (pj::SipMultipartPart *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SipMultipartPart const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::SipMultipartPart > *)std_vector_Sl_pj_SipMultipartPart_Sg__Repeat((pj::SipMultipartPart const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipMultipartPartVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  std_vector_Sl_pj_SipMultipartPart_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipMultipartPartVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_SipMultipartPart_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipMultipartPartVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  int arg2 ;
  std::vector< pj::SipMultipartPart > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::SipMultipartPart > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::SipMultipartPart > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_SipMultipartPart_Sg__SetRange(arg1,arg2,(std::vector< pj::SipMultipartPart > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SipMultipartPartVector(void * jarg1) {
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BuddyVector__SWIG_0() {
  void * jresult ;
  std::vector< pj::Buddy * > *result = 0 ;
  
  result = (std::vector< pj::Buddy * > *)new std::vector< pj::Buddy * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BuddyVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< pj::Buddy * > *arg1 = 0 ;
  std::vector< pj::Buddy * > *result = 0 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::Buddy * > const & is null", 0);
    return 0;
  } 
  result = (std::vector< pj::Buddy * > *)new std::vector< pj::Buddy * >((std::vector< pj::Buddy * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyVector_Clear(void * jarg1) {
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyVector_Add(void * jarg1, void * jarg2) {
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  pj::Buddy **arg2 = 0 ;
  pj::Buddy *temp2 = 0 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  temp2 = (pj::Buddy *)jarg2;
  arg2 = (pj::Buddy **)&temp2; 
  (arg1)->push_back((pj::Buddy *const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BuddyVector_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  std::vector< pj::Buddy * >::size_type result;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  result = ((std::vector< pj::Buddy * > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BuddyVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  bool result;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  result = (bool)((std::vector< pj::Buddy * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BuddyVector_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  std::vector< pj::Buddy * >::size_type result;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  result = ((std::vector< pj::Buddy * > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyVector_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  std::vector< pj::Buddy * >::size_type arg2 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  arg2 = (std::vector< pj::Buddy * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BuddyVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::Buddy * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::Buddy * > *)new_std_vector_Sl_pj_Buddy_Sm__Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BuddyVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  int arg2 ;
  pj::Buddy *result = 0 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (pj::Buddy *)std_vector_Sl_pj_Buddy_Sm__Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BuddyVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  int arg2 ;
  std::vector< pj::Buddy * >::value_type *result = 0 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::Buddy * >::value_type *) &std_vector_Sl_pj_Buddy_Sm__Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  int arg2 ;
  pj::Buddy **arg3 = 0 ;
  pj::Buddy *temp3 = 0 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (pj::Buddy *)jarg3;
  arg3 = (pj::Buddy **)&temp3; 
  try {
    std_vector_Sl_pj_Buddy_Sm__Sg__setitem(arg1,arg2,(pj::Buddy *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  std::vector< pj::Buddy * > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  arg2 = (std::vector< pj::Buddy * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::Buddy * > const & is null", 0);
    return ;
  } 
  std_vector_Sl_pj_Buddy_Sm__Sg__AddRange(arg1,(std::vector< pj::Buddy * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BuddyVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::Buddy * > *result = 0 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::Buddy * > *)std_vector_Sl_pj_Buddy_Sm__Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  int arg2 ;
  pj::Buddy **arg3 = 0 ;
  pj::Buddy *temp3 = 0 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (pj::Buddy *)jarg3;
  arg3 = (pj::Buddy **)&temp3; 
  try {
    std_vector_Sl_pj_Buddy_Sm__Sg__Insert(arg1,arg2,(pj::Buddy *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  int arg2 ;
  std::vector< pj::Buddy * > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::Buddy * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::Buddy * > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_Buddy_Sm__Sg__InsertRange(arg1,arg2,(std::vector< pj::Buddy * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_Buddy_Sm__Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_Buddy_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BuddyVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  pj::Buddy **arg1 = 0 ;
  int arg2 ;
  pj::Buddy *temp1 = 0 ;
  std::vector< pj::Buddy * > *result = 0 ;
  
  temp1 = (pj::Buddy *)jarg1;
  arg1 = (pj::Buddy **)&temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::Buddy * > *)std_vector_Sl_pj_Buddy_Sm__Sg__Repeat((pj::Buddy *const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  std_vector_Sl_pj_Buddy_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_Buddy_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  int arg2 ;
  std::vector< pj::Buddy * > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::Buddy * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::Buddy * > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_Buddy_Sm__Sg__SetRange(arg1,arg2,(std::vector< pj::Buddy * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BuddyVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  pj::Buddy **arg2 = 0 ;
  pj::Buddy *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  temp2 = (pj::Buddy *)jarg2;
  arg2 = (pj::Buddy **)&temp2; 
  result = (bool)std_vector_Sl_pj_Buddy_Sm__Sg__Contains(arg1,(pj::Buddy *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BuddyVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  pj::Buddy **arg2 = 0 ;
  pj::Buddy *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  temp2 = (pj::Buddy *)jarg2;
  arg2 = (pj::Buddy **)&temp2; 
  result = (int)std_vector_Sl_pj_Buddy_Sm__Sg__IndexOf(arg1,(pj::Buddy *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BuddyVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  pj::Buddy **arg2 = 0 ;
  pj::Buddy *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  temp2 = (pj::Buddy *)jarg2;
  arg2 = (pj::Buddy **)&temp2; 
  result = (int)std_vector_Sl_pj_Buddy_Sm__Sg__LastIndexOf(arg1,(pj::Buddy *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BuddyVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  pj::Buddy **arg2 = 0 ;
  pj::Buddy *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  temp2 = (pj::Buddy *)jarg2;
  arg2 = (pj::Buddy **)&temp2; 
  result = (bool)std_vector_Sl_pj_Buddy_Sm__Sg__Remove(arg1,(pj::Buddy *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BuddyVector(void * jarg1) {
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BuddyVector2__SWIG_0() {
  void * jresult ;
  std::vector< pj::Buddy > *result = 0 ;
  
  result = (std::vector< pj::Buddy > *)new std::vector< pj::Buddy >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BuddyVector2__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< pj::Buddy > *arg1 = 0 ;
  std::vector< pj::Buddy > *result = 0 ;
  
  arg1 = (std::vector< pj::Buddy > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::Buddy > const & is null", 0);
    return 0;
  } 
  result = (std::vector< pj::Buddy > *)new std::vector< pj::Buddy >((std::vector< pj::Buddy > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyVector2_Clear(void * jarg1) {
  std::vector< pj::Buddy > *arg1 = (std::vector< pj::Buddy > *) 0 ;
  
  arg1 = (std::vector< pj::Buddy > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyVector2_Add(void * jarg1, void * jarg2) {
  std::vector< pj::Buddy > *arg1 = (std::vector< pj::Buddy > *) 0 ;
  pj::Buddy *arg2 = 0 ;
  
  arg1 = (std::vector< pj::Buddy > *)jarg1; 
  arg2 = (pj::Buddy *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::Buddy const & is null", 0);
    return ;
  } 
  (arg1)->push_back((pj::Buddy const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BuddyVector2_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::Buddy > *arg1 = (std::vector< pj::Buddy > *) 0 ;
  std::vector< pj::Buddy >::size_type result;
  
  arg1 = (std::vector< pj::Buddy > *)jarg1; 
  result = ((std::vector< pj::Buddy > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BuddyVector2_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::Buddy > *arg1 = (std::vector< pj::Buddy > *) 0 ;
  bool result;
  
  arg1 = (std::vector< pj::Buddy > *)jarg1; 
  result = (bool)((std::vector< pj::Buddy > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BuddyVector2_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::Buddy > *arg1 = (std::vector< pj::Buddy > *) 0 ;
  std::vector< pj::Buddy >::size_type result;
  
  arg1 = (std::vector< pj::Buddy > *)jarg1; 
  result = ((std::vector< pj::Buddy > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyVector2_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< pj::Buddy > *arg1 = (std::vector< pj::Buddy > *) 0 ;
  std::vector< pj::Buddy >::size_type arg2 ;
  
  arg1 = (std::vector< pj::Buddy > *)jarg1; 
  arg2 = (std::vector< pj::Buddy >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BuddyVector2__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::Buddy > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::Buddy > *)new_std_vector_Sl_pj_Buddy_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BuddyVector2_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::Buddy > *arg1 = (std::vector< pj::Buddy > *) 0 ;
  int arg2 ;
  pj::Buddy result;
  
  arg1 = (std::vector< pj::Buddy > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_pj_Buddy_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new pj::Buddy(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BuddyVector2_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::Buddy > *arg1 = (std::vector< pj::Buddy > *) 0 ;
  int arg2 ;
  std::vector< pj::Buddy >::value_type *result = 0 ;
  
  arg1 = (std::vector< pj::Buddy > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::Buddy >::value_type *) &std_vector_Sl_pj_Buddy_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyVector2_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::Buddy > *arg1 = (std::vector< pj::Buddy > *) 0 ;
  int arg2 ;
  pj::Buddy *arg3 = 0 ;
  
  arg1 = (std::vector< pj::Buddy > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::Buddy *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::Buddy const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_Buddy_Sg__setitem(arg1,arg2,(pj::Buddy const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyVector2_AddRange(void * jarg1, void * jarg2) {
  std::vector< pj::Buddy > *arg1 = (std::vector< pj::Buddy > *) 0 ;
  std::vector< pj::Buddy > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::Buddy > *)jarg1; 
  arg2 = (std::vector< pj::Buddy > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::Buddy > const & is null", 0);
    return ;
  } 
  std_vector_Sl_pj_Buddy_Sg__AddRange(arg1,(std::vector< pj::Buddy > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BuddyVector2_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::Buddy > *arg1 = (std::vector< pj::Buddy > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::Buddy > *result = 0 ;
  
  arg1 = (std::vector< pj::Buddy > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::Buddy > *)std_vector_Sl_pj_Buddy_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyVector2_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::Buddy > *arg1 = (std::vector< pj::Buddy > *) 0 ;
  int arg2 ;
  pj::Buddy *arg3 = 0 ;
  
  arg1 = (std::vector< pj::Buddy > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::Buddy *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::Buddy const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_Buddy_Sg__Insert(arg1,arg2,(pj::Buddy const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyVector2_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::Buddy > *arg1 = (std::vector< pj::Buddy > *) 0 ;
  int arg2 ;
  std::vector< pj::Buddy > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::Buddy > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::Buddy > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::Buddy > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_Buddy_Sg__InsertRange(arg1,arg2,(std::vector< pj::Buddy > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyVector2_RemoveAt(void * jarg1, int jarg2) {
  std::vector< pj::Buddy > *arg1 = (std::vector< pj::Buddy > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::Buddy > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_Buddy_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyVector2_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::Buddy > *arg1 = (std::vector< pj::Buddy > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::Buddy > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_Buddy_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BuddyVector2_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  pj::Buddy *arg1 = 0 ;
  int arg2 ;
  std::vector< pj::Buddy > *result = 0 ;
  
  arg1 = (pj::Buddy *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::Buddy const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::Buddy > *)std_vector_Sl_pj_Buddy_Sg__Repeat((pj::Buddy const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyVector2_Reverse__SWIG_0(void * jarg1) {
  std::vector< pj::Buddy > *arg1 = (std::vector< pj::Buddy > *) 0 ;
  
  arg1 = (std::vector< pj::Buddy > *)jarg1; 
  std_vector_Sl_pj_Buddy_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyVector2_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::Buddy > *arg1 = (std::vector< pj::Buddy > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::Buddy > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_Buddy_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyVector2_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::Buddy > *arg1 = (std::vector< pj::Buddy > *) 0 ;
  int arg2 ;
  std::vector< pj::Buddy > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::Buddy > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::Buddy > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::Buddy > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_Buddy_Sg__SetRange(arg1,arg2,(std::vector< pj::Buddy > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BuddyVector2(void * jarg1) {
  std::vector< pj::Buddy > *arg1 = (std::vector< pj::Buddy > *) 0 ;
  
  arg1 = (std::vector< pj::Buddy > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AudioMediaVector__SWIG_0() {
  void * jresult ;
  std::vector< pj::AudioMedia * > *result = 0 ;
  
  result = (std::vector< pj::AudioMedia * > *)new std::vector< pj::AudioMedia * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AudioMediaVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< pj::AudioMedia * > *arg1 = 0 ;
  std::vector< pj::AudioMedia * > *result = 0 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::AudioMedia * > const & is null", 0);
    return 0;
  } 
  result = (std::vector< pj::AudioMedia * > *)new std::vector< pj::AudioMedia * >((std::vector< pj::AudioMedia * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaVector_Clear(void * jarg1) {
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaVector_Add(void * jarg1, void * jarg2) {
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  pj::AudioMedia **arg2 = 0 ;
  pj::AudioMedia *temp2 = 0 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  temp2 = (pj::AudioMedia *)jarg2;
  arg2 = (pj::AudioMedia **)&temp2; 
  (arg1)->push_back((pj::AudioMedia *const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioMediaVector_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  std::vector< pj::AudioMedia * >::size_type result;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  result = ((std::vector< pj::AudioMedia * > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioMediaVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  bool result;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  result = (bool)((std::vector< pj::AudioMedia * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioMediaVector_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  std::vector< pj::AudioMedia * >::size_type result;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  result = ((std::vector< pj::AudioMedia * > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaVector_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  std::vector< pj::AudioMedia * >::size_type arg2 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  arg2 = (std::vector< pj::AudioMedia * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AudioMediaVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::AudioMedia * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::AudioMedia * > *)new_std_vector_Sl_pj_AudioMedia_Sm__Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioMediaVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  int arg2 ;
  pj::AudioMedia *result = 0 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (pj::AudioMedia *)std_vector_Sl_pj_AudioMedia_Sm__Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioMediaVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  int arg2 ;
  std::vector< pj::AudioMedia * >::value_type *result = 0 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::AudioMedia * >::value_type *) &std_vector_Sl_pj_AudioMedia_Sm__Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  int arg2 ;
  pj::AudioMedia **arg3 = 0 ;
  pj::AudioMedia *temp3 = 0 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (pj::AudioMedia *)jarg3;
  arg3 = (pj::AudioMedia **)&temp3; 
  try {
    std_vector_Sl_pj_AudioMedia_Sm__Sg__setitem(arg1,arg2,(pj::AudioMedia *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  std::vector< pj::AudioMedia * > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  arg2 = (std::vector< pj::AudioMedia * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::AudioMedia * > const & is null", 0);
    return ;
  } 
  std_vector_Sl_pj_AudioMedia_Sm__Sg__AddRange(arg1,(std::vector< pj::AudioMedia * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioMediaVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::AudioMedia * > *result = 0 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::AudioMedia * > *)std_vector_Sl_pj_AudioMedia_Sm__Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  int arg2 ;
  pj::AudioMedia **arg3 = 0 ;
  pj::AudioMedia *temp3 = 0 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (pj::AudioMedia *)jarg3;
  arg3 = (pj::AudioMedia **)&temp3; 
  try {
    std_vector_Sl_pj_AudioMedia_Sm__Sg__Insert(arg1,arg2,(pj::AudioMedia *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  int arg2 ;
  std::vector< pj::AudioMedia * > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::AudioMedia * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::AudioMedia * > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_AudioMedia_Sm__Sg__InsertRange(arg1,arg2,(std::vector< pj::AudioMedia * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_AudioMedia_Sm__Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_AudioMedia_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioMediaVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  pj::AudioMedia **arg1 = 0 ;
  int arg2 ;
  pj::AudioMedia *temp1 = 0 ;
  std::vector< pj::AudioMedia * > *result = 0 ;
  
  temp1 = (pj::AudioMedia *)jarg1;
  arg1 = (pj::AudioMedia **)&temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::AudioMedia * > *)std_vector_Sl_pj_AudioMedia_Sm__Sg__Repeat((pj::AudioMedia *const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  std_vector_Sl_pj_AudioMedia_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_AudioMedia_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  int arg2 ;
  std::vector< pj::AudioMedia * > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::AudioMedia * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::AudioMedia * > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_AudioMedia_Sm__Sg__SetRange(arg1,arg2,(std::vector< pj::AudioMedia * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioMediaVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  pj::AudioMedia **arg2 = 0 ;
  pj::AudioMedia *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  temp2 = (pj::AudioMedia *)jarg2;
  arg2 = (pj::AudioMedia **)&temp2; 
  result = (bool)std_vector_Sl_pj_AudioMedia_Sm__Sg__Contains(arg1,(pj::AudioMedia *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioMediaVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  pj::AudioMedia **arg2 = 0 ;
  pj::AudioMedia *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  temp2 = (pj::AudioMedia *)jarg2;
  arg2 = (pj::AudioMedia **)&temp2; 
  result = (int)std_vector_Sl_pj_AudioMedia_Sm__Sg__IndexOf(arg1,(pj::AudioMedia *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioMediaVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  pj::AudioMedia **arg2 = 0 ;
  pj::AudioMedia *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  temp2 = (pj::AudioMedia *)jarg2;
  arg2 = (pj::AudioMedia **)&temp2; 
  result = (int)std_vector_Sl_pj_AudioMedia_Sm__Sg__LastIndexOf(arg1,(pj::AudioMedia *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioMediaVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  pj::AudioMedia **arg2 = 0 ;
  pj::AudioMedia *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  temp2 = (pj::AudioMedia *)jarg2;
  arg2 = (pj::AudioMedia **)&temp2; 
  result = (bool)std_vector_Sl_pj_AudioMedia_Sm__Sg__Remove(arg1,(pj::AudioMedia *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AudioMediaVector(void * jarg1) {
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AudioMediaVector2__SWIG_0() {
  void * jresult ;
  std::vector< pj::AudioMedia > *result = 0 ;
  
  result = (std::vector< pj::AudioMedia > *)new std::vector< pj::AudioMedia >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AudioMediaVector2__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< pj::AudioMedia > *arg1 = 0 ;
  std::vector< pj::AudioMedia > *result = 0 ;
  
  arg1 = (std::vector< pj::AudioMedia > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::AudioMedia > const & is null", 0);
    return 0;
  } 
  result = (std::vector< pj::AudioMedia > *)new std::vector< pj::AudioMedia >((std::vector< pj::AudioMedia > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaVector2_Clear(void * jarg1) {
  std::vector< pj::AudioMedia > *arg1 = (std::vector< pj::AudioMedia > *) 0 ;
  
  arg1 = (std::vector< pj::AudioMedia > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaVector2_Add(void * jarg1, void * jarg2) {
  std::vector< pj::AudioMedia > *arg1 = (std::vector< pj::AudioMedia > *) 0 ;
  pj::AudioMedia *arg2 = 0 ;
  
  arg1 = (std::vector< pj::AudioMedia > *)jarg1; 
  arg2 = (pj::AudioMedia *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AudioMedia const & is null", 0);
    return ;
  } 
  (arg1)->push_back((pj::AudioMedia const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioMediaVector2_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::AudioMedia > *arg1 = (std::vector< pj::AudioMedia > *) 0 ;
  std::vector< pj::AudioMedia >::size_type result;
  
  arg1 = (std::vector< pj::AudioMedia > *)jarg1; 
  result = ((std::vector< pj::AudioMedia > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioMediaVector2_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::AudioMedia > *arg1 = (std::vector< pj::AudioMedia > *) 0 ;
  bool result;
  
  arg1 = (std::vector< pj::AudioMedia > *)jarg1; 
  result = (bool)((std::vector< pj::AudioMedia > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioMediaVector2_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::AudioMedia > *arg1 = (std::vector< pj::AudioMedia > *) 0 ;
  std::vector< pj::AudioMedia >::size_type result;
  
  arg1 = (std::vector< pj::AudioMedia > *)jarg1; 
  result = ((std::vector< pj::AudioMedia > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaVector2_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< pj::AudioMedia > *arg1 = (std::vector< pj::AudioMedia > *) 0 ;
  std::vector< pj::AudioMedia >::size_type arg2 ;
  
  arg1 = (std::vector< pj::AudioMedia > *)jarg1; 
  arg2 = (std::vector< pj::AudioMedia >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AudioMediaVector2__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::AudioMedia > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::AudioMedia > *)new_std_vector_Sl_pj_AudioMedia_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioMediaVector2_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::AudioMedia > *arg1 = (std::vector< pj::AudioMedia > *) 0 ;
  int arg2 ;
  pj::AudioMedia result;
  
  arg1 = (std::vector< pj::AudioMedia > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_pj_AudioMedia_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new pj::AudioMedia(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioMediaVector2_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::AudioMedia > *arg1 = (std::vector< pj::AudioMedia > *) 0 ;
  int arg2 ;
  std::vector< pj::AudioMedia >::value_type *result = 0 ;
  
  arg1 = (std::vector< pj::AudioMedia > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::AudioMedia >::value_type *) &std_vector_Sl_pj_AudioMedia_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaVector2_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::AudioMedia > *arg1 = (std::vector< pj::AudioMedia > *) 0 ;
  int arg2 ;
  pj::AudioMedia *arg3 = 0 ;
  
  arg1 = (std::vector< pj::AudioMedia > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::AudioMedia *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AudioMedia const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_AudioMedia_Sg__setitem(arg1,arg2,(pj::AudioMedia const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaVector2_AddRange(void * jarg1, void * jarg2) {
  std::vector< pj::AudioMedia > *arg1 = (std::vector< pj::AudioMedia > *) 0 ;
  std::vector< pj::AudioMedia > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::AudioMedia > *)jarg1; 
  arg2 = (std::vector< pj::AudioMedia > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::AudioMedia > const & is null", 0);
    return ;
  } 
  std_vector_Sl_pj_AudioMedia_Sg__AddRange(arg1,(std::vector< pj::AudioMedia > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioMediaVector2_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::AudioMedia > *arg1 = (std::vector< pj::AudioMedia > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::AudioMedia > *result = 0 ;
  
  arg1 = (std::vector< pj::AudioMedia > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::AudioMedia > *)std_vector_Sl_pj_AudioMedia_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaVector2_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::AudioMedia > *arg1 = (std::vector< pj::AudioMedia > *) 0 ;
  int arg2 ;
  pj::AudioMedia *arg3 = 0 ;
  
  arg1 = (std::vector< pj::AudioMedia > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::AudioMedia *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AudioMedia const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_AudioMedia_Sg__Insert(arg1,arg2,(pj::AudioMedia const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaVector2_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::AudioMedia > *arg1 = (std::vector< pj::AudioMedia > *) 0 ;
  int arg2 ;
  std::vector< pj::AudioMedia > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::AudioMedia > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::AudioMedia > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::AudioMedia > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_AudioMedia_Sg__InsertRange(arg1,arg2,(std::vector< pj::AudioMedia > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaVector2_RemoveAt(void * jarg1, int jarg2) {
  std::vector< pj::AudioMedia > *arg1 = (std::vector< pj::AudioMedia > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::AudioMedia > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_AudioMedia_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaVector2_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::AudioMedia > *arg1 = (std::vector< pj::AudioMedia > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::AudioMedia > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_AudioMedia_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioMediaVector2_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  pj::AudioMedia *arg1 = 0 ;
  int arg2 ;
  std::vector< pj::AudioMedia > *result = 0 ;
  
  arg1 = (pj::AudioMedia *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AudioMedia const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::AudioMedia > *)std_vector_Sl_pj_AudioMedia_Sg__Repeat((pj::AudioMedia const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaVector2_Reverse__SWIG_0(void * jarg1) {
  std::vector< pj::AudioMedia > *arg1 = (std::vector< pj::AudioMedia > *) 0 ;
  
  arg1 = (std::vector< pj::AudioMedia > *)jarg1; 
  std_vector_Sl_pj_AudioMedia_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaVector2_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::AudioMedia > *arg1 = (std::vector< pj::AudioMedia > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::AudioMedia > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_AudioMedia_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaVector2_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::AudioMedia > *arg1 = (std::vector< pj::AudioMedia > *) 0 ;
  int arg2 ;
  std::vector< pj::AudioMedia > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::AudioMedia > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::AudioMedia > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::AudioMedia > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_AudioMedia_Sg__SetRange(arg1,arg2,(std::vector< pj::AudioMedia > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AudioMediaVector2(void * jarg1) {
  std::vector< pj::AudioMedia > *arg1 = (std::vector< pj::AudioMedia > *) 0 ;
  
  arg1 = (std::vector< pj::AudioMedia > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VideoMediaVector__SWIG_0() {
  void * jresult ;
  std::vector< pj::VideoMedia > *result = 0 ;
  
  result = (std::vector< pj::VideoMedia > *)new std::vector< pj::VideoMedia >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VideoMediaVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< pj::VideoMedia > *arg1 = 0 ;
  std::vector< pj::VideoMedia > *result = 0 ;
  
  arg1 = (std::vector< pj::VideoMedia > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::VideoMedia > const & is null", 0);
    return 0;
  } 
  result = (std::vector< pj::VideoMedia > *)new std::vector< pj::VideoMedia >((std::vector< pj::VideoMedia > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoMediaVector_Clear(void * jarg1) {
  std::vector< pj::VideoMedia > *arg1 = (std::vector< pj::VideoMedia > *) 0 ;
  
  arg1 = (std::vector< pj::VideoMedia > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoMediaVector_Add(void * jarg1, void * jarg2) {
  std::vector< pj::VideoMedia > *arg1 = (std::vector< pj::VideoMedia > *) 0 ;
  pj::VideoMedia *arg2 = 0 ;
  
  arg1 = (std::vector< pj::VideoMedia > *)jarg1; 
  arg2 = (pj::VideoMedia *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::VideoMedia const & is null", 0);
    return ;
  } 
  (arg1)->push_back((pj::VideoMedia const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VideoMediaVector_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::VideoMedia > *arg1 = (std::vector< pj::VideoMedia > *) 0 ;
  std::vector< pj::VideoMedia >::size_type result;
  
  arg1 = (std::vector< pj::VideoMedia > *)jarg1; 
  result = ((std::vector< pj::VideoMedia > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VideoMediaVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::VideoMedia > *arg1 = (std::vector< pj::VideoMedia > *) 0 ;
  bool result;
  
  arg1 = (std::vector< pj::VideoMedia > *)jarg1; 
  result = (bool)((std::vector< pj::VideoMedia > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VideoMediaVector_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::VideoMedia > *arg1 = (std::vector< pj::VideoMedia > *) 0 ;
  std::vector< pj::VideoMedia >::size_type result;
  
  arg1 = (std::vector< pj::VideoMedia > *)jarg1; 
  result = ((std::vector< pj::VideoMedia > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoMediaVector_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< pj::VideoMedia > *arg1 = (std::vector< pj::VideoMedia > *) 0 ;
  std::vector< pj::VideoMedia >::size_type arg2 ;
  
  arg1 = (std::vector< pj::VideoMedia > *)jarg1; 
  arg2 = (std::vector< pj::VideoMedia >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VideoMediaVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::VideoMedia > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::VideoMedia > *)new_std_vector_Sl_pj_VideoMedia_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VideoMediaVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::VideoMedia > *arg1 = (std::vector< pj::VideoMedia > *) 0 ;
  int arg2 ;
  pj::VideoMedia result;
  
  arg1 = (std::vector< pj::VideoMedia > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_pj_VideoMedia_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new pj::VideoMedia(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VideoMediaVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::VideoMedia > *arg1 = (std::vector< pj::VideoMedia > *) 0 ;
  int arg2 ;
  std::vector< pj::VideoMedia >::value_type *result = 0 ;
  
  arg1 = (std::vector< pj::VideoMedia > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::VideoMedia >::value_type *) &std_vector_Sl_pj_VideoMedia_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoMediaVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::VideoMedia > *arg1 = (std::vector< pj::VideoMedia > *) 0 ;
  int arg2 ;
  pj::VideoMedia *arg3 = 0 ;
  
  arg1 = (std::vector< pj::VideoMedia > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::VideoMedia *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::VideoMedia const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_VideoMedia_Sg__setitem(arg1,arg2,(pj::VideoMedia const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoMediaVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< pj::VideoMedia > *arg1 = (std::vector< pj::VideoMedia > *) 0 ;
  std::vector< pj::VideoMedia > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::VideoMedia > *)jarg1; 
  arg2 = (std::vector< pj::VideoMedia > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::VideoMedia > const & is null", 0);
    return ;
  } 
  std_vector_Sl_pj_VideoMedia_Sg__AddRange(arg1,(std::vector< pj::VideoMedia > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VideoMediaVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::VideoMedia > *arg1 = (std::vector< pj::VideoMedia > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::VideoMedia > *result = 0 ;
  
  arg1 = (std::vector< pj::VideoMedia > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::VideoMedia > *)std_vector_Sl_pj_VideoMedia_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoMediaVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::VideoMedia > *arg1 = (std::vector< pj::VideoMedia > *) 0 ;
  int arg2 ;
  pj::VideoMedia *arg3 = 0 ;
  
  arg1 = (std::vector< pj::VideoMedia > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::VideoMedia *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::VideoMedia const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_VideoMedia_Sg__Insert(arg1,arg2,(pj::VideoMedia const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoMediaVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::VideoMedia > *arg1 = (std::vector< pj::VideoMedia > *) 0 ;
  int arg2 ;
  std::vector< pj::VideoMedia > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::VideoMedia > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::VideoMedia > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::VideoMedia > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_VideoMedia_Sg__InsertRange(arg1,arg2,(std::vector< pj::VideoMedia > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoMediaVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< pj::VideoMedia > *arg1 = (std::vector< pj::VideoMedia > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::VideoMedia > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_VideoMedia_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoMediaVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::VideoMedia > *arg1 = (std::vector< pj::VideoMedia > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::VideoMedia > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_VideoMedia_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VideoMediaVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  pj::VideoMedia *arg1 = 0 ;
  int arg2 ;
  std::vector< pj::VideoMedia > *result = 0 ;
  
  arg1 = (pj::VideoMedia *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::VideoMedia const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::VideoMedia > *)std_vector_Sl_pj_VideoMedia_Sg__Repeat((pj::VideoMedia const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoMediaVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< pj::VideoMedia > *arg1 = (std::vector< pj::VideoMedia > *) 0 ;
  
  arg1 = (std::vector< pj::VideoMedia > *)jarg1; 
  std_vector_Sl_pj_VideoMedia_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoMediaVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::VideoMedia > *arg1 = (std::vector< pj::VideoMedia > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::VideoMedia > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_VideoMedia_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoMediaVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::VideoMedia > *arg1 = (std::vector< pj::VideoMedia > *) 0 ;
  int arg2 ;
  std::vector< pj::VideoMedia > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::VideoMedia > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::VideoMedia > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::VideoMedia > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_VideoMedia_Sg__SetRange(arg1,arg2,(std::vector< pj::VideoMedia > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VideoMediaVector(void * jarg1) {
  std::vector< pj::VideoMedia > *arg1 = (std::vector< pj::VideoMedia > *) 0 ;
  
  arg1 = (std::vector< pj::VideoMedia > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ToneDescVector__SWIG_0() {
  void * jresult ;
  std::vector< pj::ToneDesc > *result = 0 ;
  
  result = (std::vector< pj::ToneDesc > *)new std::vector< pj::ToneDesc >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ToneDescVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< pj::ToneDesc > *arg1 = 0 ;
  std::vector< pj::ToneDesc > *result = 0 ;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::ToneDesc > const & is null", 0);
    return 0;
  } 
  result = (std::vector< pj::ToneDesc > *)new std::vector< pj::ToneDesc >((std::vector< pj::ToneDesc > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDescVector_Clear(void * jarg1) {
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDescVector_Add(void * jarg1, void * jarg2) {
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  pj::ToneDesc *arg2 = 0 ;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  arg2 = (pj::ToneDesc *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDesc const & is null", 0);
    return ;
  } 
  (arg1)->push_back((pj::ToneDesc const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ToneDescVector_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  std::vector< pj::ToneDesc >::size_type result;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  result = ((std::vector< pj::ToneDesc > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ToneDescVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  bool result;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  result = (bool)((std::vector< pj::ToneDesc > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ToneDescVector_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  std::vector< pj::ToneDesc >::size_type result;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  result = ((std::vector< pj::ToneDesc > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDescVector_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  std::vector< pj::ToneDesc >::size_type arg2 ;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  arg2 = (std::vector< pj::ToneDesc >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ToneDescVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::ToneDesc > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::ToneDesc > *)new_std_vector_Sl_pj_ToneDesc_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ToneDescVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  int arg2 ;
  pj::ToneDesc result;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_pj_ToneDesc_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new pj::ToneDesc(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ToneDescVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  int arg2 ;
  std::vector< pj::ToneDesc >::value_type *result = 0 ;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::ToneDesc >::value_type *) &std_vector_Sl_pj_ToneDesc_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDescVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  int arg2 ;
  pj::ToneDesc *arg3 = 0 ;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::ToneDesc *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDesc const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_ToneDesc_Sg__setitem(arg1,arg2,(pj::ToneDesc const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDescVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  std::vector< pj::ToneDesc > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  arg2 = (std::vector< pj::ToneDesc > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::ToneDesc > const & is null", 0);
    return ;
  } 
  std_vector_Sl_pj_ToneDesc_Sg__AddRange(arg1,(std::vector< pj::ToneDesc > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ToneDescVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::ToneDesc > *result = 0 ;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::ToneDesc > *)std_vector_Sl_pj_ToneDesc_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDescVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  int arg2 ;
  pj::ToneDesc *arg3 = 0 ;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::ToneDesc *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDesc const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_ToneDesc_Sg__Insert(arg1,arg2,(pj::ToneDesc const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDescVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  int arg2 ;
  std::vector< pj::ToneDesc > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::ToneDesc > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::ToneDesc > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_ToneDesc_Sg__InsertRange(arg1,arg2,(std::vector< pj::ToneDesc > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDescVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_ToneDesc_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDescVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_ToneDesc_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ToneDescVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  pj::ToneDesc *arg1 = 0 ;
  int arg2 ;
  std::vector< pj::ToneDesc > *result = 0 ;
  
  arg1 = (pj::ToneDesc *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDesc const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::ToneDesc > *)std_vector_Sl_pj_ToneDesc_Sg__Repeat((pj::ToneDesc const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDescVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  std_vector_Sl_pj_ToneDesc_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDescVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_ToneDesc_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDescVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  int arg2 ;
  std::vector< pj::ToneDesc > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::ToneDesc > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::ToneDesc > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_ToneDesc_Sg__SetRange(arg1,arg2,(std::vector< pj::ToneDesc > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ToneDescVector(void * jarg1) {
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ToneDigitVector__SWIG_0() {
  void * jresult ;
  std::vector< pj::ToneDigit > *result = 0 ;
  
  result = (std::vector< pj::ToneDigit > *)new std::vector< pj::ToneDigit >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ToneDigitVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< pj::ToneDigit > *arg1 = 0 ;
  std::vector< pj::ToneDigit > *result = 0 ;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::ToneDigit > const & is null", 0);
    return 0;
  } 
  result = (std::vector< pj::ToneDigit > *)new std::vector< pj::ToneDigit >((std::vector< pj::ToneDigit > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDigitVector_Clear(void * jarg1) {
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDigitVector_Add(void * jarg1, void * jarg2) {
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  pj::ToneDigit *arg2 = 0 ;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  arg2 = (pj::ToneDigit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDigit const & is null", 0);
    return ;
  } 
  (arg1)->push_back((pj::ToneDigit const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ToneDigitVector_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  std::vector< pj::ToneDigit >::size_type result;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  result = ((std::vector< pj::ToneDigit > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ToneDigitVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  bool result;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  result = (bool)((std::vector< pj::ToneDigit > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ToneDigitVector_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  std::vector< pj::ToneDigit >::size_type result;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  result = ((std::vector< pj::ToneDigit > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDigitVector_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  std::vector< pj::ToneDigit >::size_type arg2 ;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  arg2 = (std::vector< pj::ToneDigit >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ToneDigitVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::ToneDigit > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::ToneDigit > *)new_std_vector_Sl_pj_ToneDigit_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ToneDigitVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  int arg2 ;
  pj::ToneDigit result;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_pj_ToneDigit_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new pj::ToneDigit(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ToneDigitVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  int arg2 ;
  std::vector< pj::ToneDigit >::value_type *result = 0 ;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::ToneDigit >::value_type *) &std_vector_Sl_pj_ToneDigit_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDigitVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  int arg2 ;
  pj::ToneDigit *arg3 = 0 ;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::ToneDigit *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDigit const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_ToneDigit_Sg__setitem(arg1,arg2,(pj::ToneDigit const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDigitVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  std::vector< pj::ToneDigit > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  arg2 = (std::vector< pj::ToneDigit > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::ToneDigit > const & is null", 0);
    return ;
  } 
  std_vector_Sl_pj_ToneDigit_Sg__AddRange(arg1,(std::vector< pj::ToneDigit > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ToneDigitVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::ToneDigit > *result = 0 ;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::ToneDigit > *)std_vector_Sl_pj_ToneDigit_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDigitVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  int arg2 ;
  pj::ToneDigit *arg3 = 0 ;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::ToneDigit *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDigit const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_ToneDigit_Sg__Insert(arg1,arg2,(pj::ToneDigit const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDigitVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  int arg2 ;
  std::vector< pj::ToneDigit > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::ToneDigit > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::ToneDigit > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_ToneDigit_Sg__InsertRange(arg1,arg2,(std::vector< pj::ToneDigit > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDigitVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_ToneDigit_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDigitVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_ToneDigit_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ToneDigitVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  pj::ToneDigit *arg1 = 0 ;
  int arg2 ;
  std::vector< pj::ToneDigit > *result = 0 ;
  
  arg1 = (pj::ToneDigit *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDigit const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::ToneDigit > *)std_vector_Sl_pj_ToneDigit_Sg__Repeat((pj::ToneDigit const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDigitVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  std_vector_Sl_pj_ToneDigit_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDigitVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_ToneDigit_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDigitVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  int arg2 ;
  std::vector< pj::ToneDigit > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::ToneDigit > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::ToneDigit > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_ToneDigit_Sg__SetRange(arg1,arg2,(std::vector< pj::ToneDigit > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ToneDigitVector(void * jarg1) {
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ToneDigitMapVector__SWIG_0() {
  void * jresult ;
  std::vector< pj::ToneDigitMapDigit > *result = 0 ;
  
  result = (std::vector< pj::ToneDigitMapDigit > *)new std::vector< pj::ToneDigitMapDigit >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ToneDigitMapVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< pj::ToneDigitMapDigit > *arg1 = 0 ;
  std::vector< pj::ToneDigitMapDigit > *result = 0 ;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::ToneDigitMapDigit > const & is null", 0);
    return 0;
  } 
  result = (std::vector< pj::ToneDigitMapDigit > *)new std::vector< pj::ToneDigitMapDigit >((std::vector< pj::ToneDigitMapDigit > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDigitMapVector_Clear(void * jarg1) {
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDigitMapVector_Add(void * jarg1, void * jarg2) {
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  pj::ToneDigitMapDigit *arg2 = 0 ;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  arg2 = (pj::ToneDigitMapDigit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDigitMapDigit const & is null", 0);
    return ;
  } 
  (arg1)->push_back((pj::ToneDigitMapDigit const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ToneDigitMapVector_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  std::vector< pj::ToneDigitMapDigit >::size_type result;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  result = ((std::vector< pj::ToneDigitMapDigit > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ToneDigitMapVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  bool result;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  result = (bool)((std::vector< pj::ToneDigitMapDigit > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ToneDigitMapVector_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  std::vector< pj::ToneDigitMapDigit >::size_type result;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  result = ((std::vector< pj::ToneDigitMapDigit > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDigitMapVector_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  std::vector< pj::ToneDigitMapDigit >::size_type arg2 ;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  arg2 = (std::vector< pj::ToneDigitMapDigit >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ToneDigitMapVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::ToneDigitMapDigit > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::ToneDigitMapDigit > *)new_std_vector_Sl_pj_ToneDigitMapDigit_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ToneDigitMapVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  int arg2 ;
  pj::ToneDigitMapDigit result;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_pj_ToneDigitMapDigit_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new pj::ToneDigitMapDigit(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ToneDigitMapVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  int arg2 ;
  std::vector< pj::ToneDigitMapDigit >::value_type *result = 0 ;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::ToneDigitMapDigit >::value_type *) &std_vector_Sl_pj_ToneDigitMapDigit_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDigitMapVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  int arg2 ;
  pj::ToneDigitMapDigit *arg3 = 0 ;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::ToneDigitMapDigit *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDigitMapDigit const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_ToneDigitMapDigit_Sg__setitem(arg1,arg2,(pj::ToneDigitMapDigit const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDigitMapVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  std::vector< pj::ToneDigitMapDigit > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  arg2 = (std::vector< pj::ToneDigitMapDigit > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::ToneDigitMapDigit > const & is null", 0);
    return ;
  } 
  std_vector_Sl_pj_ToneDigitMapDigit_Sg__AddRange(arg1,(std::vector< pj::ToneDigitMapDigit > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ToneDigitMapVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::ToneDigitMapDigit > *result = 0 ;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::ToneDigitMapDigit > *)std_vector_Sl_pj_ToneDigitMapDigit_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDigitMapVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  int arg2 ;
  pj::ToneDigitMapDigit *arg3 = 0 ;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::ToneDigitMapDigit *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDigitMapDigit const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_ToneDigitMapDigit_Sg__Insert(arg1,arg2,(pj::ToneDigitMapDigit const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDigitMapVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  int arg2 ;
  std::vector< pj::ToneDigitMapDigit > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::ToneDigitMapDigit > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::ToneDigitMapDigit > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_ToneDigitMapDigit_Sg__InsertRange(arg1,arg2,(std::vector< pj::ToneDigitMapDigit > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDigitMapVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_ToneDigitMapDigit_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDigitMapVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_ToneDigitMapDigit_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ToneDigitMapVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  pj::ToneDigitMapDigit *arg1 = 0 ;
  int arg2 ;
  std::vector< pj::ToneDigitMapDigit > *result = 0 ;
  
  arg1 = (pj::ToneDigitMapDigit *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDigitMapDigit const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::ToneDigitMapDigit > *)std_vector_Sl_pj_ToneDigitMapDigit_Sg__Repeat((pj::ToneDigitMapDigit const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDigitMapVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  std_vector_Sl_pj_ToneDigitMapDigit_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDigitMapVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_ToneDigitMapDigit_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDigitMapVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  int arg2 ;
  std::vector< pj::ToneDigitMapDigit > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::ToneDigitMapDigit > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::ToneDigitMapDigit > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_ToneDigitMapDigit_Sg__SetRange(arg1,arg2,(std::vector< pj::ToneDigitMapDigit > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ToneDigitMapVector(void * jarg1) {
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AudioDevInfoVector__SWIG_0() {
  void * jresult ;
  std::vector< pj::AudioDevInfo * > *result = 0 ;
  
  result = (std::vector< pj::AudioDevInfo * > *)new std::vector< pj::AudioDevInfo * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AudioDevInfoVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< pj::AudioDevInfo * > *arg1 = 0 ;
  std::vector< pj::AudioDevInfo * > *result = 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::AudioDevInfo * > const & is null", 0);
    return 0;
  } 
  result = (std::vector< pj::AudioDevInfo * > *)new std::vector< pj::AudioDevInfo * >((std::vector< pj::AudioDevInfo * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioDevInfoVector_Clear(void * jarg1) {
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioDevInfoVector_Add(void * jarg1, void * jarg2) {
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  pj::AudioDevInfo **arg2 = 0 ;
  pj::AudioDevInfo *temp2 = 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  temp2 = (pj::AudioDevInfo *)jarg2;
  arg2 = (pj::AudioDevInfo **)&temp2; 
  (arg1)->push_back((pj::AudioDevInfo *const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioDevInfoVector_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  std::vector< pj::AudioDevInfo * >::size_type result;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  result = ((std::vector< pj::AudioDevInfo * > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioDevInfoVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  bool result;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  result = (bool)((std::vector< pj::AudioDevInfo * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioDevInfoVector_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  std::vector< pj::AudioDevInfo * >::size_type result;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  result = ((std::vector< pj::AudioDevInfo * > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioDevInfoVector_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  std::vector< pj::AudioDevInfo * >::size_type arg2 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  arg2 = (std::vector< pj::AudioDevInfo * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AudioDevInfoVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::AudioDevInfo * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::AudioDevInfo * > *)new_std_vector_Sl_pj_AudioDevInfo_Sm__Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioDevInfoVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  int arg2 ;
  pj::AudioDevInfo *result = 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (pj::AudioDevInfo *)std_vector_Sl_pj_AudioDevInfo_Sm__Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioDevInfoVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  int arg2 ;
  std::vector< pj::AudioDevInfo * >::value_type *result = 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::AudioDevInfo * >::value_type *) &std_vector_Sl_pj_AudioDevInfo_Sm__Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioDevInfoVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  int arg2 ;
  pj::AudioDevInfo **arg3 = 0 ;
  pj::AudioDevInfo *temp3 = 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (pj::AudioDevInfo *)jarg3;
  arg3 = (pj::AudioDevInfo **)&temp3; 
  try {
    std_vector_Sl_pj_AudioDevInfo_Sm__Sg__setitem(arg1,arg2,(pj::AudioDevInfo *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioDevInfoVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  std::vector< pj::AudioDevInfo * > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  arg2 = (std::vector< pj::AudioDevInfo * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::AudioDevInfo * > const & is null", 0);
    return ;
  } 
  std_vector_Sl_pj_AudioDevInfo_Sm__Sg__AddRange(arg1,(std::vector< pj::AudioDevInfo * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioDevInfoVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::AudioDevInfo * > *result = 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::AudioDevInfo * > *)std_vector_Sl_pj_AudioDevInfo_Sm__Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioDevInfoVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  int arg2 ;
  pj::AudioDevInfo **arg3 = 0 ;
  pj::AudioDevInfo *temp3 = 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (pj::AudioDevInfo *)jarg3;
  arg3 = (pj::AudioDevInfo **)&temp3; 
  try {
    std_vector_Sl_pj_AudioDevInfo_Sm__Sg__Insert(arg1,arg2,(pj::AudioDevInfo *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioDevInfoVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  int arg2 ;
  std::vector< pj::AudioDevInfo * > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::AudioDevInfo * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::AudioDevInfo * > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_AudioDevInfo_Sm__Sg__InsertRange(arg1,arg2,(std::vector< pj::AudioDevInfo * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioDevInfoVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_AudioDevInfo_Sm__Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioDevInfoVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_AudioDevInfo_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioDevInfoVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  pj::AudioDevInfo **arg1 = 0 ;
  int arg2 ;
  pj::AudioDevInfo *temp1 = 0 ;
  std::vector< pj::AudioDevInfo * > *result = 0 ;
  
  temp1 = (pj::AudioDevInfo *)jarg1;
  arg1 = (pj::AudioDevInfo **)&temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::AudioDevInfo * > *)std_vector_Sl_pj_AudioDevInfo_Sm__Sg__Repeat((pj::AudioDevInfo *const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioDevInfoVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  std_vector_Sl_pj_AudioDevInfo_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioDevInfoVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_AudioDevInfo_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioDevInfoVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  int arg2 ;
  std::vector< pj::AudioDevInfo * > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::AudioDevInfo * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::AudioDevInfo * > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_AudioDevInfo_Sm__Sg__SetRange(arg1,arg2,(std::vector< pj::AudioDevInfo * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioDevInfoVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  pj::AudioDevInfo **arg2 = 0 ;
  pj::AudioDevInfo *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  temp2 = (pj::AudioDevInfo *)jarg2;
  arg2 = (pj::AudioDevInfo **)&temp2; 
  result = (bool)std_vector_Sl_pj_AudioDevInfo_Sm__Sg__Contains(arg1,(pj::AudioDevInfo *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioDevInfoVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  pj::AudioDevInfo **arg2 = 0 ;
  pj::AudioDevInfo *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  temp2 = (pj::AudioDevInfo *)jarg2;
  arg2 = (pj::AudioDevInfo **)&temp2; 
  result = (int)std_vector_Sl_pj_AudioDevInfo_Sm__Sg__IndexOf(arg1,(pj::AudioDevInfo *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioDevInfoVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  pj::AudioDevInfo **arg2 = 0 ;
  pj::AudioDevInfo *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  temp2 = (pj::AudioDevInfo *)jarg2;
  arg2 = (pj::AudioDevInfo **)&temp2; 
  result = (int)std_vector_Sl_pj_AudioDevInfo_Sm__Sg__LastIndexOf(arg1,(pj::AudioDevInfo *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioDevInfoVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  pj::AudioDevInfo **arg2 = 0 ;
  pj::AudioDevInfo *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  temp2 = (pj::AudioDevInfo *)jarg2;
  arg2 = (pj::AudioDevInfo **)&temp2; 
  result = (bool)std_vector_Sl_pj_AudioDevInfo_Sm__Sg__Remove(arg1,(pj::AudioDevInfo *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AudioDevInfoVector(void * jarg1) {
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AudioDevInfoVector2__SWIG_0() {
  void * jresult ;
  std::vector< pj::AudioDevInfo > *result = 0 ;
  
  result = (std::vector< pj::AudioDevInfo > *)new std::vector< pj::AudioDevInfo >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AudioDevInfoVector2__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< pj::AudioDevInfo > *arg1 = 0 ;
  std::vector< pj::AudioDevInfo > *result = 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::AudioDevInfo > const & is null", 0);
    return 0;
  } 
  result = (std::vector< pj::AudioDevInfo > *)new std::vector< pj::AudioDevInfo >((std::vector< pj::AudioDevInfo > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioDevInfoVector2_Clear(void * jarg1) {
  std::vector< pj::AudioDevInfo > *arg1 = (std::vector< pj::AudioDevInfo > *) 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioDevInfoVector2_Add(void * jarg1, void * jarg2) {
  std::vector< pj::AudioDevInfo > *arg1 = (std::vector< pj::AudioDevInfo > *) 0 ;
  pj::AudioDevInfo *arg2 = 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo > *)jarg1; 
  arg2 = (pj::AudioDevInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AudioDevInfo const & is null", 0);
    return ;
  } 
  (arg1)->push_back((pj::AudioDevInfo const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioDevInfoVector2_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::AudioDevInfo > *arg1 = (std::vector< pj::AudioDevInfo > *) 0 ;
  std::vector< pj::AudioDevInfo >::size_type result;
  
  arg1 = (std::vector< pj::AudioDevInfo > *)jarg1; 
  result = ((std::vector< pj::AudioDevInfo > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioDevInfoVector2_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::AudioDevInfo > *arg1 = (std::vector< pj::AudioDevInfo > *) 0 ;
  bool result;
  
  arg1 = (std::vector< pj::AudioDevInfo > *)jarg1; 
  result = (bool)((std::vector< pj::AudioDevInfo > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioDevInfoVector2_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::AudioDevInfo > *arg1 = (std::vector< pj::AudioDevInfo > *) 0 ;
  std::vector< pj::AudioDevInfo >::size_type result;
  
  arg1 = (std::vector< pj::AudioDevInfo > *)jarg1; 
  result = ((std::vector< pj::AudioDevInfo > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioDevInfoVector2_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< pj::AudioDevInfo > *arg1 = (std::vector< pj::AudioDevInfo > *) 0 ;
  std::vector< pj::AudioDevInfo >::size_type arg2 ;
  
  arg1 = (std::vector< pj::AudioDevInfo > *)jarg1; 
  arg2 = (std::vector< pj::AudioDevInfo >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AudioDevInfoVector2__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::AudioDevInfo > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::AudioDevInfo > *)new_std_vector_Sl_pj_AudioDevInfo_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioDevInfoVector2_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::AudioDevInfo > *arg1 = (std::vector< pj::AudioDevInfo > *) 0 ;
  int arg2 ;
  pj::AudioDevInfo result;
  
  arg1 = (std::vector< pj::AudioDevInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_pj_AudioDevInfo_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new pj::AudioDevInfo(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioDevInfoVector2_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::AudioDevInfo > *arg1 = (std::vector< pj::AudioDevInfo > *) 0 ;
  int arg2 ;
  std::vector< pj::AudioDevInfo >::value_type *result = 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::AudioDevInfo >::value_type *) &std_vector_Sl_pj_AudioDevInfo_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioDevInfoVector2_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::AudioDevInfo > *arg1 = (std::vector< pj::AudioDevInfo > *) 0 ;
  int arg2 ;
  pj::AudioDevInfo *arg3 = 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::AudioDevInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AudioDevInfo const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_AudioDevInfo_Sg__setitem(arg1,arg2,(pj::AudioDevInfo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioDevInfoVector2_AddRange(void * jarg1, void * jarg2) {
  std::vector< pj::AudioDevInfo > *arg1 = (std::vector< pj::AudioDevInfo > *) 0 ;
  std::vector< pj::AudioDevInfo > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo > *)jarg1; 
  arg2 = (std::vector< pj::AudioDevInfo > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::AudioDevInfo > const & is null", 0);
    return ;
  } 
  std_vector_Sl_pj_AudioDevInfo_Sg__AddRange(arg1,(std::vector< pj::AudioDevInfo > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioDevInfoVector2_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::AudioDevInfo > *arg1 = (std::vector< pj::AudioDevInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::AudioDevInfo > *result = 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::AudioDevInfo > *)std_vector_Sl_pj_AudioDevInfo_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioDevInfoVector2_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::AudioDevInfo > *arg1 = (std::vector< pj::AudioDevInfo > *) 0 ;
  int arg2 ;
  pj::AudioDevInfo *arg3 = 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::AudioDevInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AudioDevInfo const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_AudioDevInfo_Sg__Insert(arg1,arg2,(pj::AudioDevInfo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioDevInfoVector2_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::AudioDevInfo > *arg1 = (std::vector< pj::AudioDevInfo > *) 0 ;
  int arg2 ;
  std::vector< pj::AudioDevInfo > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::AudioDevInfo > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::AudioDevInfo > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_AudioDevInfo_Sg__InsertRange(arg1,arg2,(std::vector< pj::AudioDevInfo > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioDevInfoVector2_RemoveAt(void * jarg1, int jarg2) {
  std::vector< pj::AudioDevInfo > *arg1 = (std::vector< pj::AudioDevInfo > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::AudioDevInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_AudioDevInfo_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioDevInfoVector2_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::AudioDevInfo > *arg1 = (std::vector< pj::AudioDevInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::AudioDevInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_AudioDevInfo_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioDevInfoVector2_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  pj::AudioDevInfo *arg1 = 0 ;
  int arg2 ;
  std::vector< pj::AudioDevInfo > *result = 0 ;
  
  arg1 = (pj::AudioDevInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AudioDevInfo const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::AudioDevInfo > *)std_vector_Sl_pj_AudioDevInfo_Sg__Repeat((pj::AudioDevInfo const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioDevInfoVector2_Reverse__SWIG_0(void * jarg1) {
  std::vector< pj::AudioDevInfo > *arg1 = (std::vector< pj::AudioDevInfo > *) 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo > *)jarg1; 
  std_vector_Sl_pj_AudioDevInfo_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioDevInfoVector2_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::AudioDevInfo > *arg1 = (std::vector< pj::AudioDevInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::AudioDevInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_AudioDevInfo_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioDevInfoVector2_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::AudioDevInfo > *arg1 = (std::vector< pj::AudioDevInfo > *) 0 ;
  int arg2 ;
  std::vector< pj::AudioDevInfo > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::AudioDevInfo > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::AudioDevInfo > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_AudioDevInfo_Sg__SetRange(arg1,arg2,(std::vector< pj::AudioDevInfo > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AudioDevInfoVector2(void * jarg1) {
  std::vector< pj::AudioDevInfo > *arg1 = (std::vector< pj::AudioDevInfo > *) 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CodecInfoVector__SWIG_0() {
  void * jresult ;
  std::vector< pj::CodecInfo * > *result = 0 ;
  
  result = (std::vector< pj::CodecInfo * > *)new std::vector< pj::CodecInfo * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CodecInfoVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< pj::CodecInfo * > *arg1 = 0 ;
  std::vector< pj::CodecInfo * > *result = 0 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::CodecInfo * > const & is null", 0);
    return 0;
  } 
  result = (std::vector< pj::CodecInfo * > *)new std::vector< pj::CodecInfo * >((std::vector< pj::CodecInfo * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecInfoVector_Clear(void * jarg1) {
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecInfoVector_Add(void * jarg1, void * jarg2) {
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  pj::CodecInfo **arg2 = 0 ;
  pj::CodecInfo *temp2 = 0 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  temp2 = (pj::CodecInfo *)jarg2;
  arg2 = (pj::CodecInfo **)&temp2; 
  (arg1)->push_back((pj::CodecInfo *const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecInfoVector_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  std::vector< pj::CodecInfo * >::size_type result;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  result = ((std::vector< pj::CodecInfo * > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecInfoVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  bool result;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  result = (bool)((std::vector< pj::CodecInfo * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecInfoVector_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  std::vector< pj::CodecInfo * >::size_type result;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  result = ((std::vector< pj::CodecInfo * > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecInfoVector_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  std::vector< pj::CodecInfo * >::size_type arg2 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  arg2 = (std::vector< pj::CodecInfo * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CodecInfoVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::CodecInfo * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::CodecInfo * > *)new_std_vector_Sl_pj_CodecInfo_Sm__Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CodecInfoVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  int arg2 ;
  pj::CodecInfo *result = 0 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (pj::CodecInfo *)std_vector_Sl_pj_CodecInfo_Sm__Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CodecInfoVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  int arg2 ;
  std::vector< pj::CodecInfo * >::value_type *result = 0 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::CodecInfo * >::value_type *) &std_vector_Sl_pj_CodecInfo_Sm__Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecInfoVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  int arg2 ;
  pj::CodecInfo **arg3 = 0 ;
  pj::CodecInfo *temp3 = 0 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (pj::CodecInfo *)jarg3;
  arg3 = (pj::CodecInfo **)&temp3; 
  try {
    std_vector_Sl_pj_CodecInfo_Sm__Sg__setitem(arg1,arg2,(pj::CodecInfo *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecInfoVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  std::vector< pj::CodecInfo * > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  arg2 = (std::vector< pj::CodecInfo * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::CodecInfo * > const & is null", 0);
    return ;
  } 
  std_vector_Sl_pj_CodecInfo_Sm__Sg__AddRange(arg1,(std::vector< pj::CodecInfo * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CodecInfoVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::CodecInfo * > *result = 0 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::CodecInfo * > *)std_vector_Sl_pj_CodecInfo_Sm__Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecInfoVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  int arg2 ;
  pj::CodecInfo **arg3 = 0 ;
  pj::CodecInfo *temp3 = 0 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (pj::CodecInfo *)jarg3;
  arg3 = (pj::CodecInfo **)&temp3; 
  try {
    std_vector_Sl_pj_CodecInfo_Sm__Sg__Insert(arg1,arg2,(pj::CodecInfo *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecInfoVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  int arg2 ;
  std::vector< pj::CodecInfo * > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::CodecInfo * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::CodecInfo * > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_CodecInfo_Sm__Sg__InsertRange(arg1,arg2,(std::vector< pj::CodecInfo * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecInfoVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_CodecInfo_Sm__Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecInfoVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_CodecInfo_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CodecInfoVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  pj::CodecInfo **arg1 = 0 ;
  int arg2 ;
  pj::CodecInfo *temp1 = 0 ;
  std::vector< pj::CodecInfo * > *result = 0 ;
  
  temp1 = (pj::CodecInfo *)jarg1;
  arg1 = (pj::CodecInfo **)&temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::CodecInfo * > *)std_vector_Sl_pj_CodecInfo_Sm__Sg__Repeat((pj::CodecInfo *const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecInfoVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  std_vector_Sl_pj_CodecInfo_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecInfoVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_CodecInfo_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecInfoVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  int arg2 ;
  std::vector< pj::CodecInfo * > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::CodecInfo * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::CodecInfo * > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_CodecInfo_Sm__Sg__SetRange(arg1,arg2,(std::vector< pj::CodecInfo * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecInfoVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  pj::CodecInfo **arg2 = 0 ;
  pj::CodecInfo *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  temp2 = (pj::CodecInfo *)jarg2;
  arg2 = (pj::CodecInfo **)&temp2; 
  result = (bool)std_vector_Sl_pj_CodecInfo_Sm__Sg__Contains(arg1,(pj::CodecInfo *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CodecInfoVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  pj::CodecInfo **arg2 = 0 ;
  pj::CodecInfo *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  temp2 = (pj::CodecInfo *)jarg2;
  arg2 = (pj::CodecInfo **)&temp2; 
  result = (int)std_vector_Sl_pj_CodecInfo_Sm__Sg__IndexOf(arg1,(pj::CodecInfo *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CodecInfoVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  pj::CodecInfo **arg2 = 0 ;
  pj::CodecInfo *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  temp2 = (pj::CodecInfo *)jarg2;
  arg2 = (pj::CodecInfo **)&temp2; 
  result = (int)std_vector_Sl_pj_CodecInfo_Sm__Sg__LastIndexOf(arg1,(pj::CodecInfo *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecInfoVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  pj::CodecInfo **arg2 = 0 ;
  pj::CodecInfo *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  temp2 = (pj::CodecInfo *)jarg2;
  arg2 = (pj::CodecInfo **)&temp2; 
  result = (bool)std_vector_Sl_pj_CodecInfo_Sm__Sg__Remove(arg1,(pj::CodecInfo *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CodecInfoVector(void * jarg1) {
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CodecInfoVector2__SWIG_0() {
  void * jresult ;
  std::vector< pj::CodecInfo > *result = 0 ;
  
  result = (std::vector< pj::CodecInfo > *)new std::vector< pj::CodecInfo >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CodecInfoVector2__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< pj::CodecInfo > *arg1 = 0 ;
  std::vector< pj::CodecInfo > *result = 0 ;
  
  arg1 = (std::vector< pj::CodecInfo > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::CodecInfo > const & is null", 0);
    return 0;
  } 
  result = (std::vector< pj::CodecInfo > *)new std::vector< pj::CodecInfo >((std::vector< pj::CodecInfo > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecInfoVector2_Clear(void * jarg1) {
  std::vector< pj::CodecInfo > *arg1 = (std::vector< pj::CodecInfo > *) 0 ;
  
  arg1 = (std::vector< pj::CodecInfo > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecInfoVector2_Add(void * jarg1, void * jarg2) {
  std::vector< pj::CodecInfo > *arg1 = (std::vector< pj::CodecInfo > *) 0 ;
  pj::CodecInfo *arg2 = 0 ;
  
  arg1 = (std::vector< pj::CodecInfo > *)jarg1; 
  arg2 = (pj::CodecInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CodecInfo const & is null", 0);
    return ;
  } 
  (arg1)->push_back((pj::CodecInfo const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecInfoVector2_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::CodecInfo > *arg1 = (std::vector< pj::CodecInfo > *) 0 ;
  std::vector< pj::CodecInfo >::size_type result;
  
  arg1 = (std::vector< pj::CodecInfo > *)jarg1; 
  result = ((std::vector< pj::CodecInfo > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecInfoVector2_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::CodecInfo > *arg1 = (std::vector< pj::CodecInfo > *) 0 ;
  bool result;
  
  arg1 = (std::vector< pj::CodecInfo > *)jarg1; 
  result = (bool)((std::vector< pj::CodecInfo > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecInfoVector2_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::CodecInfo > *arg1 = (std::vector< pj::CodecInfo > *) 0 ;
  std::vector< pj::CodecInfo >::size_type result;
  
  arg1 = (std::vector< pj::CodecInfo > *)jarg1; 
  result = ((std::vector< pj::CodecInfo > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecInfoVector2_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< pj::CodecInfo > *arg1 = (std::vector< pj::CodecInfo > *) 0 ;
  std::vector< pj::CodecInfo >::size_type arg2 ;
  
  arg1 = (std::vector< pj::CodecInfo > *)jarg1; 
  arg2 = (std::vector< pj::CodecInfo >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CodecInfoVector2__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::CodecInfo > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::CodecInfo > *)new_std_vector_Sl_pj_CodecInfo_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CodecInfoVector2_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::CodecInfo > *arg1 = (std::vector< pj::CodecInfo > *) 0 ;
  int arg2 ;
  pj::CodecInfo result;
  
  arg1 = (std::vector< pj::CodecInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_pj_CodecInfo_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new pj::CodecInfo(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CodecInfoVector2_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::CodecInfo > *arg1 = (std::vector< pj::CodecInfo > *) 0 ;
  int arg2 ;
  std::vector< pj::CodecInfo >::value_type *result = 0 ;
  
  arg1 = (std::vector< pj::CodecInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::CodecInfo >::value_type *) &std_vector_Sl_pj_CodecInfo_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecInfoVector2_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::CodecInfo > *arg1 = (std::vector< pj::CodecInfo > *) 0 ;
  int arg2 ;
  pj::CodecInfo *arg3 = 0 ;
  
  arg1 = (std::vector< pj::CodecInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::CodecInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CodecInfo const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_CodecInfo_Sg__setitem(arg1,arg2,(pj::CodecInfo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecInfoVector2_AddRange(void * jarg1, void * jarg2) {
  std::vector< pj::CodecInfo > *arg1 = (std::vector< pj::CodecInfo > *) 0 ;
  std::vector< pj::CodecInfo > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::CodecInfo > *)jarg1; 
  arg2 = (std::vector< pj::CodecInfo > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::CodecInfo > const & is null", 0);
    return ;
  } 
  std_vector_Sl_pj_CodecInfo_Sg__AddRange(arg1,(std::vector< pj::CodecInfo > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CodecInfoVector2_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::CodecInfo > *arg1 = (std::vector< pj::CodecInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::CodecInfo > *result = 0 ;
  
  arg1 = (std::vector< pj::CodecInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::CodecInfo > *)std_vector_Sl_pj_CodecInfo_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecInfoVector2_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::CodecInfo > *arg1 = (std::vector< pj::CodecInfo > *) 0 ;
  int arg2 ;
  pj::CodecInfo *arg3 = 0 ;
  
  arg1 = (std::vector< pj::CodecInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::CodecInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CodecInfo const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_CodecInfo_Sg__Insert(arg1,arg2,(pj::CodecInfo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecInfoVector2_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::CodecInfo > *arg1 = (std::vector< pj::CodecInfo > *) 0 ;
  int arg2 ;
  std::vector< pj::CodecInfo > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::CodecInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::CodecInfo > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::CodecInfo > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_CodecInfo_Sg__InsertRange(arg1,arg2,(std::vector< pj::CodecInfo > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecInfoVector2_RemoveAt(void * jarg1, int jarg2) {
  std::vector< pj::CodecInfo > *arg1 = (std::vector< pj::CodecInfo > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::CodecInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_CodecInfo_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecInfoVector2_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::CodecInfo > *arg1 = (std::vector< pj::CodecInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::CodecInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_CodecInfo_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CodecInfoVector2_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  pj::CodecInfo *arg1 = 0 ;
  int arg2 ;
  std::vector< pj::CodecInfo > *result = 0 ;
  
  arg1 = (pj::CodecInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CodecInfo const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::CodecInfo > *)std_vector_Sl_pj_CodecInfo_Sg__Repeat((pj::CodecInfo const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecInfoVector2_Reverse__SWIG_0(void * jarg1) {
  std::vector< pj::CodecInfo > *arg1 = (std::vector< pj::CodecInfo > *) 0 ;
  
  arg1 = (std::vector< pj::CodecInfo > *)jarg1; 
  std_vector_Sl_pj_CodecInfo_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecInfoVector2_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::CodecInfo > *arg1 = (std::vector< pj::CodecInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::CodecInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_CodecInfo_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecInfoVector2_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::CodecInfo > *arg1 = (std::vector< pj::CodecInfo > *) 0 ;
  int arg2 ;
  std::vector< pj::CodecInfo > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::CodecInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::CodecInfo > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::CodecInfo > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_CodecInfo_Sg__SetRange(arg1,arg2,(std::vector< pj::CodecInfo > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CodecInfoVector2(void * jarg1) {
  std::vector< pj::CodecInfo > *arg1 = (std::vector< pj::CodecInfo > *) 0 ;
  
  arg1 = (std::vector< pj::CodecInfo > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VideoDevInfoVector__SWIG_0() {
  void * jresult ;
  std::vector< pj::VideoDevInfo * > *result = 0 ;
  
  result = (std::vector< pj::VideoDevInfo * > *)new std::vector< pj::VideoDevInfo * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VideoDevInfoVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< pj::VideoDevInfo * > *arg1 = 0 ;
  std::vector< pj::VideoDevInfo * > *result = 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::VideoDevInfo * > const & is null", 0);
    return 0;
  } 
  result = (std::vector< pj::VideoDevInfo * > *)new std::vector< pj::VideoDevInfo * >((std::vector< pj::VideoDevInfo * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoDevInfoVector_Clear(void * jarg1) {
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoDevInfoVector_Add(void * jarg1, void * jarg2) {
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  pj::VideoDevInfo **arg2 = 0 ;
  pj::VideoDevInfo *temp2 = 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  temp2 = (pj::VideoDevInfo *)jarg2;
  arg2 = (pj::VideoDevInfo **)&temp2; 
  (arg1)->push_back((pj::VideoDevInfo *const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VideoDevInfoVector_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  std::vector< pj::VideoDevInfo * >::size_type result;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  result = ((std::vector< pj::VideoDevInfo * > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VideoDevInfoVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  bool result;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  result = (bool)((std::vector< pj::VideoDevInfo * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VideoDevInfoVector_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  std::vector< pj::VideoDevInfo * >::size_type result;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  result = ((std::vector< pj::VideoDevInfo * > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoDevInfoVector_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  std::vector< pj::VideoDevInfo * >::size_type arg2 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  arg2 = (std::vector< pj::VideoDevInfo * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VideoDevInfoVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::VideoDevInfo * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::VideoDevInfo * > *)new_std_vector_Sl_pj_VideoDevInfo_Sm__Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VideoDevInfoVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  int arg2 ;
  pj::VideoDevInfo *result = 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (pj::VideoDevInfo *)std_vector_Sl_pj_VideoDevInfo_Sm__Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VideoDevInfoVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  int arg2 ;
  std::vector< pj::VideoDevInfo * >::value_type *result = 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::VideoDevInfo * >::value_type *) &std_vector_Sl_pj_VideoDevInfo_Sm__Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoDevInfoVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  int arg2 ;
  pj::VideoDevInfo **arg3 = 0 ;
  pj::VideoDevInfo *temp3 = 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (pj::VideoDevInfo *)jarg3;
  arg3 = (pj::VideoDevInfo **)&temp3; 
  try {
    std_vector_Sl_pj_VideoDevInfo_Sm__Sg__setitem(arg1,arg2,(pj::VideoDevInfo *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoDevInfoVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  std::vector< pj::VideoDevInfo * > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  arg2 = (std::vector< pj::VideoDevInfo * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::VideoDevInfo * > const & is null", 0);
    return ;
  } 
  std_vector_Sl_pj_VideoDevInfo_Sm__Sg__AddRange(arg1,(std::vector< pj::VideoDevInfo * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VideoDevInfoVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::VideoDevInfo * > *result = 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::VideoDevInfo * > *)std_vector_Sl_pj_VideoDevInfo_Sm__Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoDevInfoVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  int arg2 ;
  pj::VideoDevInfo **arg3 = 0 ;
  pj::VideoDevInfo *temp3 = 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (pj::VideoDevInfo *)jarg3;
  arg3 = (pj::VideoDevInfo **)&temp3; 
  try {
    std_vector_Sl_pj_VideoDevInfo_Sm__Sg__Insert(arg1,arg2,(pj::VideoDevInfo *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoDevInfoVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  int arg2 ;
  std::vector< pj::VideoDevInfo * > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::VideoDevInfo * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::VideoDevInfo * > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_VideoDevInfo_Sm__Sg__InsertRange(arg1,arg2,(std::vector< pj::VideoDevInfo * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoDevInfoVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_VideoDevInfo_Sm__Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoDevInfoVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_VideoDevInfo_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VideoDevInfoVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  pj::VideoDevInfo **arg1 = 0 ;
  int arg2 ;
  pj::VideoDevInfo *temp1 = 0 ;
  std::vector< pj::VideoDevInfo * > *result = 0 ;
  
  temp1 = (pj::VideoDevInfo *)jarg1;
  arg1 = (pj::VideoDevInfo **)&temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::VideoDevInfo * > *)std_vector_Sl_pj_VideoDevInfo_Sm__Sg__Repeat((pj::VideoDevInfo *const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoDevInfoVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  std_vector_Sl_pj_VideoDevInfo_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoDevInfoVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_VideoDevInfo_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoDevInfoVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  int arg2 ;
  std::vector< pj::VideoDevInfo * > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::VideoDevInfo * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::VideoDevInfo * > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_VideoDevInfo_Sm__Sg__SetRange(arg1,arg2,(std::vector< pj::VideoDevInfo * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VideoDevInfoVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  pj::VideoDevInfo **arg2 = 0 ;
  pj::VideoDevInfo *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  temp2 = (pj::VideoDevInfo *)jarg2;
  arg2 = (pj::VideoDevInfo **)&temp2; 
  result = (bool)std_vector_Sl_pj_VideoDevInfo_Sm__Sg__Contains(arg1,(pj::VideoDevInfo *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VideoDevInfoVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  pj::VideoDevInfo **arg2 = 0 ;
  pj::VideoDevInfo *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  temp2 = (pj::VideoDevInfo *)jarg2;
  arg2 = (pj::VideoDevInfo **)&temp2; 
  result = (int)std_vector_Sl_pj_VideoDevInfo_Sm__Sg__IndexOf(arg1,(pj::VideoDevInfo *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VideoDevInfoVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  pj::VideoDevInfo **arg2 = 0 ;
  pj::VideoDevInfo *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  temp2 = (pj::VideoDevInfo *)jarg2;
  arg2 = (pj::VideoDevInfo **)&temp2; 
  result = (int)std_vector_Sl_pj_VideoDevInfo_Sm__Sg__LastIndexOf(arg1,(pj::VideoDevInfo *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VideoDevInfoVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  pj::VideoDevInfo **arg2 = 0 ;
  pj::VideoDevInfo *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  temp2 = (pj::VideoDevInfo *)jarg2;
  arg2 = (pj::VideoDevInfo **)&temp2; 
  result = (bool)std_vector_Sl_pj_VideoDevInfo_Sm__Sg__Remove(arg1,(pj::VideoDevInfo *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VideoDevInfoVector(void * jarg1) {
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VideoDevInfoVector2__SWIG_0() {
  void * jresult ;
  std::vector< pj::VideoDevInfo > *result = 0 ;
  
  result = (std::vector< pj::VideoDevInfo > *)new std::vector< pj::VideoDevInfo >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VideoDevInfoVector2__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< pj::VideoDevInfo > *arg1 = 0 ;
  std::vector< pj::VideoDevInfo > *result = 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::VideoDevInfo > const & is null", 0);
    return 0;
  } 
  result = (std::vector< pj::VideoDevInfo > *)new std::vector< pj::VideoDevInfo >((std::vector< pj::VideoDevInfo > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoDevInfoVector2_Clear(void * jarg1) {
  std::vector< pj::VideoDevInfo > *arg1 = (std::vector< pj::VideoDevInfo > *) 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoDevInfoVector2_Add(void * jarg1, void * jarg2) {
  std::vector< pj::VideoDevInfo > *arg1 = (std::vector< pj::VideoDevInfo > *) 0 ;
  pj::VideoDevInfo *arg2 = 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo > *)jarg1; 
  arg2 = (pj::VideoDevInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::VideoDevInfo const & is null", 0);
    return ;
  } 
  (arg1)->push_back((pj::VideoDevInfo const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VideoDevInfoVector2_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::VideoDevInfo > *arg1 = (std::vector< pj::VideoDevInfo > *) 0 ;
  std::vector< pj::VideoDevInfo >::size_type result;
  
  arg1 = (std::vector< pj::VideoDevInfo > *)jarg1; 
  result = ((std::vector< pj::VideoDevInfo > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VideoDevInfoVector2_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::VideoDevInfo > *arg1 = (std::vector< pj::VideoDevInfo > *) 0 ;
  bool result;
  
  arg1 = (std::vector< pj::VideoDevInfo > *)jarg1; 
  result = (bool)((std::vector< pj::VideoDevInfo > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VideoDevInfoVector2_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::VideoDevInfo > *arg1 = (std::vector< pj::VideoDevInfo > *) 0 ;
  std::vector< pj::VideoDevInfo >::size_type result;
  
  arg1 = (std::vector< pj::VideoDevInfo > *)jarg1; 
  result = ((std::vector< pj::VideoDevInfo > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoDevInfoVector2_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< pj::VideoDevInfo > *arg1 = (std::vector< pj::VideoDevInfo > *) 0 ;
  std::vector< pj::VideoDevInfo >::size_type arg2 ;
  
  arg1 = (std::vector< pj::VideoDevInfo > *)jarg1; 
  arg2 = (std::vector< pj::VideoDevInfo >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VideoDevInfoVector2__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::VideoDevInfo > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::VideoDevInfo > *)new_std_vector_Sl_pj_VideoDevInfo_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VideoDevInfoVector2_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::VideoDevInfo > *arg1 = (std::vector< pj::VideoDevInfo > *) 0 ;
  int arg2 ;
  pj::VideoDevInfo result;
  
  arg1 = (std::vector< pj::VideoDevInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_pj_VideoDevInfo_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new pj::VideoDevInfo(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VideoDevInfoVector2_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::VideoDevInfo > *arg1 = (std::vector< pj::VideoDevInfo > *) 0 ;
  int arg2 ;
  std::vector< pj::VideoDevInfo >::value_type *result = 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::VideoDevInfo >::value_type *) &std_vector_Sl_pj_VideoDevInfo_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoDevInfoVector2_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::VideoDevInfo > *arg1 = (std::vector< pj::VideoDevInfo > *) 0 ;
  int arg2 ;
  pj::VideoDevInfo *arg3 = 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::VideoDevInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::VideoDevInfo const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_VideoDevInfo_Sg__setitem(arg1,arg2,(pj::VideoDevInfo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoDevInfoVector2_AddRange(void * jarg1, void * jarg2) {
  std::vector< pj::VideoDevInfo > *arg1 = (std::vector< pj::VideoDevInfo > *) 0 ;
  std::vector< pj::VideoDevInfo > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo > *)jarg1; 
  arg2 = (std::vector< pj::VideoDevInfo > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::VideoDevInfo > const & is null", 0);
    return ;
  } 
  std_vector_Sl_pj_VideoDevInfo_Sg__AddRange(arg1,(std::vector< pj::VideoDevInfo > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VideoDevInfoVector2_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::VideoDevInfo > *arg1 = (std::vector< pj::VideoDevInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::VideoDevInfo > *result = 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::VideoDevInfo > *)std_vector_Sl_pj_VideoDevInfo_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoDevInfoVector2_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::VideoDevInfo > *arg1 = (std::vector< pj::VideoDevInfo > *) 0 ;
  int arg2 ;
  pj::VideoDevInfo *arg3 = 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::VideoDevInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::VideoDevInfo const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_VideoDevInfo_Sg__Insert(arg1,arg2,(pj::VideoDevInfo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoDevInfoVector2_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::VideoDevInfo > *arg1 = (std::vector< pj::VideoDevInfo > *) 0 ;
  int arg2 ;
  std::vector< pj::VideoDevInfo > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::VideoDevInfo > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::VideoDevInfo > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_VideoDevInfo_Sg__InsertRange(arg1,arg2,(std::vector< pj::VideoDevInfo > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoDevInfoVector2_RemoveAt(void * jarg1, int jarg2) {
  std::vector< pj::VideoDevInfo > *arg1 = (std::vector< pj::VideoDevInfo > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::VideoDevInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_VideoDevInfo_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoDevInfoVector2_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::VideoDevInfo > *arg1 = (std::vector< pj::VideoDevInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::VideoDevInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_VideoDevInfo_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VideoDevInfoVector2_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  pj::VideoDevInfo *arg1 = 0 ;
  int arg2 ;
  std::vector< pj::VideoDevInfo > *result = 0 ;
  
  arg1 = (pj::VideoDevInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::VideoDevInfo const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::VideoDevInfo > *)std_vector_Sl_pj_VideoDevInfo_Sg__Repeat((pj::VideoDevInfo const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoDevInfoVector2_Reverse__SWIG_0(void * jarg1) {
  std::vector< pj::VideoDevInfo > *arg1 = (std::vector< pj::VideoDevInfo > *) 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo > *)jarg1; 
  std_vector_Sl_pj_VideoDevInfo_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoDevInfoVector2_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::VideoDevInfo > *arg1 = (std::vector< pj::VideoDevInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::VideoDevInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_VideoDevInfo_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoDevInfoVector2_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::VideoDevInfo > *arg1 = (std::vector< pj::VideoDevInfo > *) 0 ;
  int arg2 ;
  std::vector< pj::VideoDevInfo > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::VideoDevInfo > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::VideoDevInfo > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_VideoDevInfo_Sg__SetRange(arg1,arg2,(std::vector< pj::VideoDevInfo > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VideoDevInfoVector2(void * jarg1) {
  std::vector< pj::VideoDevInfo > *arg1 = (std::vector< pj::VideoDevInfo > *) 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CodecFmtpVector__SWIG_0() {
  void * jresult ;
  std::vector< pj::CodecFmtp > *result = 0 ;
  
  result = (std::vector< pj::CodecFmtp > *)new std::vector< pj::CodecFmtp >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CodecFmtpVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< pj::CodecFmtp > *arg1 = 0 ;
  std::vector< pj::CodecFmtp > *result = 0 ;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::CodecFmtp > const & is null", 0);
    return 0;
  } 
  result = (std::vector< pj::CodecFmtp > *)new std::vector< pj::CodecFmtp >((std::vector< pj::CodecFmtp > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecFmtpVector_Clear(void * jarg1) {
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecFmtpVector_Add(void * jarg1, void * jarg2) {
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  pj::CodecFmtp *arg2 = 0 ;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  arg2 = (pj::CodecFmtp *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CodecFmtp const & is null", 0);
    return ;
  } 
  (arg1)->push_back((pj::CodecFmtp const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecFmtpVector_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  std::vector< pj::CodecFmtp >::size_type result;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  result = ((std::vector< pj::CodecFmtp > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecFmtpVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  bool result;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  result = (bool)((std::vector< pj::CodecFmtp > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecFmtpVector_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  std::vector< pj::CodecFmtp >::size_type result;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  result = ((std::vector< pj::CodecFmtp > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecFmtpVector_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  std::vector< pj::CodecFmtp >::size_type arg2 ;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  arg2 = (std::vector< pj::CodecFmtp >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CodecFmtpVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::CodecFmtp > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::CodecFmtp > *)new_std_vector_Sl_pj_CodecFmtp_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CodecFmtpVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  int arg2 ;
  pj::CodecFmtp result;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_pj_CodecFmtp_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new pj::CodecFmtp(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CodecFmtpVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  int arg2 ;
  std::vector< pj::CodecFmtp >::value_type *result = 0 ;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::CodecFmtp >::value_type *) &std_vector_Sl_pj_CodecFmtp_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecFmtpVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  int arg2 ;
  pj::CodecFmtp *arg3 = 0 ;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::CodecFmtp *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CodecFmtp const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_CodecFmtp_Sg__setitem(arg1,arg2,(pj::CodecFmtp const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecFmtpVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  std::vector< pj::CodecFmtp > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  arg2 = (std::vector< pj::CodecFmtp > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::CodecFmtp > const & is null", 0);
    return ;
  } 
  std_vector_Sl_pj_CodecFmtp_Sg__AddRange(arg1,(std::vector< pj::CodecFmtp > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CodecFmtpVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::CodecFmtp > *result = 0 ;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::CodecFmtp > *)std_vector_Sl_pj_CodecFmtp_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecFmtpVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  int arg2 ;
  pj::CodecFmtp *arg3 = 0 ;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::CodecFmtp *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CodecFmtp const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_CodecFmtp_Sg__Insert(arg1,arg2,(pj::CodecFmtp const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecFmtpVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  int arg2 ;
  std::vector< pj::CodecFmtp > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::CodecFmtp > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::CodecFmtp > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_CodecFmtp_Sg__InsertRange(arg1,arg2,(std::vector< pj::CodecFmtp > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecFmtpVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_CodecFmtp_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecFmtpVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_CodecFmtp_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CodecFmtpVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  pj::CodecFmtp *arg1 = 0 ;
  int arg2 ;
  std::vector< pj::CodecFmtp > *result = 0 ;
  
  arg1 = (pj::CodecFmtp *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CodecFmtp const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::CodecFmtp > *)std_vector_Sl_pj_CodecFmtp_Sg__Repeat((pj::CodecFmtp const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecFmtpVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  std_vector_Sl_pj_CodecFmtp_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecFmtpVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_CodecFmtp_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecFmtpVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  int arg2 ;
  std::vector< pj::CodecFmtp > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::CodecFmtp > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::CodecFmtp > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_CodecFmtp_Sg__SetRange(arg1,arg2,(std::vector< pj::CodecFmtp > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CodecFmtpVector(void * jarg1) {
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MediaFormatAudioVector__SWIG_0() {
  void * jresult ;
  std::vector< pj::MediaFormatAudio > *result = 0 ;
  
  result = (std::vector< pj::MediaFormatAudio > *)new std::vector< pj::MediaFormatAudio >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MediaFormatAudioVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< pj::MediaFormatAudio > *arg1 = 0 ;
  std::vector< pj::MediaFormatAudio > *result = 0 ;
  
  arg1 = (std::vector< pj::MediaFormatAudio > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::MediaFormatAudio > const & is null", 0);
    return 0;
  } 
  result = (std::vector< pj::MediaFormatAudio > *)new std::vector< pj::MediaFormatAudio >((std::vector< pj::MediaFormatAudio > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatAudioVector_Clear(void * jarg1) {
  std::vector< pj::MediaFormatAudio > *arg1 = (std::vector< pj::MediaFormatAudio > *) 0 ;
  
  arg1 = (std::vector< pj::MediaFormatAudio > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatAudioVector_Add(void * jarg1, void * jarg2) {
  std::vector< pj::MediaFormatAudio > *arg1 = (std::vector< pj::MediaFormatAudio > *) 0 ;
  pj::MediaFormatAudio *arg2 = 0 ;
  
  arg1 = (std::vector< pj::MediaFormatAudio > *)jarg1; 
  arg2 = (pj::MediaFormatAudio *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::MediaFormatAudio const & is null", 0);
    return ;
  } 
  (arg1)->push_back((pj::MediaFormatAudio const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaFormatAudioVector_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::MediaFormatAudio > *arg1 = (std::vector< pj::MediaFormatAudio > *) 0 ;
  std::vector< pj::MediaFormatAudio >::size_type result;
  
  arg1 = (std::vector< pj::MediaFormatAudio > *)jarg1; 
  result = ((std::vector< pj::MediaFormatAudio > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaFormatAudioVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::MediaFormatAudio > *arg1 = (std::vector< pj::MediaFormatAudio > *) 0 ;
  bool result;
  
  arg1 = (std::vector< pj::MediaFormatAudio > *)jarg1; 
  result = (bool)((std::vector< pj::MediaFormatAudio > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaFormatAudioVector_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::MediaFormatAudio > *arg1 = (std::vector< pj::MediaFormatAudio > *) 0 ;
  std::vector< pj::MediaFormatAudio >::size_type result;
  
  arg1 = (std::vector< pj::MediaFormatAudio > *)jarg1; 
  result = ((std::vector< pj::MediaFormatAudio > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatAudioVector_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< pj::MediaFormatAudio > *arg1 = (std::vector< pj::MediaFormatAudio > *) 0 ;
  std::vector< pj::MediaFormatAudio >::size_type arg2 ;
  
  arg1 = (std::vector< pj::MediaFormatAudio > *)jarg1; 
  arg2 = (std::vector< pj::MediaFormatAudio >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MediaFormatAudioVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::MediaFormatAudio > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::MediaFormatAudio > *)new_std_vector_Sl_pj_MediaFormatAudio_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MediaFormatAudioVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::MediaFormatAudio > *arg1 = (std::vector< pj::MediaFormatAudio > *) 0 ;
  int arg2 ;
  pj::MediaFormatAudio result;
  
  arg1 = (std::vector< pj::MediaFormatAudio > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_pj_MediaFormatAudio_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new pj::MediaFormatAudio(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MediaFormatAudioVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::MediaFormatAudio > *arg1 = (std::vector< pj::MediaFormatAudio > *) 0 ;
  int arg2 ;
  std::vector< pj::MediaFormatAudio >::value_type *result = 0 ;
  
  arg1 = (std::vector< pj::MediaFormatAudio > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::MediaFormatAudio >::value_type *) &std_vector_Sl_pj_MediaFormatAudio_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatAudioVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::MediaFormatAudio > *arg1 = (std::vector< pj::MediaFormatAudio > *) 0 ;
  int arg2 ;
  pj::MediaFormatAudio *arg3 = 0 ;
  
  arg1 = (std::vector< pj::MediaFormatAudio > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::MediaFormatAudio *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::MediaFormatAudio const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_MediaFormatAudio_Sg__setitem(arg1,arg2,(pj::MediaFormatAudio const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatAudioVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< pj::MediaFormatAudio > *arg1 = (std::vector< pj::MediaFormatAudio > *) 0 ;
  std::vector< pj::MediaFormatAudio > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::MediaFormatAudio > *)jarg1; 
  arg2 = (std::vector< pj::MediaFormatAudio > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::MediaFormatAudio > const & is null", 0);
    return ;
  } 
  std_vector_Sl_pj_MediaFormatAudio_Sg__AddRange(arg1,(std::vector< pj::MediaFormatAudio > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MediaFormatAudioVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::MediaFormatAudio > *arg1 = (std::vector< pj::MediaFormatAudio > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::MediaFormatAudio > *result = 0 ;
  
  arg1 = (std::vector< pj::MediaFormatAudio > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::MediaFormatAudio > *)std_vector_Sl_pj_MediaFormatAudio_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatAudioVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::MediaFormatAudio > *arg1 = (std::vector< pj::MediaFormatAudio > *) 0 ;
  int arg2 ;
  pj::MediaFormatAudio *arg3 = 0 ;
  
  arg1 = (std::vector< pj::MediaFormatAudio > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::MediaFormatAudio *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::MediaFormatAudio const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_MediaFormatAudio_Sg__Insert(arg1,arg2,(pj::MediaFormatAudio const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatAudioVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::MediaFormatAudio > *arg1 = (std::vector< pj::MediaFormatAudio > *) 0 ;
  int arg2 ;
  std::vector< pj::MediaFormatAudio > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::MediaFormatAudio > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::MediaFormatAudio > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::MediaFormatAudio > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_MediaFormatAudio_Sg__InsertRange(arg1,arg2,(std::vector< pj::MediaFormatAudio > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatAudioVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< pj::MediaFormatAudio > *arg1 = (std::vector< pj::MediaFormatAudio > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::MediaFormatAudio > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_MediaFormatAudio_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatAudioVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::MediaFormatAudio > *arg1 = (std::vector< pj::MediaFormatAudio > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::MediaFormatAudio > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_MediaFormatAudio_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MediaFormatAudioVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  pj::MediaFormatAudio *arg1 = 0 ;
  int arg2 ;
  std::vector< pj::MediaFormatAudio > *result = 0 ;
  
  arg1 = (pj::MediaFormatAudio *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::MediaFormatAudio const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::MediaFormatAudio > *)std_vector_Sl_pj_MediaFormatAudio_Sg__Repeat((pj::MediaFormatAudio const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatAudioVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< pj::MediaFormatAudio > *arg1 = (std::vector< pj::MediaFormatAudio > *) 0 ;
  
  arg1 = (std::vector< pj::MediaFormatAudio > *)jarg1; 
  std_vector_Sl_pj_MediaFormatAudio_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatAudioVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::MediaFormatAudio > *arg1 = (std::vector< pj::MediaFormatAudio > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::MediaFormatAudio > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_MediaFormatAudio_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatAudioVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::MediaFormatAudio > *arg1 = (std::vector< pj::MediaFormatAudio > *) 0 ;
  int arg2 ;
  std::vector< pj::MediaFormatAudio > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::MediaFormatAudio > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::MediaFormatAudio > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::MediaFormatAudio > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_MediaFormatAudio_Sg__SetRange(arg1,arg2,(std::vector< pj::MediaFormatAudio > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MediaFormatAudioVector(void * jarg1) {
  std::vector< pj::MediaFormatAudio > *arg1 = (std::vector< pj::MediaFormatAudio > *) 0 ;
  
  arg1 = (std::vector< pj::MediaFormatAudio > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MediaFormatVideoVector__SWIG_0() {
  void * jresult ;
  std::vector< pj::MediaFormatVideo > *result = 0 ;
  
  result = (std::vector< pj::MediaFormatVideo > *)new std::vector< pj::MediaFormatVideo >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MediaFormatVideoVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< pj::MediaFormatVideo > *arg1 = 0 ;
  std::vector< pj::MediaFormatVideo > *result = 0 ;
  
  arg1 = (std::vector< pj::MediaFormatVideo > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::MediaFormatVideo > const & is null", 0);
    return 0;
  } 
  result = (std::vector< pj::MediaFormatVideo > *)new std::vector< pj::MediaFormatVideo >((std::vector< pj::MediaFormatVideo > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatVideoVector_Clear(void * jarg1) {
  std::vector< pj::MediaFormatVideo > *arg1 = (std::vector< pj::MediaFormatVideo > *) 0 ;
  
  arg1 = (std::vector< pj::MediaFormatVideo > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatVideoVector_Add(void * jarg1, void * jarg2) {
  std::vector< pj::MediaFormatVideo > *arg1 = (std::vector< pj::MediaFormatVideo > *) 0 ;
  pj::MediaFormatVideo *arg2 = 0 ;
  
  arg1 = (std::vector< pj::MediaFormatVideo > *)jarg1; 
  arg2 = (pj::MediaFormatVideo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::MediaFormatVideo const & is null", 0);
    return ;
  } 
  (arg1)->push_back((pj::MediaFormatVideo const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaFormatVideoVector_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::MediaFormatVideo > *arg1 = (std::vector< pj::MediaFormatVideo > *) 0 ;
  std::vector< pj::MediaFormatVideo >::size_type result;
  
  arg1 = (std::vector< pj::MediaFormatVideo > *)jarg1; 
  result = ((std::vector< pj::MediaFormatVideo > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaFormatVideoVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::MediaFormatVideo > *arg1 = (std::vector< pj::MediaFormatVideo > *) 0 ;
  bool result;
  
  arg1 = (std::vector< pj::MediaFormatVideo > *)jarg1; 
  result = (bool)((std::vector< pj::MediaFormatVideo > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaFormatVideoVector_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::MediaFormatVideo > *arg1 = (std::vector< pj::MediaFormatVideo > *) 0 ;
  std::vector< pj::MediaFormatVideo >::size_type result;
  
  arg1 = (std::vector< pj::MediaFormatVideo > *)jarg1; 
  result = ((std::vector< pj::MediaFormatVideo > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatVideoVector_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< pj::MediaFormatVideo > *arg1 = (std::vector< pj::MediaFormatVideo > *) 0 ;
  std::vector< pj::MediaFormatVideo >::size_type arg2 ;
  
  arg1 = (std::vector< pj::MediaFormatVideo > *)jarg1; 
  arg2 = (std::vector< pj::MediaFormatVideo >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MediaFormatVideoVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::MediaFormatVideo > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::MediaFormatVideo > *)new_std_vector_Sl_pj_MediaFormatVideo_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MediaFormatVideoVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::MediaFormatVideo > *arg1 = (std::vector< pj::MediaFormatVideo > *) 0 ;
  int arg2 ;
  pj::MediaFormatVideo result;
  
  arg1 = (std::vector< pj::MediaFormatVideo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_pj_MediaFormatVideo_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new pj::MediaFormatVideo(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MediaFormatVideoVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::MediaFormatVideo > *arg1 = (std::vector< pj::MediaFormatVideo > *) 0 ;
  int arg2 ;
  std::vector< pj::MediaFormatVideo >::value_type *result = 0 ;
  
  arg1 = (std::vector< pj::MediaFormatVideo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::MediaFormatVideo >::value_type *) &std_vector_Sl_pj_MediaFormatVideo_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatVideoVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::MediaFormatVideo > *arg1 = (std::vector< pj::MediaFormatVideo > *) 0 ;
  int arg2 ;
  pj::MediaFormatVideo *arg3 = 0 ;
  
  arg1 = (std::vector< pj::MediaFormatVideo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::MediaFormatVideo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::MediaFormatVideo const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_MediaFormatVideo_Sg__setitem(arg1,arg2,(pj::MediaFormatVideo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatVideoVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< pj::MediaFormatVideo > *arg1 = (std::vector< pj::MediaFormatVideo > *) 0 ;
  std::vector< pj::MediaFormatVideo > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::MediaFormatVideo > *)jarg1; 
  arg2 = (std::vector< pj::MediaFormatVideo > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::MediaFormatVideo > const & is null", 0);
    return ;
  } 
  std_vector_Sl_pj_MediaFormatVideo_Sg__AddRange(arg1,(std::vector< pj::MediaFormatVideo > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MediaFormatVideoVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::MediaFormatVideo > *arg1 = (std::vector< pj::MediaFormatVideo > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::MediaFormatVideo > *result = 0 ;
  
  arg1 = (std::vector< pj::MediaFormatVideo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::MediaFormatVideo > *)std_vector_Sl_pj_MediaFormatVideo_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatVideoVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::MediaFormatVideo > *arg1 = (std::vector< pj::MediaFormatVideo > *) 0 ;
  int arg2 ;
  pj::MediaFormatVideo *arg3 = 0 ;
  
  arg1 = (std::vector< pj::MediaFormatVideo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::MediaFormatVideo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::MediaFormatVideo const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_MediaFormatVideo_Sg__Insert(arg1,arg2,(pj::MediaFormatVideo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatVideoVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::MediaFormatVideo > *arg1 = (std::vector< pj::MediaFormatVideo > *) 0 ;
  int arg2 ;
  std::vector< pj::MediaFormatVideo > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::MediaFormatVideo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::MediaFormatVideo > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::MediaFormatVideo > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_MediaFormatVideo_Sg__InsertRange(arg1,arg2,(std::vector< pj::MediaFormatVideo > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatVideoVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< pj::MediaFormatVideo > *arg1 = (std::vector< pj::MediaFormatVideo > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::MediaFormatVideo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_MediaFormatVideo_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatVideoVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::MediaFormatVideo > *arg1 = (std::vector< pj::MediaFormatVideo > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::MediaFormatVideo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_MediaFormatVideo_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MediaFormatVideoVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  pj::MediaFormatVideo *arg1 = 0 ;
  int arg2 ;
  std::vector< pj::MediaFormatVideo > *result = 0 ;
  
  arg1 = (pj::MediaFormatVideo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::MediaFormatVideo const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::MediaFormatVideo > *)std_vector_Sl_pj_MediaFormatVideo_Sg__Repeat((pj::MediaFormatVideo const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatVideoVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< pj::MediaFormatVideo > *arg1 = (std::vector< pj::MediaFormatVideo > *) 0 ;
  
  arg1 = (std::vector< pj::MediaFormatVideo > *)jarg1; 
  std_vector_Sl_pj_MediaFormatVideo_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatVideoVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::MediaFormatVideo > *arg1 = (std::vector< pj::MediaFormatVideo > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::MediaFormatVideo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_MediaFormatVideo_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatVideoVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::MediaFormatVideo > *arg1 = (std::vector< pj::MediaFormatVideo > *) 0 ;
  int arg2 ;
  std::vector< pj::MediaFormatVideo > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::MediaFormatVideo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::MediaFormatVideo > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::MediaFormatVideo > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_MediaFormatVideo_Sg__SetRange(arg1,arg2,(std::vector< pj::MediaFormatVideo > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MediaFormatVideoVector(void * jarg1) {
  std::vector< pj::MediaFormatVideo > *arg1 = (std::vector< pj::MediaFormatVideo > *) 0 ;
  
  arg1 = (std::vector< pj::MediaFormatVideo > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CallMediaInfoVector__SWIG_0() {
  void * jresult ;
  std::vector< pj::CallMediaInfo > *result = 0 ;
  
  result = (std::vector< pj::CallMediaInfo > *)new std::vector< pj::CallMediaInfo >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CallMediaInfoVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< pj::CallMediaInfo > *arg1 = 0 ;
  std::vector< pj::CallMediaInfo > *result = 0 ;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::CallMediaInfo > const & is null", 0);
    return 0;
  } 
  result = (std::vector< pj::CallMediaInfo > *)new std::vector< pj::CallMediaInfo >((std::vector< pj::CallMediaInfo > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallMediaInfoVector_Clear(void * jarg1) {
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallMediaInfoVector_Add(void * jarg1, void * jarg2) {
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  pj::CallMediaInfo *arg2 = 0 ;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  arg2 = (pj::CallMediaInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CallMediaInfo const & is null", 0);
    return ;
  } 
  (arg1)->push_back((pj::CallMediaInfo const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CallMediaInfoVector_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  std::vector< pj::CallMediaInfo >::size_type result;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  result = ((std::vector< pj::CallMediaInfo > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CallMediaInfoVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  bool result;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  result = (bool)((std::vector< pj::CallMediaInfo > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CallMediaInfoVector_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  std::vector< pj::CallMediaInfo >::size_type result;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  result = ((std::vector< pj::CallMediaInfo > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallMediaInfoVector_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  std::vector< pj::CallMediaInfo >::size_type arg2 ;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  arg2 = (std::vector< pj::CallMediaInfo >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CallMediaInfoVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::CallMediaInfo > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::CallMediaInfo > *)new_std_vector_Sl_pj_CallMediaInfo_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CallMediaInfoVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  int arg2 ;
  pj::CallMediaInfo result;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_pj_CallMediaInfo_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new pj::CallMediaInfo(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CallMediaInfoVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  int arg2 ;
  std::vector< pj::CallMediaInfo >::value_type *result = 0 ;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::CallMediaInfo >::value_type *) &std_vector_Sl_pj_CallMediaInfo_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallMediaInfoVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  int arg2 ;
  pj::CallMediaInfo *arg3 = 0 ;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::CallMediaInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CallMediaInfo const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_CallMediaInfo_Sg__setitem(arg1,arg2,(pj::CallMediaInfo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallMediaInfoVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  std::vector< pj::CallMediaInfo > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  arg2 = (std::vector< pj::CallMediaInfo > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::CallMediaInfo > const & is null", 0);
    return ;
  } 
  std_vector_Sl_pj_CallMediaInfo_Sg__AddRange(arg1,(std::vector< pj::CallMediaInfo > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CallMediaInfoVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::CallMediaInfo > *result = 0 ;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::CallMediaInfo > *)std_vector_Sl_pj_CallMediaInfo_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallMediaInfoVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  int arg2 ;
  pj::CallMediaInfo *arg3 = 0 ;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::CallMediaInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CallMediaInfo const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_CallMediaInfo_Sg__Insert(arg1,arg2,(pj::CallMediaInfo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallMediaInfoVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  int arg2 ;
  std::vector< pj::CallMediaInfo > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::CallMediaInfo > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::CallMediaInfo > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_CallMediaInfo_Sg__InsertRange(arg1,arg2,(std::vector< pj::CallMediaInfo > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallMediaInfoVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_CallMediaInfo_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallMediaInfoVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_CallMediaInfo_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CallMediaInfoVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  pj::CallMediaInfo *arg1 = 0 ;
  int arg2 ;
  std::vector< pj::CallMediaInfo > *result = 0 ;
  
  arg1 = (pj::CallMediaInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CallMediaInfo const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::CallMediaInfo > *)std_vector_Sl_pj_CallMediaInfo_Sg__Repeat((pj::CallMediaInfo const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallMediaInfoVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  std_vector_Sl_pj_CallMediaInfo_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallMediaInfoVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_CallMediaInfo_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallMediaInfoVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  int arg2 ;
  std::vector< pj::CallMediaInfo > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::CallMediaInfo > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::CallMediaInfo > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_CallMediaInfo_Sg__SetRange(arg1,arg2,(std::vector< pj::CallMediaInfo > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CallMediaInfoVector(void * jarg1) {
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RtcpFbCapVector__SWIG_0() {
  void * jresult ;
  std::vector< pj::RtcpFbCap > *result = 0 ;
  
  result = (std::vector< pj::RtcpFbCap > *)new std::vector< pj::RtcpFbCap >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RtcpFbCapVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< pj::RtcpFbCap > *arg1 = 0 ;
  std::vector< pj::RtcpFbCap > *result = 0 ;
  
  arg1 = (std::vector< pj::RtcpFbCap > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::RtcpFbCap > const & is null", 0);
    return 0;
  } 
  result = (std::vector< pj::RtcpFbCap > *)new std::vector< pj::RtcpFbCap >((std::vector< pj::RtcpFbCap > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpFbCapVector_Clear(void * jarg1) {
  std::vector< pj::RtcpFbCap > *arg1 = (std::vector< pj::RtcpFbCap > *) 0 ;
  
  arg1 = (std::vector< pj::RtcpFbCap > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpFbCapVector_Add(void * jarg1, void * jarg2) {
  std::vector< pj::RtcpFbCap > *arg1 = (std::vector< pj::RtcpFbCap > *) 0 ;
  pj::RtcpFbCap *arg2 = 0 ;
  
  arg1 = (std::vector< pj::RtcpFbCap > *)jarg1; 
  arg2 = (pj::RtcpFbCap *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::RtcpFbCap const & is null", 0);
    return ;
  } 
  (arg1)->push_back((pj::RtcpFbCap const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RtcpFbCapVector_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::RtcpFbCap > *arg1 = (std::vector< pj::RtcpFbCap > *) 0 ;
  std::vector< pj::RtcpFbCap >::size_type result;
  
  arg1 = (std::vector< pj::RtcpFbCap > *)jarg1; 
  result = ((std::vector< pj::RtcpFbCap > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RtcpFbCapVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::RtcpFbCap > *arg1 = (std::vector< pj::RtcpFbCap > *) 0 ;
  bool result;
  
  arg1 = (std::vector< pj::RtcpFbCap > *)jarg1; 
  result = (bool)((std::vector< pj::RtcpFbCap > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RtcpFbCapVector_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::RtcpFbCap > *arg1 = (std::vector< pj::RtcpFbCap > *) 0 ;
  std::vector< pj::RtcpFbCap >::size_type result;
  
  arg1 = (std::vector< pj::RtcpFbCap > *)jarg1; 
  result = ((std::vector< pj::RtcpFbCap > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpFbCapVector_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< pj::RtcpFbCap > *arg1 = (std::vector< pj::RtcpFbCap > *) 0 ;
  std::vector< pj::RtcpFbCap >::size_type arg2 ;
  
  arg1 = (std::vector< pj::RtcpFbCap > *)jarg1; 
  arg2 = (std::vector< pj::RtcpFbCap >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RtcpFbCapVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::RtcpFbCap > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::RtcpFbCap > *)new_std_vector_Sl_pj_RtcpFbCap_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RtcpFbCapVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::RtcpFbCap > *arg1 = (std::vector< pj::RtcpFbCap > *) 0 ;
  int arg2 ;
  pj::RtcpFbCap result;
  
  arg1 = (std::vector< pj::RtcpFbCap > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_pj_RtcpFbCap_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new pj::RtcpFbCap(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RtcpFbCapVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::RtcpFbCap > *arg1 = (std::vector< pj::RtcpFbCap > *) 0 ;
  int arg2 ;
  std::vector< pj::RtcpFbCap >::value_type *result = 0 ;
  
  arg1 = (std::vector< pj::RtcpFbCap > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::RtcpFbCap >::value_type *) &std_vector_Sl_pj_RtcpFbCap_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpFbCapVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::RtcpFbCap > *arg1 = (std::vector< pj::RtcpFbCap > *) 0 ;
  int arg2 ;
  pj::RtcpFbCap *arg3 = 0 ;
  
  arg1 = (std::vector< pj::RtcpFbCap > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::RtcpFbCap *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::RtcpFbCap const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_RtcpFbCap_Sg__setitem(arg1,arg2,(pj::RtcpFbCap const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpFbCapVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< pj::RtcpFbCap > *arg1 = (std::vector< pj::RtcpFbCap > *) 0 ;
  std::vector< pj::RtcpFbCap > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::RtcpFbCap > *)jarg1; 
  arg2 = (std::vector< pj::RtcpFbCap > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::RtcpFbCap > const & is null", 0);
    return ;
  } 
  std_vector_Sl_pj_RtcpFbCap_Sg__AddRange(arg1,(std::vector< pj::RtcpFbCap > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RtcpFbCapVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::RtcpFbCap > *arg1 = (std::vector< pj::RtcpFbCap > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::RtcpFbCap > *result = 0 ;
  
  arg1 = (std::vector< pj::RtcpFbCap > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::RtcpFbCap > *)std_vector_Sl_pj_RtcpFbCap_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpFbCapVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::RtcpFbCap > *arg1 = (std::vector< pj::RtcpFbCap > *) 0 ;
  int arg2 ;
  pj::RtcpFbCap *arg3 = 0 ;
  
  arg1 = (std::vector< pj::RtcpFbCap > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::RtcpFbCap *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::RtcpFbCap const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_RtcpFbCap_Sg__Insert(arg1,arg2,(pj::RtcpFbCap const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpFbCapVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::RtcpFbCap > *arg1 = (std::vector< pj::RtcpFbCap > *) 0 ;
  int arg2 ;
  std::vector< pj::RtcpFbCap > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::RtcpFbCap > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::RtcpFbCap > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::RtcpFbCap > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_RtcpFbCap_Sg__InsertRange(arg1,arg2,(std::vector< pj::RtcpFbCap > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpFbCapVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< pj::RtcpFbCap > *arg1 = (std::vector< pj::RtcpFbCap > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::RtcpFbCap > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_RtcpFbCap_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpFbCapVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::RtcpFbCap > *arg1 = (std::vector< pj::RtcpFbCap > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::RtcpFbCap > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_RtcpFbCap_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RtcpFbCapVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  pj::RtcpFbCap *arg1 = 0 ;
  int arg2 ;
  std::vector< pj::RtcpFbCap > *result = 0 ;
  
  arg1 = (pj::RtcpFbCap *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::RtcpFbCap const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::RtcpFbCap > *)std_vector_Sl_pj_RtcpFbCap_Sg__Repeat((pj::RtcpFbCap const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpFbCapVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< pj::RtcpFbCap > *arg1 = (std::vector< pj::RtcpFbCap > *) 0 ;
  
  arg1 = (std::vector< pj::RtcpFbCap > *)jarg1; 
  std_vector_Sl_pj_RtcpFbCap_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpFbCapVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::RtcpFbCap > *arg1 = (std::vector< pj::RtcpFbCap > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::RtcpFbCap > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_RtcpFbCap_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpFbCapVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::RtcpFbCap > *arg1 = (std::vector< pj::RtcpFbCap > *) 0 ;
  int arg2 ;
  std::vector< pj::RtcpFbCap > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::RtcpFbCap > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::RtcpFbCap > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::RtcpFbCap > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_RtcpFbCap_Sg__SetRange(arg1,arg2,(std::vector< pj::RtcpFbCap > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RtcpFbCapVector(void * jarg1) {
  std::vector< pj::RtcpFbCap > *arg1 = (std::vector< pj::RtcpFbCap > *) 0 ;
  
  arg1 = (std::vector< pj::RtcpFbCap > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SslCertNameVector__SWIG_0() {
  void * jresult ;
  std::vector< pj::SslCertName > *result = 0 ;
  
  result = (std::vector< pj::SslCertName > *)new std::vector< pj::SslCertName >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SslCertNameVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< pj::SslCertName > *arg1 = 0 ;
  std::vector< pj::SslCertName > *result = 0 ;
  
  arg1 = (std::vector< pj::SslCertName > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::SslCertName > const & is null", 0);
    return 0;
  } 
  result = (std::vector< pj::SslCertName > *)new std::vector< pj::SslCertName >((std::vector< pj::SslCertName > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SslCertNameVector_Clear(void * jarg1) {
  std::vector< pj::SslCertName > *arg1 = (std::vector< pj::SslCertName > *) 0 ;
  
  arg1 = (std::vector< pj::SslCertName > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SslCertNameVector_Add(void * jarg1, void * jarg2) {
  std::vector< pj::SslCertName > *arg1 = (std::vector< pj::SslCertName > *) 0 ;
  pj::SslCertName *arg2 = 0 ;
  
  arg1 = (std::vector< pj::SslCertName > *)jarg1; 
  arg2 = (pj::SslCertName *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SslCertName const & is null", 0);
    return ;
  } 
  (arg1)->push_back((pj::SslCertName const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SslCertNameVector_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::SslCertName > *arg1 = (std::vector< pj::SslCertName > *) 0 ;
  std::vector< pj::SslCertName >::size_type result;
  
  arg1 = (std::vector< pj::SslCertName > *)jarg1; 
  result = ((std::vector< pj::SslCertName > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SslCertNameVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::SslCertName > *arg1 = (std::vector< pj::SslCertName > *) 0 ;
  bool result;
  
  arg1 = (std::vector< pj::SslCertName > *)jarg1; 
  result = (bool)((std::vector< pj::SslCertName > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SslCertNameVector_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< pj::SslCertName > *arg1 = (std::vector< pj::SslCertName > *) 0 ;
  std::vector< pj::SslCertName >::size_type result;
  
  arg1 = (std::vector< pj::SslCertName > *)jarg1; 
  result = ((std::vector< pj::SslCertName > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SslCertNameVector_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< pj::SslCertName > *arg1 = (std::vector< pj::SslCertName > *) 0 ;
  std::vector< pj::SslCertName >::size_type arg2 ;
  
  arg1 = (std::vector< pj::SslCertName > *)jarg1; 
  arg2 = (std::vector< pj::SslCertName >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SslCertNameVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::SslCertName > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::SslCertName > *)new_std_vector_Sl_pj_SslCertName_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SslCertNameVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::SslCertName > *arg1 = (std::vector< pj::SslCertName > *) 0 ;
  int arg2 ;
  pj::SslCertName result;
  
  arg1 = (std::vector< pj::SslCertName > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_pj_SslCertName_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new pj::SslCertName(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SslCertNameVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::SslCertName > *arg1 = (std::vector< pj::SslCertName > *) 0 ;
  int arg2 ;
  std::vector< pj::SslCertName >::value_type *result = 0 ;
  
  arg1 = (std::vector< pj::SslCertName > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::SslCertName >::value_type *) &std_vector_Sl_pj_SslCertName_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SslCertNameVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::SslCertName > *arg1 = (std::vector< pj::SslCertName > *) 0 ;
  int arg2 ;
  pj::SslCertName *arg3 = 0 ;
  
  arg1 = (std::vector< pj::SslCertName > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::SslCertName *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SslCertName const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_SslCertName_Sg__setitem(arg1,arg2,(pj::SslCertName const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SslCertNameVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< pj::SslCertName > *arg1 = (std::vector< pj::SslCertName > *) 0 ;
  std::vector< pj::SslCertName > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::SslCertName > *)jarg1; 
  arg2 = (std::vector< pj::SslCertName > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::SslCertName > const & is null", 0);
    return ;
  } 
  std_vector_Sl_pj_SslCertName_Sg__AddRange(arg1,(std::vector< pj::SslCertName > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SslCertNameVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::SslCertName > *arg1 = (std::vector< pj::SslCertName > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::SslCertName > *result = 0 ;
  
  arg1 = (std::vector< pj::SslCertName > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::SslCertName > *)std_vector_Sl_pj_SslCertName_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SslCertNameVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::SslCertName > *arg1 = (std::vector< pj::SslCertName > *) 0 ;
  int arg2 ;
  pj::SslCertName *arg3 = 0 ;
  
  arg1 = (std::vector< pj::SslCertName > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::SslCertName *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SslCertName const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_SslCertName_Sg__Insert(arg1,arg2,(pj::SslCertName const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SslCertNameVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::SslCertName > *arg1 = (std::vector< pj::SslCertName > *) 0 ;
  int arg2 ;
  std::vector< pj::SslCertName > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::SslCertName > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::SslCertName > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::SslCertName > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_SslCertName_Sg__InsertRange(arg1,arg2,(std::vector< pj::SslCertName > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SslCertNameVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< pj::SslCertName > *arg1 = (std::vector< pj::SslCertName > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::SslCertName > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_SslCertName_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SslCertNameVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::SslCertName > *arg1 = (std::vector< pj::SslCertName > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::SslCertName > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_SslCertName_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SslCertNameVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  pj::SslCertName *arg1 = 0 ;
  int arg2 ;
  std::vector< pj::SslCertName > *result = 0 ;
  
  arg1 = (pj::SslCertName *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SslCertName const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::SslCertName > *)std_vector_Sl_pj_SslCertName_Sg__Repeat((pj::SslCertName const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SslCertNameVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< pj::SslCertName > *arg1 = (std::vector< pj::SslCertName > *) 0 ;
  
  arg1 = (std::vector< pj::SslCertName > *)jarg1; 
  std_vector_Sl_pj_SslCertName_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SslCertNameVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::SslCertName > *arg1 = (std::vector< pj::SslCertName > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::SslCertName > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_SslCertName_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SslCertNameVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::SslCertName > *arg1 = (std::vector< pj::SslCertName > *) 0 ;
  int arg2 ;
  std::vector< pj::SslCertName > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::SslCertName > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::SslCertName > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::SslCertName > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_SslCertName_Sg__SetRange(arg1,arg2,(std::vector< pj::SslCertName > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SslCertNameVector(void * jarg1) {
  std::vector< pj::SslCertName > *arg1 = (std::vector< pj::SslCertName > *) 0 ;
  
  arg1 = (std::vector< pj::SslCertName > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormat_id_set(void * jarg1, unsigned int jarg2) {
  pj::MediaFormat *arg1 = (pj::MediaFormat *) 0 ;
  pj_uint32_t arg2 ;
  
  arg1 = (pj::MediaFormat *)jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaFormat_id_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaFormat *arg1 = (pj::MediaFormat *) 0 ;
  pj_uint32_t result;
  
  arg1 = (pj::MediaFormat *)jarg1; 
  result = (pj_uint32_t) ((arg1)->id);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormat_type_set(void * jarg1, int jarg2) {
  pj::MediaFormat *arg1 = (pj::MediaFormat *) 0 ;
  pjmedia_type arg2 ;
  
  arg1 = (pj::MediaFormat *)jarg1; 
  arg2 = (pjmedia_type)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MediaFormat_type_get(void * jarg1) {
  int jresult ;
  pj::MediaFormat *arg1 = (pj::MediaFormat *) 0 ;
  pjmedia_type result;
  
  arg1 = (pj::MediaFormat *)jarg1; 
  result = (pjmedia_type) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MediaFormat() {
  void * jresult ;
  pj::MediaFormat *result = 0 ;
  
  result = (pj::MediaFormat *)new pj::MediaFormat();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MediaFormat(void * jarg1) {
  pj::MediaFormat *arg1 = (pj::MediaFormat *) 0 ;
  
  arg1 = (pj::MediaFormat *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatAudio_clockRate_set(void * jarg1, unsigned int jarg2) {
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaFormatAudio *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->clockRate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaFormatAudio_clockRate_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaFormatAudio *)jarg1; 
  result = (unsigned int) ((arg1)->clockRate);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatAudio_channelCount_set(void * jarg1, unsigned int jarg2) {
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaFormatAudio *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->channelCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaFormatAudio_channelCount_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaFormatAudio *)jarg1; 
  result = (unsigned int) ((arg1)->channelCount);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatAudio_frameTimeUsec_set(void * jarg1, unsigned int jarg2) {
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaFormatAudio *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->frameTimeUsec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaFormatAudio_frameTimeUsec_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaFormatAudio *)jarg1; 
  result = (unsigned int) ((arg1)->frameTimeUsec);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatAudio_bitsPerSample_set(void * jarg1, unsigned int jarg2) {
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaFormatAudio *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->bitsPerSample = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaFormatAudio_bitsPerSample_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaFormatAudio *)jarg1; 
  result = (unsigned int) ((arg1)->bitsPerSample);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatAudio_avgBps_set(void * jarg1, unsigned int jarg2) {
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  pj_uint32_t arg2 ;
  
  arg1 = (pj::MediaFormatAudio *)jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  if (arg1) (arg1)->avgBps = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaFormatAudio_avgBps_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  pj_uint32_t result;
  
  arg1 = (pj::MediaFormatAudio *)jarg1; 
  result = (pj_uint32_t) ((arg1)->avgBps);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatAudio_maxBps_set(void * jarg1, unsigned int jarg2) {
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  pj_uint32_t arg2 ;
  
  arg1 = (pj::MediaFormatAudio *)jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  if (arg1) (arg1)->maxBps = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaFormatAudio_maxBps_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  pj_uint32_t result;
  
  arg1 = (pj::MediaFormatAudio *)jarg1; 
  result = (pj_uint32_t) ((arg1)->maxBps);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MediaFormatAudio() {
  void * jresult ;
  pj::MediaFormatAudio *result = 0 ;
  
  result = (pj::MediaFormatAudio *)new pj::MediaFormatAudio();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatAudio_init__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5, int jarg6, unsigned int jarg7, unsigned int jarg8) {
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  pj_uint32_t arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  int arg5 ;
  int arg6 ;
  pj_uint32_t arg7 ;
  pj_uint32_t arg8 ;
  
  arg1 = (pj::MediaFormatAudio *)jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (pj_uint32_t)jarg7; 
  arg8 = (pj_uint32_t)jarg8; 
  (arg1)->init(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatAudio_init__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5, int jarg6, unsigned int jarg7) {
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  pj_uint32_t arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  int arg5 ;
  int arg6 ;
  pj_uint32_t arg7 ;
  
  arg1 = (pj::MediaFormatAudio *)jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (pj_uint32_t)jarg7; 
  (arg1)->init(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatAudio_init__SWIG_2(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5, int jarg6) {
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  pj_uint32_t arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = (pj::MediaFormatAudio *)jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->init(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MediaFormatAudio(void * jarg1) {
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  
  arg1 = (pj::MediaFormatAudio *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatVideo_width_set(void * jarg1, unsigned int jarg2) {
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaFormatVideo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaFormatVideo_width_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaFormatVideo *)jarg1; 
  result = (unsigned int) ((arg1)->width);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatVideo_height_set(void * jarg1, unsigned int jarg2) {
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaFormatVideo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaFormatVideo_height_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaFormatVideo *)jarg1; 
  result = (unsigned int) ((arg1)->height);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatVideo_fpsNum_set(void * jarg1, int jarg2) {
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  int arg2 ;
  
  arg1 = (pj::MediaFormatVideo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->fpsNum = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MediaFormatVideo_fpsNum_get(void * jarg1) {
  int jresult ;
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  int result;
  
  arg1 = (pj::MediaFormatVideo *)jarg1; 
  result = (int) ((arg1)->fpsNum);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatVideo_fpsDenum_set(void * jarg1, int jarg2) {
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  int arg2 ;
  
  arg1 = (pj::MediaFormatVideo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->fpsDenum = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MediaFormatVideo_fpsDenum_get(void * jarg1) {
  int jresult ;
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  int result;
  
  arg1 = (pj::MediaFormatVideo *)jarg1; 
  result = (int) ((arg1)->fpsDenum);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatVideo_avgBps_set(void * jarg1, unsigned int jarg2) {
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  pj_uint32_t arg2 ;
  
  arg1 = (pj::MediaFormatVideo *)jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  if (arg1) (arg1)->avgBps = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaFormatVideo_avgBps_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  pj_uint32_t result;
  
  arg1 = (pj::MediaFormatVideo *)jarg1; 
  result = (pj_uint32_t) ((arg1)->avgBps);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatVideo_maxBps_set(void * jarg1, unsigned int jarg2) {
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  pj_uint32_t arg2 ;
  
  arg1 = (pj::MediaFormatVideo *)jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  if (arg1) (arg1)->maxBps = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaFormatVideo_maxBps_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  pj_uint32_t result;
  
  arg1 = (pj::MediaFormatVideo *)jarg1; 
  result = (pj_uint32_t) ((arg1)->maxBps);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MediaFormatVideo() {
  void * jresult ;
  pj::MediaFormatVideo *result = 0 ;
  
  result = (pj::MediaFormatVideo *)new pj::MediaFormatVideo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatVideo_init__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5, int jarg6, unsigned int jarg7, unsigned int jarg8) {
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  pj_uint32_t arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  int arg5 ;
  int arg6 ;
  pj_uint32_t arg7 ;
  pj_uint32_t arg8 ;
  
  arg1 = (pj::MediaFormatVideo *)jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (pj_uint32_t)jarg7; 
  arg8 = (pj_uint32_t)jarg8; 
  (arg1)->init(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatVideo_init__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5, int jarg6, unsigned int jarg7) {
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  pj_uint32_t arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  int arg5 ;
  int arg6 ;
  pj_uint32_t arg7 ;
  
  arg1 = (pj::MediaFormatVideo *)jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (pj_uint32_t)jarg7; 
  (arg1)->init(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatVideo_init__SWIG_2(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5, int jarg6) {
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  pj_uint32_t arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = (pj::MediaFormatVideo *)jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->init(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFormatVideo_init__SWIG_3(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5) {
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  pj_uint32_t arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  int arg5 ;
  
  arg1 = (pj::MediaFormatVideo *)jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->init(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MediaFormatVideo(void * jarg1) {
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  
  arg1 = (pj::MediaFormatVideo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConfPortInfo_portId_set(void * jarg1, int jarg2) {
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  int arg2 ;
  
  arg1 = (pj::ConfPortInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->portId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ConfPortInfo_portId_get(void * jarg1) {
  int jresult ;
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  int result;
  
  arg1 = (pj::ConfPortInfo *)jarg1; 
  result = (int) ((arg1)->portId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConfPortInfo_name_set(void * jarg1, const char * jarg2) {
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::ConfPortInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ConfPortInfo_name_get(void * jarg1) {
  const char * jresult ;
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::ConfPortInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConfPortInfo_format_set(void * jarg1, void * jarg2) {
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  pj::MediaFormatAudio *arg2 = (pj::MediaFormatAudio *) 0 ;
  
  arg1 = (pj::ConfPortInfo *)jarg1; 
  arg2 = (pj::MediaFormatAudio *)jarg2; 
  if (arg1) (arg1)->format = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConfPortInfo_format_get(void * jarg1) {
  void * jresult ;
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  pj::MediaFormatAudio *result = 0 ;
  
  arg1 = (pj::ConfPortInfo *)jarg1; 
  result = (pj::MediaFormatAudio *)& ((arg1)->format);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConfPortInfo_txLevelAdj_set(void * jarg1, float jarg2) {
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  float arg2 ;
  
  arg1 = (pj::ConfPortInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->txLevelAdj = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ConfPortInfo_txLevelAdj_get(void * jarg1) {
  float jresult ;
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  float result;
  
  arg1 = (pj::ConfPortInfo *)jarg1; 
  result = (float) ((arg1)->txLevelAdj);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConfPortInfo_rxLevelAdj_set(void * jarg1, float jarg2) {
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  float arg2 ;
  
  arg1 = (pj::ConfPortInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->rxLevelAdj = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ConfPortInfo_rxLevelAdj_get(void * jarg1) {
  float jresult ;
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  float result;
  
  arg1 = (pj::ConfPortInfo *)jarg1; 
  result = (float) ((arg1)->rxLevelAdj);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConfPortInfo_listeners_set(void * jarg1, void * jarg2) {
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  pj::IntVector *arg2 = (pj::IntVector *) 0 ;
  
  arg1 = (pj::ConfPortInfo *)jarg1; 
  arg2 = (pj::IntVector *)jarg2; 
  if (arg1) (arg1)->listeners = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConfPortInfo_listeners_get(void * jarg1) {
  void * jresult ;
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  pj::IntVector *result = 0 ;
  
  arg1 = (pj::ConfPortInfo *)jarg1; 
  result = (pj::IntVector *)& ((arg1)->listeners);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ConfPortInfo() {
  void * jresult ;
  pj::ConfPortInfo *result = 0 ;
  
  result = (pj::ConfPortInfo *)new pj::ConfPortInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ConfPortInfo(void * jarg1) {
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  
  arg1 = (pj::ConfPortInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Media(void * jarg1) {
  pj::Media *arg1 = (pj::Media *) 0 ;
  
  arg1 = (pj::Media *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Media_getType(void * jarg1) {
  int jresult ;
  pj::Media *arg1 = (pj::Media *) 0 ;
  pjmedia_type result;
  
  arg1 = (pj::Media *)jarg1; 
  result = (pjmedia_type)((pj::Media const *)arg1)->getType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaTransmitParam_level_set(void * jarg1, float jarg2) {
  pj::AudioMediaTransmitParam *arg1 = (pj::AudioMediaTransmitParam *) 0 ;
  float arg2 ;
  
  arg1 = (pj::AudioMediaTransmitParam *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->level = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AudioMediaTransmitParam_level_get(void * jarg1) {
  float jresult ;
  pj::AudioMediaTransmitParam *arg1 = (pj::AudioMediaTransmitParam *) 0 ;
  float result;
  
  arg1 = (pj::AudioMediaTransmitParam *)jarg1; 
  result = (float) ((arg1)->level);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AudioMediaTransmitParam() {
  void * jresult ;
  pj::AudioMediaTransmitParam *result = 0 ;
  
  result = (pj::AudioMediaTransmitParam *)new pj::AudioMediaTransmitParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AudioMediaTransmitParam(void * jarg1) {
  pj::AudioMediaTransmitParam *arg1 = (pj::AudioMediaTransmitParam *) 0 ;
  
  arg1 = (pj::AudioMediaTransmitParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioMedia_getPortInfo(void * jarg1) {
  void * jresult ;
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  pj::ConfPortInfo result;
  
  arg1 = (pj::AudioMedia *)jarg1; 
  try {
    result = ((pj::AudioMedia const *)arg1)->getPortInfo();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::ConfPortInfo(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioMedia_getPortId(void * jarg1) {
  int jresult ;
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  int result;
  
  arg1 = (pj::AudioMedia *)jarg1; 
  result = (int)((pj::AudioMedia const *)arg1)->getPortId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioMedia_getPortInfoFromId(int jarg1) {
  void * jresult ;
  int arg1 ;
  pj::ConfPortInfo result;
  
  arg1 = (int)jarg1; 
  try {
    result = pj::AudioMedia::getPortInfoFromId(arg1);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::ConfPortInfo(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMedia_startTransmit(void * jarg1, void * jarg2) {
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  pj::AudioMedia *arg2 = 0 ;
  
  arg1 = (pj::AudioMedia *)jarg1; 
  arg2 = (pj::AudioMedia *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AudioMedia const & is null", 0);
    return ;
  } 
  try {
    ((pj::AudioMedia const *)arg1)->startTransmit((pj::AudioMedia const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMedia_startTransmit2(void * jarg1, void * jarg2, void * jarg3) {
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  pj::AudioMedia *arg2 = 0 ;
  pj::AudioMediaTransmitParam *arg3 = 0 ;
  
  arg1 = (pj::AudioMedia *)jarg1; 
  arg2 = (pj::AudioMedia *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AudioMedia const & is null", 0);
    return ;
  } 
  arg3 = (pj::AudioMediaTransmitParam *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AudioMediaTransmitParam const & is null", 0);
    return ;
  } 
  try {
    ((pj::AudioMedia const *)arg1)->startTransmit2((pj::AudioMedia const &)*arg2,(pj::AudioMediaTransmitParam const &)*arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMedia_stopTransmit(void * jarg1, void * jarg2) {
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  pj::AudioMedia *arg2 = 0 ;
  
  arg1 = (pj::AudioMedia *)jarg1; 
  arg2 = (pj::AudioMedia *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AudioMedia const & is null", 0);
    return ;
  } 
  try {
    ((pj::AudioMedia const *)arg1)->stopTransmit((pj::AudioMedia const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMedia_adjustRxLevel(void * jarg1, float jarg2) {
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  float arg2 ;
  
  arg1 = (pj::AudioMedia *)jarg1; 
  arg2 = (float)jarg2; 
  try {
    (arg1)->adjustRxLevel(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMedia_adjustTxLevel(void * jarg1, float jarg2) {
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  float arg2 ;
  
  arg1 = (pj::AudioMedia *)jarg1; 
  arg2 = (float)jarg2; 
  try {
    (arg1)->adjustTxLevel(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioMedia_getRxLevel(void * jarg1) {
  unsigned int jresult ;
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudioMedia *)jarg1; 
  try {
    result = (unsigned int)((pj::AudioMedia const *)arg1)->getRxLevel();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioMedia_getTxLevel(void * jarg1) {
  unsigned int jresult ;
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudioMedia *)jarg1; 
  try {
    result = (unsigned int)((pj::AudioMedia const *)arg1)->getTxLevel();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioMedia_typecastFromMedia(void * jarg1) {
  void * jresult ;
  pj::Media *arg1 = (pj::Media *) 0 ;
  pj::AudioMedia *result = 0 ;
  
  arg1 = (pj::Media *)jarg1; 
  result = (pj::AudioMedia *)pj::AudioMedia::typecastFromMedia(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AudioMedia() {
  void * jresult ;
  pj::AudioMedia *result = 0 ;
  
  result = (pj::AudioMedia *)new pj::AudioMedia();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AudioMedia(void * jarg1) {
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  
  arg1 = (pj::AudioMedia *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFrame_type_set(void * jarg1, int jarg2) {
  pj::MediaFrame *arg1 = (pj::MediaFrame *) 0 ;
  pjmedia_frame_type arg2 ;
  
  arg1 = (pj::MediaFrame *)jarg1; 
  arg2 = (pjmedia_frame_type)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MediaFrame_type_get(void * jarg1) {
  int jresult ;
  pj::MediaFrame *arg1 = (pj::MediaFrame *) 0 ;
  pjmedia_frame_type result;
  
  arg1 = (pj::MediaFrame *)jarg1; 
  result = (pjmedia_frame_type) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFrame_buf_set(void * jarg1, void * jarg2) {
  pj::MediaFrame *arg1 = (pj::MediaFrame *) 0 ;
  pj::ByteVector *arg2 = (pj::ByteVector *) 0 ;
  
  arg1 = (pj::MediaFrame *)jarg1; 
  arg2 = (pj::ByteVector *)jarg2; 
  if (arg1) (arg1)->buf = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MediaFrame_buf_get(void * jarg1) {
  void * jresult ;
  pj::MediaFrame *arg1 = (pj::MediaFrame *) 0 ;
  pj::ByteVector *result = 0 ;
  
  arg1 = (pj::MediaFrame *)jarg1; 
  result = (pj::ByteVector *)& ((arg1)->buf);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFrame_size_set(void * jarg1, unsigned int jarg2) {
  pj::MediaFrame *arg1 = (pj::MediaFrame *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaFrame *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaFrame_size_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaFrame *arg1 = (pj::MediaFrame *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaFrame *)jarg1; 
  result = (unsigned int) ((arg1)->size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MediaFrame() {
  void * jresult ;
  pj::MediaFrame *result = 0 ;
  
  result = (pj::MediaFrame *)new pj::MediaFrame();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MediaFrame(void * jarg1) {
  pj::MediaFrame *arg1 = (pj::MediaFrame *) 0 ;
  
  arg1 = (pj::MediaFrame *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AudioMediaPort() {
  void * jresult ;
  pj::AudioMediaPort *result = 0 ;
  
  result = (pj::AudioMediaPort *)new SwigDirector_AudioMediaPort();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AudioMediaPort(void * jarg1) {
  pj::AudioMediaPort *arg1 = (pj::AudioMediaPort *) 0 ;
  
  arg1 = (pj::AudioMediaPort *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaPort_createPort(void * jarg1, const char * jarg2, void * jarg3) {
  pj::AudioMediaPort *arg1 = (pj::AudioMediaPort *) 0 ;
  pj::string *arg2 = 0 ;
  pj::MediaFormatAudio *arg3 = 0 ;
  
  arg1 = (pj::AudioMediaPort *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (pj::MediaFormatAudio *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::MediaFormatAudio & is null", 0);
    return ;
  } 
  try {
    (arg1)->createPort((pj::string const &)*arg2,*arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaPort_onFrameRequested(void * jarg1, void * jarg2) {
  pj::AudioMediaPort *arg1 = (pj::AudioMediaPort *) 0 ;
  pj::MediaFrame *arg2 = 0 ;
  
  arg1 = (pj::AudioMediaPort *)jarg1; 
  arg2 = (pj::MediaFrame *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::MediaFrame & is null", 0);
    return ;
  } 
  (arg1)->onFrameRequested(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaPort_onFrameRequestedSwigExplicitAudioMediaPort(void * jarg1, void * jarg2) {
  pj::AudioMediaPort *arg1 = (pj::AudioMediaPort *) 0 ;
  pj::MediaFrame *arg2 = 0 ;
  
  arg1 = (pj::AudioMediaPort *)jarg1; 
  arg2 = (pj::MediaFrame *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::MediaFrame & is null", 0);
    return ;
  } 
  (arg1)->pj::AudioMediaPort::onFrameRequested(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaPort_onFrameReceived(void * jarg1, void * jarg2) {
  pj::AudioMediaPort *arg1 = (pj::AudioMediaPort *) 0 ;
  pj::MediaFrame *arg2 = 0 ;
  
  arg1 = (pj::AudioMediaPort *)jarg1; 
  arg2 = (pj::MediaFrame *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::MediaFrame & is null", 0);
    return ;
  } 
  (arg1)->onFrameReceived(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaPort_onFrameReceivedSwigExplicitAudioMediaPort(void * jarg1, void * jarg2) {
  pj::AudioMediaPort *arg1 = (pj::AudioMediaPort *) 0 ;
  pj::MediaFrame *arg2 = 0 ;
  
  arg1 = (pj::AudioMediaPort *)jarg1; 
  arg2 = (pj::MediaFrame *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::MediaFrame & is null", 0);
    return ;
  } 
  (arg1)->pj::AudioMediaPort::onFrameReceived(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaPort_director_connect(void *objarg, SwigDirector_AudioMediaPort::SWIG_Callback0_t callback0, SwigDirector_AudioMediaPort::SWIG_Callback1_t callback1) {
  pj::AudioMediaPort *obj = (pj::AudioMediaPort *)objarg;
  SwigDirector_AudioMediaPort *director = static_cast<SwigDirector_AudioMediaPort *>(obj);
  director->swig_connect_director(callback0, callback1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaPlayerInfo_formatId_set(void * jarg1, int jarg2) {
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  pjmedia_format_id arg2 ;
  
  arg1 = (pj::AudioMediaPlayerInfo *)jarg1; 
  arg2 = (pjmedia_format_id)jarg2; 
  if (arg1) (arg1)->formatId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioMediaPlayerInfo_formatId_get(void * jarg1) {
  int jresult ;
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  pjmedia_format_id result;
  
  arg1 = (pj::AudioMediaPlayerInfo *)jarg1; 
  result = (pjmedia_format_id) ((arg1)->formatId);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaPlayerInfo_payloadBitsPerSample_set(void * jarg1, unsigned int jarg2) {
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AudioMediaPlayerInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->payloadBitsPerSample = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioMediaPlayerInfo_payloadBitsPerSample_get(void * jarg1) {
  unsigned int jresult ;
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudioMediaPlayerInfo *)jarg1; 
  result = (unsigned int) ((arg1)->payloadBitsPerSample);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaPlayerInfo_sizeBytes_set(void * jarg1, unsigned int jarg2) {
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  pj_uint32_t arg2 ;
  
  arg1 = (pj::AudioMediaPlayerInfo *)jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  if (arg1) (arg1)->sizeBytes = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioMediaPlayerInfo_sizeBytes_get(void * jarg1) {
  unsigned int jresult ;
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  pj_uint32_t result;
  
  arg1 = (pj::AudioMediaPlayerInfo *)jarg1; 
  result = (pj_uint32_t) ((arg1)->sizeBytes);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaPlayerInfo_sizeSamples_set(void * jarg1, unsigned int jarg2) {
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  pj_uint32_t arg2 ;
  
  arg1 = (pj::AudioMediaPlayerInfo *)jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  if (arg1) (arg1)->sizeSamples = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioMediaPlayerInfo_sizeSamples_get(void * jarg1) {
  unsigned int jresult ;
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  pj_uint32_t result;
  
  arg1 = (pj::AudioMediaPlayerInfo *)jarg1; 
  result = (pj_uint32_t) ((arg1)->sizeSamples);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AudioMediaPlayerInfo() {
  void * jresult ;
  pj::AudioMediaPlayerInfo *result = 0 ;
  
  result = (pj::AudioMediaPlayerInfo *)new pj::AudioMediaPlayerInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AudioMediaPlayerInfo(void * jarg1) {
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  
  arg1 = (pj::AudioMediaPlayerInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AudioMediaPlayer() {
  void * jresult ;
  pj::AudioMediaPlayer *result = 0 ;
  
  result = (pj::AudioMediaPlayer *)new SwigDirector_AudioMediaPlayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaPlayer_createPlayer__SWIG_0(void * jarg1, const char * jarg2, unsigned int jarg3) {
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  pj::string *arg2 = 0 ;
  unsigned int arg3 ;
  
  arg1 = (pj::AudioMediaPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (unsigned int)jarg3; 
  try {
    (arg1)->createPlayer((pj::string const &)*arg2,arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaPlayer_createPlayer__SWIG_1(void * jarg1, const char * jarg2) {
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AudioMediaPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->createPlayer((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaPlayer_createPlaylist__SWIG_0(void * jarg1, void * jarg2, const char * jarg3, unsigned int jarg4) {
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  pj::StringVector *arg2 = 0 ;
  pj::string *arg3 = 0 ;
  unsigned int arg4 ;
  
  arg1 = (pj::AudioMediaPlayer *)jarg1; 
  arg2 = (pj::StringVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::StringVector const & is null", 0);
    return ;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (unsigned int)jarg4; 
  try {
    (arg1)->createPlaylist((pj::StringVector const &)*arg2,(pj::string const &)*arg3,arg4);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaPlayer_createPlaylist__SWIG_1(void * jarg1, void * jarg2, const char * jarg3) {
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  pj::StringVector *arg2 = 0 ;
  pj::string *arg3 = 0 ;
  
  arg1 = (pj::AudioMediaPlayer *)jarg1; 
  arg2 = (pj::StringVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::StringVector const & is null", 0);
    return ;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    (arg1)->createPlaylist((pj::StringVector const &)*arg2,(pj::string const &)*arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaPlayer_createPlaylist__SWIG_2(void * jarg1, void * jarg2) {
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  pj::StringVector *arg2 = 0 ;
  
  arg1 = (pj::AudioMediaPlayer *)jarg1; 
  arg2 = (pj::StringVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::StringVector const & is null", 0);
    return ;
  } 
  try {
    (arg1)->createPlaylist((pj::StringVector const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioMediaPlayer_getInfo(void * jarg1) {
  void * jresult ;
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  pj::AudioMediaPlayerInfo result;
  
  arg1 = (pj::AudioMediaPlayer *)jarg1; 
  try {
    result = ((pj::AudioMediaPlayer const *)arg1)->getInfo();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::AudioMediaPlayerInfo(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioMediaPlayer_getPos(void * jarg1) {
  unsigned int jresult ;
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  pj_uint32_t result;
  
  arg1 = (pj::AudioMediaPlayer *)jarg1; 
  try {
    result = (pj_uint32_t)((pj::AudioMediaPlayer const *)arg1)->getPos();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaPlayer_setPos(void * jarg1, unsigned int jarg2) {
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  pj_uint32_t arg2 ;
  
  arg1 = (pj::AudioMediaPlayer *)jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  try {
    (arg1)->setPos(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioMediaPlayer_typecastFromAudioMedia(void * jarg1) {
  void * jresult ;
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  pj::AudioMediaPlayer *result = 0 ;
  
  arg1 = (pj::AudioMedia *)jarg1; 
  result = (pj::AudioMediaPlayer *)pj::AudioMediaPlayer::typecastFromAudioMedia(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AudioMediaPlayer(void * jarg1) {
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  
  arg1 = (pj::AudioMediaPlayer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaPlayer_onEof2(void * jarg1) {
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  
  arg1 = (pj::AudioMediaPlayer *)jarg1; 
  (arg1)->onEof2();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaPlayer_onEof2SwigExplicitAudioMediaPlayer(void * jarg1) {
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  
  arg1 = (pj::AudioMediaPlayer *)jarg1; 
  (arg1)->pj::AudioMediaPlayer::onEof2();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaPlayer_director_connect(void *objarg, SwigDirector_AudioMediaPlayer::SWIG_Callback0_t callback0) {
  pj::AudioMediaPlayer *obj = (pj::AudioMediaPlayer *)objarg;
  SwigDirector_AudioMediaPlayer *director = static_cast<SwigDirector_AudioMediaPlayer *>(obj);
  director->swig_connect_director(callback0);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AudioMediaRecorder() {
  void * jresult ;
  pj::AudioMediaRecorder *result = 0 ;
  
  result = (pj::AudioMediaRecorder *)new pj::AudioMediaRecorder();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaRecorder_createRecorder__SWIG_0(void * jarg1, const char * jarg2, unsigned int jarg3, int jarg4, unsigned int jarg5) {
  pj::AudioMediaRecorder *arg1 = (pj::AudioMediaRecorder *) 0 ;
  pj::string *arg2 = 0 ;
  unsigned int arg3 ;
  long arg4 ;
  unsigned int arg5 ;
  
  arg1 = (pj::AudioMediaRecorder *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (long)jarg4; 
  arg5 = (unsigned int)jarg5; 
  try {
    (arg1)->createRecorder((pj::string const &)*arg2,arg3,arg4,arg5);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaRecorder_createRecorder__SWIG_1(void * jarg1, const char * jarg2, unsigned int jarg3, int jarg4) {
  pj::AudioMediaRecorder *arg1 = (pj::AudioMediaRecorder *) 0 ;
  pj::string *arg2 = 0 ;
  unsigned int arg3 ;
  long arg4 ;
  
  arg1 = (pj::AudioMediaRecorder *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (long)jarg4; 
  try {
    (arg1)->createRecorder((pj::string const &)*arg2,arg3,arg4);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaRecorder_createRecorder__SWIG_2(void * jarg1, const char * jarg2, unsigned int jarg3) {
  pj::AudioMediaRecorder *arg1 = (pj::AudioMediaRecorder *) 0 ;
  pj::string *arg2 = 0 ;
  unsigned int arg3 ;
  
  arg1 = (pj::AudioMediaRecorder *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (unsigned int)jarg3; 
  try {
    (arg1)->createRecorder((pj::string const &)*arg2,arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaRecorder_createRecorder__SWIG_3(void * jarg1, const char * jarg2) {
  pj::AudioMediaRecorder *arg1 = (pj::AudioMediaRecorder *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AudioMediaRecorder *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->createRecorder((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioMediaRecorder_typecastFromAudioMedia(void * jarg1) {
  void * jresult ;
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  pj::AudioMediaRecorder *result = 0 ;
  
  arg1 = (pj::AudioMedia *)jarg1; 
  result = (pj::AudioMediaRecorder *)pj::AudioMediaRecorder::typecastFromAudioMedia(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AudioMediaRecorder(void * jarg1) {
  pj::AudioMediaRecorder *arg1 = (pj::AudioMediaRecorder *) 0 ;
  
  arg1 = (pj::AudioMediaRecorder *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ToneDesc() {
  void * jresult ;
  pj::ToneDesc *result = 0 ;
  
  result = (pj::ToneDesc *)new pj::ToneDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ToneDesc(void * jarg1) {
  pj::ToneDesc *arg1 = (pj::ToneDesc *) 0 ;
  
  arg1 = (pj::ToneDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ToneDigit() {
  void * jresult ;
  pj::ToneDigit *result = 0 ;
  
  result = (pj::ToneDigit *)new pj::ToneDigit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ToneDigit(void * jarg1) {
  pj::ToneDigit *arg1 = (pj::ToneDigit *) 0 ;
  
  arg1 = (pj::ToneDigit *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDigitMapDigit_digit_set(void * jarg1, const char * jarg2) {
  pj::ToneDigitMapDigit *arg1 = (pj::ToneDigitMapDigit *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::ToneDigitMapDigit *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->digit = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ToneDigitMapDigit_digit_get(void * jarg1) {
  const char * jresult ;
  pj::ToneDigitMapDigit *arg1 = (pj::ToneDigitMapDigit *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::ToneDigitMapDigit *)jarg1; 
  result = (pj::string *) & ((arg1)->digit);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDigitMapDigit_freq1_set(void * jarg1, int jarg2) {
  pj::ToneDigitMapDigit *arg1 = (pj::ToneDigitMapDigit *) 0 ;
  int arg2 ;
  
  arg1 = (pj::ToneDigitMapDigit *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->freq1 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ToneDigitMapDigit_freq1_get(void * jarg1) {
  int jresult ;
  pj::ToneDigitMapDigit *arg1 = (pj::ToneDigitMapDigit *) 0 ;
  int result;
  
  arg1 = (pj::ToneDigitMapDigit *)jarg1; 
  result = (int) ((arg1)->freq1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneDigitMapDigit_freq2_set(void * jarg1, int jarg2) {
  pj::ToneDigitMapDigit *arg1 = (pj::ToneDigitMapDigit *) 0 ;
  int arg2 ;
  
  arg1 = (pj::ToneDigitMapDigit *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->freq2 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ToneDigitMapDigit_freq2_get(void * jarg1) {
  int jresult ;
  pj::ToneDigitMapDigit *arg1 = (pj::ToneDigitMapDigit *) 0 ;
  int result;
  
  arg1 = (pj::ToneDigitMapDigit *)jarg1; 
  result = (int) ((arg1)->freq2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ToneDigitMapDigit() {
  void * jresult ;
  pj::ToneDigitMapDigit *result = 0 ;
  
  result = (pj::ToneDigitMapDigit *)new pj::ToneDigitMapDigit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ToneDigitMapDigit(void * jarg1) {
  pj::ToneDigitMapDigit *arg1 = (pj::ToneDigitMapDigit *) 0 ;
  
  arg1 = (pj::ToneDigitMapDigit *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ToneGenerator() {
  void * jresult ;
  pj::ToneGenerator *result = 0 ;
  
  result = (pj::ToneGenerator *)new pj::ToneGenerator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ToneGenerator(void * jarg1) {
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  
  arg1 = (pj::ToneGenerator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneGenerator_createToneGenerator__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (pj::ToneGenerator *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  try {
    (arg1)->createToneGenerator(arg2,arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneGenerator_createToneGenerator__SWIG_1(void * jarg1, unsigned int jarg2) {
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::ToneGenerator *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    (arg1)->createToneGenerator(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneGenerator_createToneGenerator__SWIG_2(void * jarg1) {
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  
  arg1 = (pj::ToneGenerator *)jarg1; 
  try {
    (arg1)->createToneGenerator();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ToneGenerator_isBusy(void * jarg1) {
  unsigned int jresult ;
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  bool result;
  
  arg1 = (pj::ToneGenerator *)jarg1; 
  result = (bool)((pj::ToneGenerator const *)arg1)->isBusy();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneGenerator_stop(void * jarg1) {
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  
  arg1 = (pj::ToneGenerator *)jarg1; 
  try {
    (arg1)->stop();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneGenerator_rewind(void * jarg1) {
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  
  arg1 = (pj::ToneGenerator *)jarg1; 
  try {
    (arg1)->rewind();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneGenerator_play__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  pj::ToneDescVector *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (pj::ToneGenerator *)jarg1; 
  arg2 = (pj::ToneDescVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDescVector const & is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->play((pj::ToneDescVector const &)*arg2,arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneGenerator_play__SWIG_1(void * jarg1, void * jarg2) {
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  pj::ToneDescVector *arg2 = 0 ;
  
  arg1 = (pj::ToneGenerator *)jarg1; 
  arg2 = (pj::ToneDescVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDescVector const & is null", 0);
    return ;
  } 
  try {
    (arg1)->play((pj::ToneDescVector const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneGenerator_playDigits__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  pj::ToneDigitVector *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (pj::ToneGenerator *)jarg1; 
  arg2 = (pj::ToneDigitVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDigitVector const & is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->playDigits((pj::ToneDigitVector const &)*arg2,arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneGenerator_playDigits__SWIG_1(void * jarg1, void * jarg2) {
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  pj::ToneDigitVector *arg2 = 0 ;
  
  arg1 = (pj::ToneGenerator *)jarg1; 
  arg2 = (pj::ToneDigitVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDigitVector const & is null", 0);
    return ;
  } 
  try {
    (arg1)->playDigits((pj::ToneDigitVector const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ToneGenerator_getDigitMap(void * jarg1) {
  void * jresult ;
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  pj::ToneDigitMapVector result;
  
  arg1 = (pj::ToneGenerator *)jarg1; 
  try {
    result = ((pj::ToneGenerator const *)arg1)->getDigitMap();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::ToneDigitMapVector(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToneGenerator_setDigitMap(void * jarg1, void * jarg2) {
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  pj::ToneDigitMapVector *arg2 = 0 ;
  
  arg1 = (pj::ToneGenerator *)jarg1; 
  arg2 = (pj::ToneDigitMapVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDigitMapVector const & is null", 0);
    return ;
  } 
  try {
    (arg1)->setDigitMap((pj::ToneDigitMapVector const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioDevInfo_id_set(void * jarg1, void * jarg2) {
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  pjmedia_aud_dev_index arg2 ;
  pjmedia_aud_dev_index *argp2 ;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  argp2 = (pjmedia_aud_dev_index *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null pjmedia_aud_dev_index", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioDevInfo_id_get(void * jarg1) {
  void * jresult ;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  pjmedia_aud_dev_index result;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  result =  ((arg1)->id);
  jresult = new pjmedia_aud_dev_index(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioDevInfo_name_set(void * jarg1, const char * jarg2) {
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AudioDevInfo_name_get(void * jarg1) {
  const char * jresult ;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioDevInfo_inputCount_set(void * jarg1, unsigned int jarg2) {
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->inputCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioDevInfo_inputCount_get(void * jarg1) {
  unsigned int jresult ;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  result = (unsigned int) ((arg1)->inputCount);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioDevInfo_outputCount_set(void * jarg1, unsigned int jarg2) {
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->outputCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioDevInfo_outputCount_get(void * jarg1) {
  unsigned int jresult ;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  result = (unsigned int) ((arg1)->outputCount);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioDevInfo_defaultSamplesPerSec_set(void * jarg1, unsigned int jarg2) {
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->defaultSamplesPerSec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioDevInfo_defaultSamplesPerSec_get(void * jarg1) {
  unsigned int jresult ;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  result = (unsigned int) ((arg1)->defaultSamplesPerSec);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioDevInfo_driver_set(void * jarg1, const char * jarg2) {
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->driver = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AudioDevInfo_driver_get(void * jarg1) {
  const char * jresult ;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->driver);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioDevInfo_caps_set(void * jarg1, unsigned int jarg2) {
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->caps = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioDevInfo_caps_get(void * jarg1) {
  unsigned int jresult ;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  result = (unsigned int) ((arg1)->caps);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioDevInfo_routes_set(void * jarg1, unsigned int jarg2) {
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->routes = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioDevInfo_routes_get(void * jarg1) {
  unsigned int jresult ;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  result = (unsigned int) ((arg1)->routes);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioDevInfo_extFmt_set(void * jarg1, void * jarg2) {
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  pj::MediaFormatAudioVector *arg2 = (pj::MediaFormatAudioVector *) 0 ;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  arg2 = (pj::MediaFormatAudioVector *)jarg2; 
  if (arg1) (arg1)->extFmt = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioDevInfo_extFmt_get(void * jarg1) {
  void * jresult ;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  pj::MediaFormatAudioVector *result = 0 ;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  result = (pj::MediaFormatAudioVector *)& ((arg1)->extFmt);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AudioDevInfo(void * jarg1) {
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AudioDevInfo() {
  void * jresult ;
  pj::AudioDevInfo *result = 0 ;
  
  result = (pj::AudioDevInfo *)new pj::AudioDevInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudDevManager_getCaptureDev(void * jarg1) {
  int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  int result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = (int)((pj::AudDevManager const *)arg1)->getCaptureDev();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudDevManager_getCaptureDevMedia(void * jarg1) {
  void * jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pj::AudioMedia *result = 0 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = (pj::AudioMedia *) &(arg1)->getCaptureDevMedia();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudDevManager_getPlaybackDev(void * jarg1) {
  int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  int result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = (int)((pj::AudDevManager const *)arg1)->getPlaybackDev();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudDevManager_getPlaybackDevMedia(void * jarg1) {
  void * jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pj::AudioMedia *result = 0 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = (pj::AudioMedia *) &(arg1)->getPlaybackDevMedia();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudDevManager_setCaptureDev(void * jarg1, int jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  int arg2 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    ((pj::AudDevManager const *)arg1)->setCaptureDev(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudDevManager_setPlaybackDev(void * jarg1, int jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  int arg2 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    ((pj::AudDevManager const *)arg1)->setPlaybackDev(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudDevManager_enumDev2(void * jarg1) {
  void * jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pj::AudioDevInfoVector2 result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = ((pj::AudDevManager const *)arg1)->enumDev2();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::AudioDevInfoVector2(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudDevManager_setNullDev(void * jarg1) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    (arg1)->setNullDev();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudDevManager_setNoDev(void * jarg1) {
  void * jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pj::MediaPort *result = 0 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  result = (pj::MediaPort *)(arg1)->setNoDev();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudDevManager_setSndDevMode(void * jarg1, unsigned int jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    ((pj::AudDevManager const *)arg1)->setSndDevMode(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudDevManager_setEcOptions(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  try {
    (arg1)->setEcOptions(arg2,arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudDevManager_getEcTail(void * jarg1) {
  unsigned int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = (unsigned int)((pj::AudDevManager const *)arg1)->getEcTail();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudDevManager_sndIsActive(void * jarg1) {
  unsigned int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  result = (bool)((pj::AudDevManager const *)arg1)->sndIsActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudDevManager_refreshDevs(void * jarg1) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    (arg1)->refreshDevs();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudDevManager_getDevCount(void * jarg1) {
  unsigned int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  result = (unsigned int)((pj::AudDevManager const *)arg1)->getDevCount();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudDevManager_getDevInfo(void * jarg1, int jarg2) {
  void * jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  int arg2 ;
  pj::AudioDevInfo result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = ((pj::AudDevManager const *)arg1)->getDevInfo(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::AudioDevInfo(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudDevManager_lookupDev(void * jarg1, const char * jarg2, const char * jarg3) {
  int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string *arg3 = 0 ;
  int result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    result = (int)((pj::AudDevManager const *)arg1)->lookupDev((pj::string const &)*arg2,(pj::string const &)*arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AudDevManager_capName(void * jarg1, int jarg2) {
  const char * jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pjmedia_aud_dev_cap arg2 ;
  pj::string result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (pjmedia_aud_dev_cap)jarg2; 
  result = ((pj::AudDevManager const *)arg1)->capName(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudDevManager_setExtFormat__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pj::MediaFormatAudio *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (pj::MediaFormatAudio *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::MediaFormatAudio const & is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setExtFormat((pj::MediaFormatAudio const &)*arg2,arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudDevManager_setExtFormat__SWIG_1(void * jarg1, void * jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pj::MediaFormatAudio *arg2 = 0 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (pj::MediaFormatAudio *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::MediaFormatAudio const & is null", 0);
    return ;
  } 
  try {
    (arg1)->setExtFormat((pj::MediaFormatAudio const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudDevManager_getExtFormat(void * jarg1) {
  void * jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pj::MediaFormatAudio result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = ((pj::AudDevManager const *)arg1)->getExtFormat();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::MediaFormatAudio(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudDevManager_setInputLatency__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setInputLatency(arg2,arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudDevManager_setInputLatency__SWIG_1(void * jarg1, unsigned int jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    (arg1)->setInputLatency(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudDevManager_getInputLatency(void * jarg1) {
  unsigned int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = (unsigned int)((pj::AudDevManager const *)arg1)->getInputLatency();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudDevManager_setOutputLatency__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setOutputLatency(arg2,arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudDevManager_setOutputLatency__SWIG_1(void * jarg1, unsigned int jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    (arg1)->setOutputLatency(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudDevManager_getOutputLatency(void * jarg1) {
  unsigned int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = (unsigned int)((pj::AudDevManager const *)arg1)->getOutputLatency();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudDevManager_setInputVolume__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setInputVolume(arg2,arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudDevManager_setInputVolume__SWIG_1(void * jarg1, unsigned int jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    (arg1)->setInputVolume(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudDevManager_getInputVolume(void * jarg1) {
  unsigned int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = (unsigned int)((pj::AudDevManager const *)arg1)->getInputVolume();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudDevManager_setOutputVolume__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setOutputVolume(arg2,arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudDevManager_setOutputVolume__SWIG_1(void * jarg1, unsigned int jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    (arg1)->setOutputVolume(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudDevManager_getOutputVolume(void * jarg1) {
  unsigned int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = (unsigned int)((pj::AudDevManager const *)arg1)->getOutputVolume();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudDevManager_getInputSignal(void * jarg1) {
  unsigned int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = (unsigned int)((pj::AudDevManager const *)arg1)->getInputSignal();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudDevManager_getOutputSignal(void * jarg1) {
  unsigned int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = (unsigned int)((pj::AudDevManager const *)arg1)->getOutputSignal();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudDevManager_setInputRoute__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pjmedia_aud_dev_route arg2 ;
  bool arg3 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (pjmedia_aud_dev_route)jarg2; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setInputRoute(arg2,arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudDevManager_setInputRoute__SWIG_1(void * jarg1, int jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pjmedia_aud_dev_route arg2 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (pjmedia_aud_dev_route)jarg2; 
  try {
    (arg1)->setInputRoute(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudDevManager_getInputRoute(void * jarg1) {
  int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pjmedia_aud_dev_route result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = (pjmedia_aud_dev_route)((pj::AudDevManager const *)arg1)->getInputRoute();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudDevManager_setOutputRoute__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pjmedia_aud_dev_route arg2 ;
  bool arg3 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (pjmedia_aud_dev_route)jarg2; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setOutputRoute(arg2,arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudDevManager_setOutputRoute__SWIG_1(void * jarg1, int jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pjmedia_aud_dev_route arg2 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (pjmedia_aud_dev_route)jarg2; 
  try {
    (arg1)->setOutputRoute(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudDevManager_getOutputRoute(void * jarg1) {
  int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pjmedia_aud_dev_route result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = (pjmedia_aud_dev_route)((pj::AudDevManager const *)arg1)->getOutputRoute();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudDevManager_setVad__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setVad(arg2,arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudDevManager_setVad__SWIG_1(void * jarg1, unsigned int jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  try {
    (arg1)->setVad(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudDevManager_getVad(void * jarg1) {
  unsigned int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = (bool)((pj::AudDevManager const *)arg1)->getVad();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudDevManager_setCng__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setCng(arg2,arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudDevManager_setCng__SWIG_1(void * jarg1, unsigned int jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  try {
    (arg1)->setCng(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudDevManager_getCng(void * jarg1) {
  unsigned int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = (bool)((pj::AudDevManager const *)arg1)->getCng();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudDevManager_setPlc__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setPlc(arg2,arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudDevManager_setPlc__SWIG_1(void * jarg1, unsigned int jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  try {
    (arg1)->setPlc(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudDevManager_getPlc(void * jarg1) {
  unsigned int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = (bool)((pj::AudDevManager const *)arg1)->getPlc();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ExtraAudioDevice(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  pj::ExtraAudioDevice *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (pj::ExtraAudioDevice *)new pj::ExtraAudioDevice(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ExtraAudioDevice(void * jarg1) {
  pj::ExtraAudioDevice *arg1 = (pj::ExtraAudioDevice *) 0 ;
  
  arg1 = (pj::ExtraAudioDevice *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtraAudioDevice_open(void * jarg1) {
  pj::ExtraAudioDevice *arg1 = (pj::ExtraAudioDevice *) 0 ;
  
  arg1 = (pj::ExtraAudioDevice *)jarg1; 
  (arg1)->open();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtraAudioDevice_close(void * jarg1) {
  pj::ExtraAudioDevice *arg1 = (pj::ExtraAudioDevice *) 0 ;
  
  arg1 = (pj::ExtraAudioDevice *)jarg1; 
  try {
    (arg1)->close();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ExtraAudioDevice_isOpened(void * jarg1) {
  unsigned int jresult ;
  pj::ExtraAudioDevice *arg1 = (pj::ExtraAudioDevice *) 0 ;
  bool result;
  
  arg1 = (pj::ExtraAudioDevice *)jarg1; 
  result = (bool)(arg1)->isOpened();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaCoordinate_x_set(void * jarg1, int jarg2) {
  pj::MediaCoordinate *arg1 = (pj::MediaCoordinate *) 0 ;
  int arg2 ;
  
  arg1 = (pj::MediaCoordinate *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MediaCoordinate_x_get(void * jarg1) {
  int jresult ;
  pj::MediaCoordinate *arg1 = (pj::MediaCoordinate *) 0 ;
  int result;
  
  arg1 = (pj::MediaCoordinate *)jarg1; 
  result = (int) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaCoordinate_y_set(void * jarg1, int jarg2) {
  pj::MediaCoordinate *arg1 = (pj::MediaCoordinate *) 0 ;
  int arg2 ;
  
  arg1 = (pj::MediaCoordinate *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MediaCoordinate_y_get(void * jarg1) {
  int jresult ;
  pj::MediaCoordinate *arg1 = (pj::MediaCoordinate *) 0 ;
  int result;
  
  arg1 = (pj::MediaCoordinate *)jarg1; 
  result = (int) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MediaCoordinate() {
  void * jresult ;
  pj::MediaCoordinate *result = 0 ;
  
  result = (pj::MediaCoordinate *)new pj::MediaCoordinate();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MediaCoordinate(void * jarg1) {
  pj::MediaCoordinate *arg1 = (pj::MediaCoordinate *) 0 ;
  
  arg1 = (pj::MediaCoordinate *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaSize_w_set(void * jarg1, unsigned int jarg2) {
  pj::MediaSize *arg1 = (pj::MediaSize *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaSize *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaSize_w_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaSize *arg1 = (pj::MediaSize *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaSize *)jarg1; 
  result = (unsigned int) ((arg1)->w);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaSize_h_set(void * jarg1, unsigned int jarg2) {
  pj::MediaSize *arg1 = (pj::MediaSize *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaSize *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->h = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaSize_h_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaSize *arg1 = (pj::MediaSize *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaSize *)jarg1; 
  result = (unsigned int) ((arg1)->h);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MediaSize() {
  void * jresult ;
  pj::MediaSize *result = 0 ;
  
  result = (pj::MediaSize *)new pj::MediaSize();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MediaSize(void * jarg1) {
  pj::MediaSize *arg1 = (pj::MediaSize *) 0 ;
  
  arg1 = (pj::MediaSize *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VidConfPortInfo_portId_set(void * jarg1, int jarg2) {
  pj::VidConfPortInfo *arg1 = (pj::VidConfPortInfo *) 0 ;
  int arg2 ;
  
  arg1 = (pj::VidConfPortInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->portId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VidConfPortInfo_portId_get(void * jarg1) {
  int jresult ;
  pj::VidConfPortInfo *arg1 = (pj::VidConfPortInfo *) 0 ;
  int result;
  
  arg1 = (pj::VidConfPortInfo *)jarg1; 
  result = (int) ((arg1)->portId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VidConfPortInfo_name_set(void * jarg1, const char * jarg2) {
  pj::VidConfPortInfo *arg1 = (pj::VidConfPortInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::VidConfPortInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_VidConfPortInfo_name_get(void * jarg1) {
  const char * jresult ;
  pj::VidConfPortInfo *arg1 = (pj::VidConfPortInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::VidConfPortInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VidConfPortInfo_format_set(void * jarg1, void * jarg2) {
  pj::VidConfPortInfo *arg1 = (pj::VidConfPortInfo *) 0 ;
  pj::MediaFormatVideo *arg2 = (pj::MediaFormatVideo *) 0 ;
  
  arg1 = (pj::VidConfPortInfo *)jarg1; 
  arg2 = (pj::MediaFormatVideo *)jarg2; 
  if (arg1) (arg1)->format = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VidConfPortInfo_format_get(void * jarg1) {
  void * jresult ;
  pj::VidConfPortInfo *arg1 = (pj::VidConfPortInfo *) 0 ;
  pj::MediaFormatVideo *result = 0 ;
  
  arg1 = (pj::VidConfPortInfo *)jarg1; 
  result = (pj::MediaFormatVideo *)& ((arg1)->format);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VidConfPortInfo_listeners_set(void * jarg1, void * jarg2) {
  pj::VidConfPortInfo *arg1 = (pj::VidConfPortInfo *) 0 ;
  pj::IntVector *arg2 = (pj::IntVector *) 0 ;
  
  arg1 = (pj::VidConfPortInfo *)jarg1; 
  arg2 = (pj::IntVector *)jarg2; 
  if (arg1) (arg1)->listeners = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VidConfPortInfo_listeners_get(void * jarg1) {
  void * jresult ;
  pj::VidConfPortInfo *arg1 = (pj::VidConfPortInfo *) 0 ;
  pj::IntVector *result = 0 ;
  
  arg1 = (pj::VidConfPortInfo *)jarg1; 
  result = (pj::IntVector *)& ((arg1)->listeners);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VidConfPortInfo_transmitters_set(void * jarg1, void * jarg2) {
  pj::VidConfPortInfo *arg1 = (pj::VidConfPortInfo *) 0 ;
  pj::IntVector *arg2 = (pj::IntVector *) 0 ;
  
  arg1 = (pj::VidConfPortInfo *)jarg1; 
  arg2 = (pj::IntVector *)jarg2; 
  if (arg1) (arg1)->transmitters = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VidConfPortInfo_transmitters_get(void * jarg1) {
  void * jresult ;
  pj::VidConfPortInfo *arg1 = (pj::VidConfPortInfo *) 0 ;
  pj::IntVector *result = 0 ;
  
  arg1 = (pj::VidConfPortInfo *)jarg1; 
  result = (pj::IntVector *)& ((arg1)->transmitters);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VidConfPortInfo() {
  void * jresult ;
  pj::VidConfPortInfo *result = 0 ;
  
  result = (pj::VidConfPortInfo *)new pj::VidConfPortInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VidConfPortInfo(void * jarg1) {
  pj::VidConfPortInfo *arg1 = (pj::VidConfPortInfo *) 0 ;
  
  arg1 = (pj::VidConfPortInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VideoMediaTransmitParam() {
  void * jresult ;
  pj::VideoMediaTransmitParam *result = 0 ;
  
  result = (pj::VideoMediaTransmitParam *)new pj::VideoMediaTransmitParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VideoMediaTransmitParam(void * jarg1) {
  pj::VideoMediaTransmitParam *arg1 = (pj::VideoMediaTransmitParam *) 0 ;
  
  arg1 = (pj::VideoMediaTransmitParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VideoMedia_getPortInfo(void * jarg1) {
  void * jresult ;
  pj::VideoMedia *arg1 = (pj::VideoMedia *) 0 ;
  pj::VidConfPortInfo result;
  
  arg1 = (pj::VideoMedia *)jarg1; 
  try {
    result = ((pj::VideoMedia const *)arg1)->getPortInfo();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::VidConfPortInfo(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VideoMedia_getPortId(void * jarg1) {
  int jresult ;
  pj::VideoMedia *arg1 = (pj::VideoMedia *) 0 ;
  int result;
  
  arg1 = (pj::VideoMedia *)jarg1; 
  result = (int)((pj::VideoMedia const *)arg1)->getPortId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VideoMedia_getPortInfoFromId(int jarg1) {
  void * jresult ;
  int arg1 ;
  pj::VidConfPortInfo result;
  
  arg1 = (int)jarg1; 
  try {
    result = pj::VideoMedia::getPortInfoFromId(arg1);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::VidConfPortInfo(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoMedia_startTransmit(void * jarg1, void * jarg2, void * jarg3) {
  pj::VideoMedia *arg1 = (pj::VideoMedia *) 0 ;
  pj::VideoMedia *arg2 = 0 ;
  pj::VideoMediaTransmitParam *arg3 = 0 ;
  
  arg1 = (pj::VideoMedia *)jarg1; 
  arg2 = (pj::VideoMedia *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::VideoMedia const & is null", 0);
    return ;
  } 
  arg3 = (pj::VideoMediaTransmitParam *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::VideoMediaTransmitParam const & is null", 0);
    return ;
  } 
  try {
    ((pj::VideoMedia const *)arg1)->startTransmit((pj::VideoMedia const &)*arg2,(pj::VideoMediaTransmitParam const &)*arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoMedia_stopTransmit(void * jarg1, void * jarg2) {
  pj::VideoMedia *arg1 = (pj::VideoMedia *) 0 ;
  pj::VideoMedia *arg2 = 0 ;
  
  arg1 = (pj::VideoMedia *)jarg1; 
  arg2 = (pj::VideoMedia *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::VideoMedia const & is null", 0);
    return ;
  } 
  try {
    ((pj::VideoMedia const *)arg1)->stopTransmit((pj::VideoMedia const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoMedia_update(void * jarg1) {
  pj::VideoMedia *arg1 = (pj::VideoMedia *) 0 ;
  
  arg1 = (pj::VideoMedia *)jarg1; 
  try {
    ((pj::VideoMedia const *)arg1)->update();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VideoMedia() {
  void * jresult ;
  pj::VideoMedia *result = 0 ;
  
  result = (pj::VideoMedia *)new pj::VideoMedia();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VideoMedia(void * jarg1) {
  pj::VideoMedia *arg1 = (pj::VideoMedia *) 0 ;
  
  arg1 = (pj::VideoMedia *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WindowHandle_window_set(void * jarg1, void * jarg2) {
  pj::WindowHandle *arg1 = (pj::WindowHandle *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (pj::WindowHandle *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->window = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WindowHandle_window_get(void * jarg1) {
  void * jresult ;
  pj::WindowHandle *arg1 = (pj::WindowHandle *) 0 ;
  void *result = 0 ;
  
  arg1 = (pj::WindowHandle *)jarg1; 
  result = (void *) ((arg1)->window);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WindowHandle_display_set(void * jarg1, void * jarg2) {
  pj::WindowHandle *arg1 = (pj::WindowHandle *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (pj::WindowHandle *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->display = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WindowHandle_display_get(void * jarg1) {
  void * jresult ;
  pj::WindowHandle *arg1 = (pj::WindowHandle *) 0 ;
  void *result = 0 ;
  
  arg1 = (pj::WindowHandle *)jarg1; 
  result = (void *) ((arg1)->display);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WindowHandle_setWindow(void * jarg1, long long jarg2) {
  pj::WindowHandle *arg1 = (pj::WindowHandle *) 0 ;
  long long arg2 ;
  
  arg1 = (pj::WindowHandle *)jarg1; 
  arg2 = (long long)jarg2; 
  pj_WindowHandle_setWindow(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WindowHandle() {
  void * jresult ;
  pj::WindowHandle *result = 0 ;
  
  result = (pj::WindowHandle *)new pj::WindowHandle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WindowHandle(void * jarg1) {
  pj::WindowHandle *arg1 = (pj::WindowHandle *) 0 ;
  
  arg1 = (pj::WindowHandle *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoWindowHandle_type_set(void * jarg1, void * jarg2) {
  pj::VideoWindowHandle *arg1 = (pj::VideoWindowHandle *) 0 ;
  pjmedia_vid_dev_hwnd_type arg2 ;
  pjmedia_vid_dev_hwnd_type *argp2 ;
  
  arg1 = (pj::VideoWindowHandle *)jarg1; 
  argp2 = (pjmedia_vid_dev_hwnd_type *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null pjmedia_vid_dev_hwnd_type", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VideoWindowHandle_type_get(void * jarg1) {
  void * jresult ;
  pj::VideoWindowHandle *arg1 = (pj::VideoWindowHandle *) 0 ;
  pjmedia_vid_dev_hwnd_type result;
  
  arg1 = (pj::VideoWindowHandle *)jarg1; 
  result =  ((arg1)->type);
  jresult = new pjmedia_vid_dev_hwnd_type(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoWindowHandle_handle_set(void * jarg1, void * jarg2) {
  pj::VideoWindowHandle *arg1 = (pj::VideoWindowHandle *) 0 ;
  pj::WindowHandle *arg2 = (pj::WindowHandle *) 0 ;
  
  arg1 = (pj::VideoWindowHandle *)jarg1; 
  arg2 = (pj::WindowHandle *)jarg2; 
  if (arg1) (arg1)->handle = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VideoWindowHandle_handle_get(void * jarg1) {
  void * jresult ;
  pj::VideoWindowHandle *arg1 = (pj::VideoWindowHandle *) 0 ;
  pj::WindowHandle *result = 0 ;
  
  arg1 = (pj::VideoWindowHandle *)jarg1; 
  result = (pj::WindowHandle *)& ((arg1)->handle);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VideoWindowHandle() {
  void * jresult ;
  pj::VideoWindowHandle *result = 0 ;
  
  result = (pj::VideoWindowHandle *)new pj::VideoWindowHandle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VideoWindowHandle(void * jarg1) {
  pj::VideoWindowHandle *arg1 = (pj::VideoWindowHandle *) 0 ;
  
  arg1 = (pj::VideoWindowHandle *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoWindowInfo_isNative_set(void * jarg1, unsigned int jarg2) {
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::VideoWindowInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isNative = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VideoWindowInfo_isNative_get(void * jarg1) {
  unsigned int jresult ;
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  bool result;
  
  arg1 = (pj::VideoWindowInfo *)jarg1; 
  result = (bool) ((arg1)->isNative);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoWindowInfo_winHandle_set(void * jarg1, void * jarg2) {
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  pj::VideoWindowHandle *arg2 = (pj::VideoWindowHandle *) 0 ;
  
  arg1 = (pj::VideoWindowInfo *)jarg1; 
  arg2 = (pj::VideoWindowHandle *)jarg2; 
  if (arg1) (arg1)->winHandle = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VideoWindowInfo_winHandle_get(void * jarg1) {
  void * jresult ;
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  pj::VideoWindowHandle *result = 0 ;
  
  arg1 = (pj::VideoWindowInfo *)jarg1; 
  result = (pj::VideoWindowHandle *)& ((arg1)->winHandle);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoWindowInfo_renderDeviceId_set(void * jarg1, int jarg2) {
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  int arg2 ;
  
  arg1 = (pj::VideoWindowInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->renderDeviceId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VideoWindowInfo_renderDeviceId_get(void * jarg1) {
  int jresult ;
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  int result;
  
  arg1 = (pj::VideoWindowInfo *)jarg1; 
  result = (int) ((arg1)->renderDeviceId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoWindowInfo_show_set(void * jarg1, unsigned int jarg2) {
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::VideoWindowInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->show = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VideoWindowInfo_show_get(void * jarg1) {
  unsigned int jresult ;
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  bool result;
  
  arg1 = (pj::VideoWindowInfo *)jarg1; 
  result = (bool) ((arg1)->show);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoWindowInfo_pos_set(void * jarg1, void * jarg2) {
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  pj::MediaCoordinate *arg2 = (pj::MediaCoordinate *) 0 ;
  
  arg1 = (pj::VideoWindowInfo *)jarg1; 
  arg2 = (pj::MediaCoordinate *)jarg2; 
  if (arg1) (arg1)->pos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VideoWindowInfo_pos_get(void * jarg1) {
  void * jresult ;
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  pj::MediaCoordinate *result = 0 ;
  
  arg1 = (pj::VideoWindowInfo *)jarg1; 
  result = (pj::MediaCoordinate *)& ((arg1)->pos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoWindowInfo_size_set(void * jarg1, void * jarg2) {
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  pj::MediaSize *arg2 = (pj::MediaSize *) 0 ;
  
  arg1 = (pj::VideoWindowInfo *)jarg1; 
  arg2 = (pj::MediaSize *)jarg2; 
  if (arg1) (arg1)->size = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VideoWindowInfo_size_get(void * jarg1) {
  void * jresult ;
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  pj::MediaSize *result = 0 ;
  
  arg1 = (pj::VideoWindowInfo *)jarg1; 
  result = (pj::MediaSize *)& ((arg1)->size);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VideoWindowInfo() {
  void * jresult ;
  pj::VideoWindowInfo *result = 0 ;
  
  result = (pj::VideoWindowInfo *)new pj::VideoWindowInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VideoWindowInfo(void * jarg1) {
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  
  arg1 = (pj::VideoWindowInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VideoWindow(int jarg1) {
  void * jresult ;
  int arg1 ;
  pj::VideoWindow *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (pj::VideoWindow *)new pj::VideoWindow(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VideoWindow_getInfo(void * jarg1) {
  void * jresult ;
  pj::VideoWindow *arg1 = (pj::VideoWindow *) 0 ;
  pj::VideoWindowInfo result;
  
  arg1 = (pj::VideoWindow *)jarg1; 
  try {
    result = ((pj::VideoWindow const *)arg1)->getInfo();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::VideoWindowInfo(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VideoWindow_getVideoMedia(void * jarg1) {
  void * jresult ;
  pj::VideoWindow *arg1 = (pj::VideoWindow *) 0 ;
  pj::VideoMedia result;
  
  arg1 = (pj::VideoWindow *)jarg1; 
  try {
    result = (arg1)->getVideoMedia();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::VideoMedia(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoWindow_Show(void * jarg1, unsigned int jarg2) {
  pj::VideoWindow *arg1 = (pj::VideoWindow *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::VideoWindow *)jarg1; 
  arg2 = jarg2 ? true : false; 
  try {
    (arg1)->Show(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoWindow_setPos(void * jarg1, void * jarg2) {
  pj::VideoWindow *arg1 = (pj::VideoWindow *) 0 ;
  pj::MediaCoordinate *arg2 = 0 ;
  
  arg1 = (pj::VideoWindow *)jarg1; 
  arg2 = (pj::MediaCoordinate *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::MediaCoordinate const & is null", 0);
    return ;
  } 
  try {
    (arg1)->setPos((pj::MediaCoordinate const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoWindow_setSize(void * jarg1, void * jarg2) {
  pj::VideoWindow *arg1 = (pj::VideoWindow *) 0 ;
  pj::MediaSize *arg2 = 0 ;
  
  arg1 = (pj::VideoWindow *)jarg1; 
  arg2 = (pj::MediaSize *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::MediaSize const & is null", 0);
    return ;
  } 
  try {
    (arg1)->setSize((pj::MediaSize const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoWindow_rotate(void * jarg1, int jarg2) {
  pj::VideoWindow *arg1 = (pj::VideoWindow *) 0 ;
  int arg2 ;
  
  arg1 = (pj::VideoWindow *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    (arg1)->rotate(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoWindow_setWindow(void * jarg1, void * jarg2) {
  pj::VideoWindow *arg1 = (pj::VideoWindow *) 0 ;
  pj::VideoWindowHandle *arg2 = 0 ;
  
  arg1 = (pj::VideoWindow *)jarg1; 
  arg2 = (pj::VideoWindowHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::VideoWindowHandle const & is null", 0);
    return ;
  } 
  try {
    (arg1)->setWindow((pj::VideoWindowHandle const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoWindow_setFullScreen(void * jarg1, unsigned int jarg2) {
  pj::VideoWindow *arg1 = (pj::VideoWindow *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::VideoWindow *)jarg1; 
  arg2 = jarg2 ? true : false; 
  try {
    (arg1)->setFullScreen(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoWindow_setFullScreen2(void * jarg1, int jarg2) {
  pj::VideoWindow *arg1 = (pj::VideoWindow *) 0 ;
  pjmedia_vid_dev_fullscreen_flag arg2 ;
  
  arg1 = (pj::VideoWindow *)jarg1; 
  arg2 = (pjmedia_vid_dev_fullscreen_flag)jarg2; 
  try {
    (arg1)->setFullScreen2(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VideoWindow(void * jarg1) {
  pj::VideoWindow *arg1 = (pj::VideoWindow *) 0 ;
  
  arg1 = (pj::VideoWindow *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoPreviewOpParam_rendId_set(void * jarg1, int jarg2) {
  pj::VideoPreviewOpParam *arg1 = (pj::VideoPreviewOpParam *) 0 ;
  pjmedia_vid_dev_index arg2 ;
  
  arg1 = (pj::VideoPreviewOpParam *)jarg1; 
  arg2 = (pjmedia_vid_dev_index)jarg2; 
  if (arg1) (arg1)->rendId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VideoPreviewOpParam_rendId_get(void * jarg1) {
  int jresult ;
  pj::VideoPreviewOpParam *arg1 = (pj::VideoPreviewOpParam *) 0 ;
  pjmedia_vid_dev_index result;
  
  arg1 = (pj::VideoPreviewOpParam *)jarg1; 
  result = (pjmedia_vid_dev_index) ((arg1)->rendId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoPreviewOpParam_show_set(void * jarg1, unsigned int jarg2) {
  pj::VideoPreviewOpParam *arg1 = (pj::VideoPreviewOpParam *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::VideoPreviewOpParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->show = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VideoPreviewOpParam_show_get(void * jarg1) {
  unsigned int jresult ;
  pj::VideoPreviewOpParam *arg1 = (pj::VideoPreviewOpParam *) 0 ;
  bool result;
  
  arg1 = (pj::VideoPreviewOpParam *)jarg1; 
  result = (bool) ((arg1)->show);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoPreviewOpParam_windowFlags_set(void * jarg1, unsigned int jarg2) {
  pj::VideoPreviewOpParam *arg1 = (pj::VideoPreviewOpParam *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::VideoPreviewOpParam *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->windowFlags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VideoPreviewOpParam_windowFlags_get(void * jarg1) {
  unsigned int jresult ;
  pj::VideoPreviewOpParam *arg1 = (pj::VideoPreviewOpParam *) 0 ;
  unsigned int result;
  
  arg1 = (pj::VideoPreviewOpParam *)jarg1; 
  result = (unsigned int) ((arg1)->windowFlags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoPreviewOpParam_format_set(void * jarg1, void * jarg2) {
  pj::VideoPreviewOpParam *arg1 = (pj::VideoPreviewOpParam *) 0 ;
  pj::MediaFormatVideo *arg2 = (pj::MediaFormatVideo *) 0 ;
  
  arg1 = (pj::VideoPreviewOpParam *)jarg1; 
  arg2 = (pj::MediaFormatVideo *)jarg2; 
  if (arg1) (arg1)->format = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VideoPreviewOpParam_format_get(void * jarg1) {
  void * jresult ;
  pj::VideoPreviewOpParam *arg1 = (pj::VideoPreviewOpParam *) 0 ;
  pj::MediaFormatVideo *result = 0 ;
  
  arg1 = (pj::VideoPreviewOpParam *)jarg1; 
  result = (pj::MediaFormatVideo *)& ((arg1)->format);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoPreviewOpParam_window_set(void * jarg1, void * jarg2) {
  pj::VideoPreviewOpParam *arg1 = (pj::VideoPreviewOpParam *) 0 ;
  pj::VideoWindowHandle *arg2 = (pj::VideoWindowHandle *) 0 ;
  
  arg1 = (pj::VideoPreviewOpParam *)jarg1; 
  arg2 = (pj::VideoWindowHandle *)jarg2; 
  if (arg1) (arg1)->window = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VideoPreviewOpParam_window_get(void * jarg1) {
  void * jresult ;
  pj::VideoPreviewOpParam *arg1 = (pj::VideoPreviewOpParam *) 0 ;
  pj::VideoWindowHandle *result = 0 ;
  
  arg1 = (pj::VideoPreviewOpParam *)jarg1; 
  result = (pj::VideoWindowHandle *)& ((arg1)->window);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VideoPreviewOpParam() {
  void * jresult ;
  pj::VideoPreviewOpParam *result = 0 ;
  
  result = (pj::VideoPreviewOpParam *)new pj::VideoPreviewOpParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VideoPreviewOpParam(void * jarg1) {
  pj::VideoPreviewOpParam *arg1 = (pj::VideoPreviewOpParam *) 0 ;
  
  arg1 = (pj::VideoPreviewOpParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VideoPreview(int jarg1) {
  void * jresult ;
  int arg1 ;
  pj::VideoPreview *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (pj::VideoPreview *)new pj::VideoPreview(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VideoPreview_hasNative(void * jarg1) {
  unsigned int jresult ;
  pj::VideoPreview *arg1 = (pj::VideoPreview *) 0 ;
  bool result;
  
  arg1 = (pj::VideoPreview *)jarg1; 
  result = (bool)(arg1)->hasNative();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoPreview_start(void * jarg1, void * jarg2) {
  pj::VideoPreview *arg1 = (pj::VideoPreview *) 0 ;
  pj::VideoPreviewOpParam *arg2 = 0 ;
  
  arg1 = (pj::VideoPreview *)jarg1; 
  arg2 = (pj::VideoPreviewOpParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::VideoPreviewOpParam const & is null", 0);
    return ;
  } 
  try {
    (arg1)->start((pj::VideoPreviewOpParam const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoPreview_stop(void * jarg1) {
  pj::VideoPreview *arg1 = (pj::VideoPreview *) 0 ;
  
  arg1 = (pj::VideoPreview *)jarg1; 
  try {
    (arg1)->stop();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VideoPreview_getVideoWindow(void * jarg1) {
  void * jresult ;
  pj::VideoPreview *arg1 = (pj::VideoPreview *) 0 ;
  SwigValueWrapper< pj::VideoWindow > result;
  
  arg1 = (pj::VideoPreview *)jarg1; 
  result = (arg1)->getVideoWindow();
  jresult = new pj::VideoWindow(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VideoPreview_getVideoMedia(void * jarg1) {
  void * jresult ;
  pj::VideoPreview *arg1 = (pj::VideoPreview *) 0 ;
  pj::VideoMedia result;
  
  arg1 = (pj::VideoPreview *)jarg1; 
  try {
    result = (arg1)->getVideoMedia();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::VideoMedia(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VideoPreview(void * jarg1) {
  pj::VideoPreview *arg1 = (pj::VideoPreview *) 0 ;
  
  arg1 = (pj::VideoPreview *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoDevInfo_id_set(void * jarg1, int jarg2) {
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  pjmedia_vid_dev_index arg2 ;
  
  arg1 = (pj::VideoDevInfo *)jarg1; 
  arg2 = (pjmedia_vid_dev_index)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VideoDevInfo_id_get(void * jarg1) {
  int jresult ;
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  pjmedia_vid_dev_index result;
  
  arg1 = (pj::VideoDevInfo *)jarg1; 
  result = (pjmedia_vid_dev_index) ((arg1)->id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoDevInfo_name_set(void * jarg1, const char * jarg2) {
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::VideoDevInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_VideoDevInfo_name_get(void * jarg1) {
  const char * jresult ;
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::VideoDevInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoDevInfo_driver_set(void * jarg1, const char * jarg2) {
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::VideoDevInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->driver = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_VideoDevInfo_driver_get(void * jarg1) {
  const char * jresult ;
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::VideoDevInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->driver);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoDevInfo_dir_set(void * jarg1, int jarg2) {
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  pjmedia_dir arg2 ;
  
  arg1 = (pj::VideoDevInfo *)jarg1; 
  arg2 = (pjmedia_dir)jarg2; 
  if (arg1) (arg1)->dir = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VideoDevInfo_dir_get(void * jarg1) {
  int jresult ;
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  pjmedia_dir result;
  
  arg1 = (pj::VideoDevInfo *)jarg1; 
  result = (pjmedia_dir) ((arg1)->dir);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoDevInfo_caps_set(void * jarg1, unsigned int jarg2) {
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::VideoDevInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->caps = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VideoDevInfo_caps_get(void * jarg1) {
  unsigned int jresult ;
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::VideoDevInfo *)jarg1; 
  result = (unsigned int) ((arg1)->caps);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoDevInfo_fmt_set(void * jarg1, void * jarg2) {
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  pj::MediaFormatVideoVector *arg2 = (pj::MediaFormatVideoVector *) 0 ;
  
  arg1 = (pj::VideoDevInfo *)jarg1; 
  arg2 = (pj::MediaFormatVideoVector *)jarg2; 
  if (arg1) (arg1)->fmt = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VideoDevInfo_fmt_get(void * jarg1) {
  void * jresult ;
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  pj::MediaFormatVideoVector *result = 0 ;
  
  arg1 = (pj::VideoDevInfo *)jarg1; 
  result = (pj::MediaFormatVideoVector *)& ((arg1)->fmt);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VideoDevInfo() {
  void * jresult ;
  pj::VideoDevInfo *result = 0 ;
  
  result = (pj::VideoDevInfo *)new pj::VideoDevInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VideoDevInfo(void * jarg1) {
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  
  arg1 = (pj::VideoDevInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoSwitchParam_target_id_set(void * jarg1, int jarg2) {
  pj::VideoSwitchParam *arg1 = (pj::VideoSwitchParam *) 0 ;
  pjmedia_vid_dev_index arg2 ;
  
  arg1 = (pj::VideoSwitchParam *)jarg1; 
  arg2 = (pjmedia_vid_dev_index)jarg2; 
  if (arg1) (arg1)->target_id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VideoSwitchParam_target_id_get(void * jarg1) {
  int jresult ;
  pj::VideoSwitchParam *arg1 = (pj::VideoSwitchParam *) 0 ;
  pjmedia_vid_dev_index result;
  
  arg1 = (pj::VideoSwitchParam *)jarg1; 
  result = (pjmedia_vid_dev_index) ((arg1)->target_id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VideoSwitchParam() {
  void * jresult ;
  pj::VideoSwitchParam *result = 0 ;
  
  result = (pj::VideoSwitchParam *)new pj::VideoSwitchParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VideoSwitchParam(void * jarg1) {
  pj::VideoSwitchParam *arg1 = (pj::VideoSwitchParam *) 0 ;
  
  arg1 = (pj::VideoSwitchParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VidDevManager_initSubsys(void * jarg1) {
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  
  arg1 = (pj::VidDevManager *)jarg1; 
  try {
    (arg1)->initSubsys();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VidDevManager_refreshDevs(void * jarg1) {
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  
  arg1 = (pj::VidDevManager *)jarg1; 
  try {
    (arg1)->refreshDevs();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VidDevManager_getDevCount(void * jarg1) {
  unsigned int jresult ;
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  unsigned int result;
  
  arg1 = (pj::VidDevManager *)jarg1; 
  result = (unsigned int)(arg1)->getDevCount();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VidDevManager_getDevInfo(void * jarg1, int jarg2) {
  void * jresult ;
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  int arg2 ;
  pj::VideoDevInfo result;
  
  arg1 = (pj::VidDevManager *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = ((pj::VidDevManager const *)arg1)->getDevInfo(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::VideoDevInfo(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VidDevManager_enumDev2(void * jarg1) {
  void * jresult ;
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  pj::VideoDevInfoVector2 result;
  
  arg1 = (pj::VidDevManager *)jarg1; 
  try {
    result = ((pj::VidDevManager const *)arg1)->enumDev2();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::VideoDevInfoVector2(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VidDevManager_lookupDev(void * jarg1, const char * jarg2, const char * jarg3) {
  int jresult ;
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string *arg3 = 0 ;
  int result;
  
  arg1 = (pj::VidDevManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    result = (int)((pj::VidDevManager const *)arg1)->lookupDev((pj::string const &)*arg2,(pj::string const &)*arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_VidDevManager_capName(void * jarg1, int jarg2) {
  const char * jresult ;
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  pjmedia_vid_dev_cap arg2 ;
  pj::string result;
  
  arg1 = (pj::VidDevManager *)jarg1; 
  arg2 = (pjmedia_vid_dev_cap)jarg2; 
  result = ((pj::VidDevManager const *)arg1)->capName(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VidDevManager_setFormat(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  int arg2 ;
  pj::MediaFormatVideo *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (pj::VidDevManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::MediaFormatVideo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::MediaFormatVideo const & is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  try {
    (arg1)->setFormat(arg2,(pj::MediaFormatVideo const &)*arg3,arg4);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VidDevManager_getFormat(void * jarg1, int jarg2) {
  void * jresult ;
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  int arg2 ;
  pj::MediaFormatVideo result;
  
  arg1 = (pj::VidDevManager *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = ((pj::VidDevManager const *)arg1)->getFormat(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::MediaFormatVideo(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VidDevManager_setInputScale(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  int arg2 ;
  pj::MediaSize *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (pj::VidDevManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::MediaSize *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::MediaSize const & is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  try {
    (arg1)->setInputScale(arg2,(pj::MediaSize const &)*arg3,arg4);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VidDevManager_getInputScale(void * jarg1, int jarg2) {
  void * jresult ;
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  int arg2 ;
  pj::MediaSize result;
  
  arg1 = (pj::VidDevManager *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = ((pj::VidDevManager const *)arg1)->getInputScale(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::MediaSize(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VidDevManager_setOutputWindowFlags(void * jarg1, int jarg2, int jarg3, unsigned int jarg4) {
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (pj::VidDevManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  try {
    (arg1)->setOutputWindowFlags(arg2,arg3,arg4);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_VidDevManager_getOutputWindowFlags(void * jarg1, int jarg2) {
  int jresult ;
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (pj::VidDevManager *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (int)(arg1)->getOutputWindowFlags(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VidDevManager_switchDev(void * jarg1, int jarg2, void * jarg3) {
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  int arg2 ;
  pj::VideoSwitchParam *arg3 = 0 ;
  
  arg1 = (pj::VidDevManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::VideoSwitchParam *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::VideoSwitchParam const & is null", 0);
    return ;
  } 
  try {
    (arg1)->switchDev(arg2,(pj::VideoSwitchParam const &)*arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VidDevManager_isCaptureActive(void * jarg1, int jarg2) {
  unsigned int jresult ;
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (pj::VidDevManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((pj::VidDevManager const *)arg1)->isCaptureActive(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VidDevManager_setCaptureOrient__SWIG_0(void * jarg1, int jarg2, int jarg3, unsigned int jarg4) {
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  pjmedia_vid_dev_index arg2 ;
  pjmedia_orient arg3 ;
  bool arg4 ;
  
  arg1 = (pj::VidDevManager *)jarg1; 
  arg2 = (pjmedia_vid_dev_index)jarg2; 
  arg3 = (pjmedia_orient)jarg3; 
  arg4 = jarg4 ? true : false; 
  try {
    (arg1)->setCaptureOrient(arg2,arg3,arg4);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VidDevManager_setCaptureOrient__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  pjmedia_vid_dev_index arg2 ;
  pjmedia_orient arg3 ;
  
  arg1 = (pj::VidDevManager *)jarg1; 
  arg2 = (pjmedia_vid_dev_index)jarg2; 
  arg3 = (pjmedia_orient)jarg3; 
  try {
    (arg1)->setCaptureOrient(arg2,arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecInfo_codecId_set(void * jarg1, const char * jarg2) {
  pj::CodecInfo *arg1 = (pj::CodecInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::CodecInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->codecId = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_CodecInfo_codecId_get(void * jarg1) {
  const char * jresult ;
  pj::CodecInfo *arg1 = (pj::CodecInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::CodecInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->codecId);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecInfo_priority_set(void * jarg1, unsigned char jarg2) {
  pj::CodecInfo *arg1 = (pj::CodecInfo *) 0 ;
  pj_uint8_t arg2 ;
  
  arg1 = (pj::CodecInfo *)jarg1; 
  arg2 = (pj_uint8_t)jarg2; 
  if (arg1) (arg1)->priority = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CodecInfo_priority_get(void * jarg1) {
  unsigned char jresult ;
  pj::CodecInfo *arg1 = (pj::CodecInfo *) 0 ;
  pj_uint8_t result;
  
  arg1 = (pj::CodecInfo *)jarg1; 
  result = (pj_uint8_t) ((arg1)->priority);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecInfo_desc_set(void * jarg1, const char * jarg2) {
  pj::CodecInfo *arg1 = (pj::CodecInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::CodecInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->desc = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_CodecInfo_desc_get(void * jarg1) {
  const char * jresult ;
  pj::CodecInfo *arg1 = (pj::CodecInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::CodecInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->desc);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CodecInfo() {
  void * jresult ;
  pj::CodecInfo *result = 0 ;
  
  result = (pj::CodecInfo *)new pj::CodecInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CodecInfo(void * jarg1) {
  pj::CodecInfo *arg1 = (pj::CodecInfo *) 0 ;
  
  arg1 = (pj::CodecInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecFmtp_name_set(void * jarg1, const char * jarg2) {
  pj::CodecFmtp *arg1 = (pj::CodecFmtp *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::CodecFmtp *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_CodecFmtp_name_get(void * jarg1) {
  const char * jresult ;
  pj::CodecFmtp *arg1 = (pj::CodecFmtp *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::CodecFmtp *)jarg1; 
  result = (pj::string *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecFmtp_val_set(void * jarg1, const char * jarg2) {
  pj::CodecFmtp *arg1 = (pj::CodecFmtp *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::CodecFmtp *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->val = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_CodecFmtp_val_get(void * jarg1) {
  const char * jresult ;
  pj::CodecFmtp *arg1 = (pj::CodecFmtp *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::CodecFmtp *)jarg1; 
  result = (pj::string *) & ((arg1)->val);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CodecFmtp() {
  void * jresult ;
  pj::CodecFmtp *result = 0 ;
  
  result = (pj::CodecFmtp *)new pj::CodecFmtp();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CodecFmtp(void * jarg1) {
  pj::CodecFmtp *arg1 = (pj::CodecFmtp *) 0 ;
  
  arg1 = (pj::CodecFmtp *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecParamInfo_clockRate_set(void * jarg1, unsigned int jarg2) {
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->clockRate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecParamInfo_clockRate_get(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  result = (unsigned int) ((arg1)->clockRate);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecParamInfo_channelCnt_set(void * jarg1, unsigned int jarg2) {
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->channelCnt = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecParamInfo_channelCnt_get(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  result = (unsigned int) ((arg1)->channelCnt);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecParamInfo_avgBps_set(void * jarg1, unsigned int jarg2) {
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->avgBps = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecParamInfo_avgBps_get(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  result = (unsigned int) ((arg1)->avgBps);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecParamInfo_maxBps_set(void * jarg1, unsigned int jarg2) {
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->maxBps = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecParamInfo_maxBps_get(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  result = (unsigned int) ((arg1)->maxBps);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecParamInfo_maxRxFrameSize_set(void * jarg1, unsigned int jarg2) {
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->maxRxFrameSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecParamInfo_maxRxFrameSize_get(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  result = (unsigned int) ((arg1)->maxRxFrameSize);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecParamInfo_frameLen_set(void * jarg1, unsigned int jarg2) {
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->frameLen = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecParamInfo_frameLen_get(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  result = (unsigned int) ((arg1)->frameLen);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecParamInfo_frameLenDenum_set(void * jarg1, unsigned int jarg2) {
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->frameLenDenum = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecParamInfo_frameLenDenum_get(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  result = (unsigned int) ((arg1)->frameLenDenum);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecParamInfo_encFrameLen_set(void * jarg1, unsigned int jarg2) {
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->encFrameLen = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecParamInfo_encFrameLen_get(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  result = (unsigned int) ((arg1)->encFrameLen);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecParamInfo_encFrameLenDenum_set(void * jarg1, unsigned int jarg2) {
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->encFrameLenDenum = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecParamInfo_encFrameLenDenum_get(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  result = (unsigned int) ((arg1)->encFrameLenDenum);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecParamInfo_pcmBitsPerSample_set(void * jarg1, unsigned int jarg2) {
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->pcmBitsPerSample = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecParamInfo_pcmBitsPerSample_get(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  result = (unsigned int) ((arg1)->pcmBitsPerSample);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecParamInfo_pt_set(void * jarg1, unsigned int jarg2) {
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->pt = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecParamInfo_pt_get(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  result = (unsigned int) ((arg1)->pt);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecParamInfo_fmtId_set(void * jarg1, int jarg2) {
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  pjmedia_format_id arg2 ;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  arg2 = (pjmedia_format_id)jarg2; 
  if (arg1) (arg1)->fmtId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CodecParamInfo_fmtId_get(void * jarg1) {
  int jresult ;
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  pjmedia_format_id result;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  result = (pjmedia_format_id) ((arg1)->fmtId);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CodecParamInfo() {
  void * jresult ;
  pj::CodecParamInfo *result = 0 ;
  
  result = (pj::CodecParamInfo *)new pj::CodecParamInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CodecParamInfo(void * jarg1) {
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecParamSetting_frmPerPkt_set(void * jarg1, unsigned int jarg2) {
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->frmPerPkt = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecParamSetting_frmPerPkt_get(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  result = (unsigned int) ((arg1)->frmPerPkt);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecParamSetting_vad_set(void * jarg1, unsigned int jarg2) {
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->vad = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecParamSetting_vad_get(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  bool result;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  result = (bool) ((arg1)->vad);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecParamSetting_cng_set(void * jarg1, unsigned int jarg2) {
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->cng = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecParamSetting_cng_get(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  bool result;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  result = (bool) ((arg1)->cng);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecParamSetting_penh_set(void * jarg1, unsigned int jarg2) {
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->penh = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecParamSetting_penh_get(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  bool result;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  result = (bool) ((arg1)->penh);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecParamSetting_plc_set(void * jarg1, unsigned int jarg2) {
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->plc = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecParamSetting_plc_get(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  bool result;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  result = (bool) ((arg1)->plc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecParamSetting_reserved_set(void * jarg1, unsigned int jarg2) {
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->reserved = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecParamSetting_reserved_get(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  bool result;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  result = (bool) ((arg1)->reserved);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecParamSetting_encFmtp_set(void * jarg1, void * jarg2) {
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  pj::CodecFmtpVector *arg2 = (pj::CodecFmtpVector *) 0 ;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  arg2 = (pj::CodecFmtpVector *)jarg2; 
  if (arg1) (arg1)->encFmtp = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CodecParamSetting_encFmtp_get(void * jarg1) {
  void * jresult ;
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  pj::CodecFmtpVector *result = 0 ;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  result = (pj::CodecFmtpVector *)& ((arg1)->encFmtp);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecParamSetting_decFmtp_set(void * jarg1, void * jarg2) {
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  pj::CodecFmtpVector *arg2 = (pj::CodecFmtpVector *) 0 ;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  arg2 = (pj::CodecFmtpVector *)jarg2; 
  if (arg1) (arg1)->decFmtp = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CodecParamSetting_decFmtp_get(void * jarg1) {
  void * jresult ;
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  pj::CodecFmtpVector *result = 0 ;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  result = (pj::CodecFmtpVector *)& ((arg1)->decFmtp);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecParamSetting_packetLoss_set(void * jarg1, unsigned int jarg2) {
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->packetLoss = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecParamSetting_packetLoss_get(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  result = (unsigned int) ((arg1)->packetLoss);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecParamSetting_complexity_set(void * jarg1, unsigned int jarg2) {
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->complexity = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecParamSetting_complexity_get(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  result = (unsigned int) ((arg1)->complexity);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecParamSetting_cbr_set(void * jarg1, unsigned int jarg2) {
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->cbr = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecParamSetting_cbr_get(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  bool result;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  result = (bool) ((arg1)->cbr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CodecParamSetting() {
  void * jresult ;
  pj::CodecParamSetting *result = 0 ;
  
  result = (pj::CodecParamSetting *)new pj::CodecParamSetting();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CodecParamSetting(void * jarg1) {
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecParam_info_set(void * jarg1, void * jarg2) {
  pj::CodecParam *arg1 = (pj::CodecParam *) 0 ;
  pj::CodecParamInfo *arg2 = (pj::CodecParamInfo *) 0 ;
  
  arg1 = (pj::CodecParam *)jarg1; 
  arg2 = (pj::CodecParamInfo *)jarg2; 
  if (arg1) (arg1)->info = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CodecParam_info_get(void * jarg1) {
  void * jresult ;
  pj::CodecParam *arg1 = (pj::CodecParam *) 0 ;
  pj::CodecParamInfo *result = 0 ;
  
  arg1 = (pj::CodecParam *)jarg1; 
  result = (pj::CodecParamInfo *)& ((arg1)->info);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecParam_setting_set(void * jarg1, void * jarg2) {
  pj::CodecParam *arg1 = (pj::CodecParam *) 0 ;
  pj::CodecParamSetting *arg2 = (pj::CodecParamSetting *) 0 ;
  
  arg1 = (pj::CodecParam *)jarg1; 
  arg2 = (pj::CodecParamSetting *)jarg2; 
  if (arg1) (arg1)->setting = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CodecParam_setting_get(void * jarg1) {
  void * jresult ;
  pj::CodecParam *arg1 = (pj::CodecParam *) 0 ;
  pj::CodecParamSetting *result = 0 ;
  
  arg1 = (pj::CodecParam *)jarg1; 
  result = (pj::CodecParamSetting *)& ((arg1)->setting);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CodecParam() {
  void * jresult ;
  pj::CodecParam *result = 0 ;
  
  result = (pj::CodecParam *)new pj::CodecParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CodecParam(void * jarg1) {
  pj::CodecParam *arg1 = (pj::CodecParam *) 0 ;
  
  arg1 = (pj::CodecParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecOpusConfig_sample_rate_set(void * jarg1, unsigned int jarg2) {
  pj::CodecOpusConfig *arg1 = (pj::CodecOpusConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CodecOpusConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->sample_rate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecOpusConfig_sample_rate_get(void * jarg1) {
  unsigned int jresult ;
  pj::CodecOpusConfig *arg1 = (pj::CodecOpusConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CodecOpusConfig *)jarg1; 
  result = (unsigned int) ((arg1)->sample_rate);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecOpusConfig_channel_cnt_set(void * jarg1, unsigned int jarg2) {
  pj::CodecOpusConfig *arg1 = (pj::CodecOpusConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CodecOpusConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->channel_cnt = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecOpusConfig_channel_cnt_get(void * jarg1) {
  unsigned int jresult ;
  pj::CodecOpusConfig *arg1 = (pj::CodecOpusConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CodecOpusConfig *)jarg1; 
  result = (unsigned int) ((arg1)->channel_cnt);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecOpusConfig_frm_ptime_set(void * jarg1, unsigned int jarg2) {
  pj::CodecOpusConfig *arg1 = (pj::CodecOpusConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CodecOpusConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->frm_ptime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecOpusConfig_frm_ptime_get(void * jarg1) {
  unsigned int jresult ;
  pj::CodecOpusConfig *arg1 = (pj::CodecOpusConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CodecOpusConfig *)jarg1; 
  result = (unsigned int) ((arg1)->frm_ptime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecOpusConfig_frm_ptime_denum_set(void * jarg1, unsigned int jarg2) {
  pj::CodecOpusConfig *arg1 = (pj::CodecOpusConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CodecOpusConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->frm_ptime_denum = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecOpusConfig_frm_ptime_denum_get(void * jarg1) {
  unsigned int jresult ;
  pj::CodecOpusConfig *arg1 = (pj::CodecOpusConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CodecOpusConfig *)jarg1; 
  result = (unsigned int) ((arg1)->frm_ptime_denum);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecOpusConfig_bit_rate_set(void * jarg1, unsigned int jarg2) {
  pj::CodecOpusConfig *arg1 = (pj::CodecOpusConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CodecOpusConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->bit_rate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecOpusConfig_bit_rate_get(void * jarg1) {
  unsigned int jresult ;
  pj::CodecOpusConfig *arg1 = (pj::CodecOpusConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CodecOpusConfig *)jarg1; 
  result = (unsigned int) ((arg1)->bit_rate);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecOpusConfig_packet_loss_set(void * jarg1, unsigned int jarg2) {
  pj::CodecOpusConfig *arg1 = (pj::CodecOpusConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CodecOpusConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->packet_loss = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecOpusConfig_packet_loss_get(void * jarg1) {
  unsigned int jresult ;
  pj::CodecOpusConfig *arg1 = (pj::CodecOpusConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CodecOpusConfig *)jarg1; 
  result = (unsigned int) ((arg1)->packet_loss);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecOpusConfig_complexity_set(void * jarg1, unsigned int jarg2) {
  pj::CodecOpusConfig *arg1 = (pj::CodecOpusConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CodecOpusConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->complexity = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecOpusConfig_complexity_get(void * jarg1) {
  unsigned int jresult ;
  pj::CodecOpusConfig *arg1 = (pj::CodecOpusConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CodecOpusConfig *)jarg1; 
  result = (unsigned int) ((arg1)->complexity);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecOpusConfig_cbr_set(void * jarg1, unsigned int jarg2) {
  pj::CodecOpusConfig *arg1 = (pj::CodecOpusConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::CodecOpusConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->cbr = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecOpusConfig_cbr_get(void * jarg1) {
  unsigned int jresult ;
  pj::CodecOpusConfig *arg1 = (pj::CodecOpusConfig *) 0 ;
  bool result;
  
  arg1 = (pj::CodecOpusConfig *)jarg1; 
  result = (bool) ((arg1)->cbr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CodecOpusConfig() {
  void * jresult ;
  pj::CodecOpusConfig *result = 0 ;
  
  result = (pj::CodecOpusConfig *)new pj::CodecOpusConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CodecOpusConfig(void * jarg1) {
  pj::CodecOpusConfig *arg1 = (pj::CodecOpusConfig *) 0 ;
  
  arg1 = (pj::CodecOpusConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecLyraConfig_bitRate_set(void * jarg1, unsigned int jarg2) {
  pj::CodecLyraConfig *arg1 = (pj::CodecLyraConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CodecLyraConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->bitRate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CodecLyraConfig_bitRate_get(void * jarg1) {
  unsigned int jresult ;
  pj::CodecLyraConfig *arg1 = (pj::CodecLyraConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CodecLyraConfig *)jarg1; 
  result = (unsigned int) ((arg1)->bitRate);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CodecLyraConfig_modelPath_set(void * jarg1, const char * jarg2) {
  pj::CodecLyraConfig *arg1 = (pj::CodecLyraConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::CodecLyraConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->modelPath = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_CodecLyraConfig_modelPath_get(void * jarg1) {
  const char * jresult ;
  pj::CodecLyraConfig *arg1 = (pj::CodecLyraConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::CodecLyraConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->modelPath);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CodecLyraConfig() {
  void * jresult ;
  pj::CodecLyraConfig *result = 0 ;
  
  result = (pj::CodecLyraConfig *)new pj::CodecLyraConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CodecLyraConfig(void * jarg1) {
  pj::CodecLyraConfig *arg1 = (pj::CodecLyraConfig *) 0 ;
  
  arg1 = (pj::CodecLyraConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VidCodecParam_dir_set(void * jarg1, int jarg2) {
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pjmedia_dir arg2 ;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  arg2 = (pjmedia_dir)jarg2; 
  if (arg1) (arg1)->dir = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VidCodecParam_dir_get(void * jarg1) {
  int jresult ;
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pjmedia_dir result;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  result = (pjmedia_dir) ((arg1)->dir);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VidCodecParam_packing_set(void * jarg1, int jarg2) {
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pjmedia_vid_packing arg2 ;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  arg2 = (pjmedia_vid_packing)jarg2; 
  if (arg1) (arg1)->packing = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VidCodecParam_packing_get(void * jarg1) {
  int jresult ;
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pjmedia_vid_packing result;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  result = (pjmedia_vid_packing) ((arg1)->packing);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VidCodecParam_encFmt_set(void * jarg1, void * jarg2) {
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pj::MediaFormatVideo *arg2 = (pj::MediaFormatVideo *) 0 ;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  arg2 = (pj::MediaFormatVideo *)jarg2; 
  if (arg1) (arg1)->encFmt = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VidCodecParam_encFmt_get(void * jarg1) {
  void * jresult ;
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pj::MediaFormatVideo *result = 0 ;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  result = (pj::MediaFormatVideo *)& ((arg1)->encFmt);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VidCodecParam_encFmtp_set(void * jarg1, void * jarg2) {
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pj::CodecFmtpVector *arg2 = (pj::CodecFmtpVector *) 0 ;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  arg2 = (pj::CodecFmtpVector *)jarg2; 
  if (arg1) (arg1)->encFmtp = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VidCodecParam_encFmtp_get(void * jarg1) {
  void * jresult ;
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pj::CodecFmtpVector *result = 0 ;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  result = (pj::CodecFmtpVector *)& ((arg1)->encFmtp);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VidCodecParam_encMtu_set(void * jarg1, unsigned int jarg2) {
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->encMtu = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VidCodecParam_encMtu_get(void * jarg1) {
  unsigned int jresult ;
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  unsigned int result;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  result = (unsigned int) ((arg1)->encMtu);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VidCodecParam_decFmt_set(void * jarg1, void * jarg2) {
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pj::MediaFormatVideo *arg2 = (pj::MediaFormatVideo *) 0 ;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  arg2 = (pj::MediaFormatVideo *)jarg2; 
  if (arg1) (arg1)->decFmt = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VidCodecParam_decFmt_get(void * jarg1) {
  void * jresult ;
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pj::MediaFormatVideo *result = 0 ;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  result = (pj::MediaFormatVideo *)& ((arg1)->decFmt);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VidCodecParam_decFmtp_set(void * jarg1, void * jarg2) {
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pj::CodecFmtpVector *arg2 = (pj::CodecFmtpVector *) 0 ;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  arg2 = (pj::CodecFmtpVector *)jarg2; 
  if (arg1) (arg1)->decFmtp = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VidCodecParam_decFmtp_get(void * jarg1) {
  void * jresult ;
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pj::CodecFmtpVector *result = 0 ;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  result = (pj::CodecFmtpVector *)& ((arg1)->decFmtp);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VidCodecParam_ignoreFmtp_set(void * jarg1, unsigned int jarg2) {
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ignoreFmtp = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VidCodecParam_ignoreFmtp_get(void * jarg1) {
  unsigned int jresult ;
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  bool result;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  result = (bool) ((arg1)->ignoreFmtp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VidCodecParam() {
  void * jresult ;
  pj::VidCodecParam *result = 0 ;
  
  result = (pj::VidCodecParam *)new pj::VidCodecParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VidCodecParam(void * jarg1) {
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFmtChangedEvent_newWidth_set(void * jarg1, unsigned int jarg2) {
  pj::MediaFmtChangedEvent *arg1 = (pj::MediaFmtChangedEvent *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaFmtChangedEvent *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->newWidth = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaFmtChangedEvent_newWidth_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaFmtChangedEvent *arg1 = (pj::MediaFmtChangedEvent *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaFmtChangedEvent *)jarg1; 
  result = (unsigned int) ((arg1)->newWidth);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaFmtChangedEvent_newHeight_set(void * jarg1, unsigned int jarg2) {
  pj::MediaFmtChangedEvent *arg1 = (pj::MediaFmtChangedEvent *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaFmtChangedEvent *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->newHeight = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaFmtChangedEvent_newHeight_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaFmtChangedEvent *arg1 = (pj::MediaFmtChangedEvent *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaFmtChangedEvent *)jarg1; 
  result = (unsigned int) ((arg1)->newHeight);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MediaFmtChangedEvent() {
  void * jresult ;
  pj::MediaFmtChangedEvent *result = 0 ;
  
  result = (pj::MediaFmtChangedEvent *)new pj::MediaFmtChangedEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MediaFmtChangedEvent(void * jarg1) {
  pj::MediaFmtChangedEvent *arg1 = (pj::MediaFmtChangedEvent *) 0 ;
  
  arg1 = (pj::MediaFmtChangedEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudDevErrorEvent_dir_set(void * jarg1, int jarg2) {
  pj::AudDevErrorEvent *arg1 = (pj::AudDevErrorEvent *) 0 ;
  pjmedia_dir arg2 ;
  
  arg1 = (pj::AudDevErrorEvent *)jarg1; 
  arg2 = (pjmedia_dir)jarg2; 
  if (arg1) (arg1)->dir = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudDevErrorEvent_dir_get(void * jarg1) {
  int jresult ;
  pj::AudDevErrorEvent *arg1 = (pj::AudDevErrorEvent *) 0 ;
  pjmedia_dir result;
  
  arg1 = (pj::AudDevErrorEvent *)jarg1; 
  result = (pjmedia_dir) ((arg1)->dir);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudDevErrorEvent_id_set(void * jarg1, int jarg2) {
  pj::AudDevErrorEvent *arg1 = (pj::AudDevErrorEvent *) 0 ;
  int arg2 ;
  
  arg1 = (pj::AudDevErrorEvent *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudDevErrorEvent_id_get(void * jarg1) {
  int jresult ;
  pj::AudDevErrorEvent *arg1 = (pj::AudDevErrorEvent *) 0 ;
  int result;
  
  arg1 = (pj::AudDevErrorEvent *)jarg1; 
  result = (int) ((arg1)->id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudDevErrorEvent_status_set(void * jarg1, int jarg2) {
  pj::AudDevErrorEvent *arg1 = (pj::AudDevErrorEvent *) 0 ;
  pj_status_t arg2 ;
  
  arg1 = (pj::AudDevErrorEvent *)jarg1; 
  arg2 = (pj_status_t)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudDevErrorEvent_status_get(void * jarg1) {
  int jresult ;
  pj::AudDevErrorEvent *arg1 = (pj::AudDevErrorEvent *) 0 ;
  pj_status_t result;
  
  arg1 = (pj::AudDevErrorEvent *)jarg1; 
  result = (pj_status_t) ((arg1)->status);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AudDevErrorEvent() {
  void * jresult ;
  pj::AudDevErrorEvent *result = 0 ;
  
  result = (pj::AudDevErrorEvent *)new pj::AudDevErrorEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AudDevErrorEvent(void * jarg1) {
  pj::AudDevErrorEvent *arg1 = (pj::AudDevErrorEvent *) 0 ;
  
  arg1 = (pj::AudDevErrorEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaEventData_fmtChanged_set(void * jarg1, void * jarg2) {
  pj::MediaEventData *arg1 = (pj::MediaEventData *) 0 ;
  pj::MediaFmtChangedEvent *arg2 = (pj::MediaFmtChangedEvent *) 0 ;
  
  arg1 = (pj::MediaEventData *)jarg1; 
  arg2 = (pj::MediaFmtChangedEvent *)jarg2; 
  if (arg1) (arg1)->fmtChanged = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MediaEventData_fmtChanged_get(void * jarg1) {
  void * jresult ;
  pj::MediaEventData *arg1 = (pj::MediaEventData *) 0 ;
  pj::MediaFmtChangedEvent *result = 0 ;
  
  arg1 = (pj::MediaEventData *)jarg1; 
  result = (pj::MediaFmtChangedEvent *)& ((arg1)->fmtChanged);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaEventData_audDevError_set(void * jarg1, void * jarg2) {
  pj::MediaEventData *arg1 = (pj::MediaEventData *) 0 ;
  pj::AudDevErrorEvent *arg2 = (pj::AudDevErrorEvent *) 0 ;
  
  arg1 = (pj::MediaEventData *)jarg1; 
  arg2 = (pj::AudDevErrorEvent *)jarg2; 
  if (arg1) (arg1)->audDevError = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MediaEventData_audDevError_get(void * jarg1) {
  void * jresult ;
  pj::MediaEventData *arg1 = (pj::MediaEventData *) 0 ;
  pj::AudDevErrorEvent *result = 0 ;
  
  arg1 = (pj::MediaEventData *)jarg1; 
  result = (pj::AudDevErrorEvent *)& ((arg1)->audDevError);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaEventData_ptr_set(void * jarg1, void * jarg2) {
  pj::MediaEventData *arg1 = (pj::MediaEventData *) 0 ;
  pj::GenericData arg2 = (pj::GenericData) 0 ;
  
  arg1 = (pj::MediaEventData *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->ptr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MediaEventData_ptr_get(void * jarg1) {
  void * jresult ;
  pj::MediaEventData *arg1 = (pj::MediaEventData *) 0 ;
  pj::GenericData result;
  
  arg1 = (pj::MediaEventData *)jarg1; 
  result = (pj::GenericData) ((arg1)->ptr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MediaEventData() {
  void * jresult ;
  pj::MediaEventData *result = 0 ;
  
  result = (pj::MediaEventData *)new pj::MediaEventData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MediaEventData(void * jarg1) {
  pj::MediaEventData *arg1 = (pj::MediaEventData *) 0 ;
  
  arg1 = (pj::MediaEventData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaEvent_type_set(void * jarg1, int jarg2) {
  pj::MediaEvent *arg1 = (pj::MediaEvent *) 0 ;
  pjmedia_event_type arg2 ;
  
  arg1 = (pj::MediaEvent *)jarg1; 
  arg2 = (pjmedia_event_type)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MediaEvent_type_get(void * jarg1) {
  int jresult ;
  pj::MediaEvent *arg1 = (pj::MediaEvent *) 0 ;
  pjmedia_event_type result;
  
  arg1 = (pj::MediaEvent *)jarg1; 
  result = (pjmedia_event_type) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaEvent_data_set(void * jarg1, void * jarg2) {
  pj::MediaEvent *arg1 = (pj::MediaEvent *) 0 ;
  pj::MediaEventData *arg2 = (pj::MediaEventData *) 0 ;
  
  arg1 = (pj::MediaEvent *)jarg1; 
  arg2 = (pj::MediaEventData *)jarg2; 
  if (arg1) (arg1)->data = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MediaEvent_data_get(void * jarg1) {
  void * jresult ;
  pj::MediaEvent *arg1 = (pj::MediaEvent *) 0 ;
  pj::MediaEventData *result = 0 ;
  
  arg1 = (pj::MediaEvent *)jarg1; 
  result = (pj::MediaEventData *)& ((arg1)->data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaEvent_pjMediaEvent_set(void * jarg1, void * jarg2) {
  pj::MediaEvent *arg1 = (pj::MediaEvent *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (pj::MediaEvent *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->pjMediaEvent = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MediaEvent_pjMediaEvent_get(void * jarg1) {
  void * jresult ;
  pj::MediaEvent *arg1 = (pj::MediaEvent *) 0 ;
  void *result = 0 ;
  
  arg1 = (pj::MediaEvent *)jarg1; 
  result = (void *) ((arg1)->pjMediaEvent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MediaEvent() {
  void * jresult ;
  pj::MediaEvent *result = 0 ;
  
  result = (pj::MediaEvent *)new pj::MediaEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MediaEvent(void * jarg1) {
  pj::MediaEvent *arg1 = (pj::MediaEvent *) 0 ;
  
  arg1 = (pj::MediaEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AudioMediaCapture() {
  void * jresult ;
  pj::AudioMediaCapture *result = 0 ;
  
  result = (pj::AudioMediaCapture *)new SwigDirector_AudioMediaCapture();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AudioMediaCapture(void * jarg1) {
  pj::AudioMediaCapture *arg1 = (pj::AudioMediaCapture *) 0 ;
  
  arg1 = (pj::AudioMediaCapture *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioMediaCapture_createMediaCapture(void * jarg1, int jarg2) {
  int jresult ;
  pj::AudioMediaCapture *arg1 = (pj::AudioMediaCapture *) 0 ;
  pjsua_call_id arg2 ;
  pj_status_t result;
  
  arg1 = (pj::AudioMediaCapture *)jarg1; 
  arg2 = (pjsua_call_id)jarg2; 
  result = (pj_status_t)(arg1)->createMediaCapture(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaCapture_stopMediaCapture(void * jarg1) {
  pj::AudioMediaCapture *arg1 = (pj::AudioMediaCapture *) 0 ;
  
  arg1 = (pj::AudioMediaCapture *)jarg1; 
  (arg1)->stopMediaCapture();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioMediaCapture_getFrameSize(void * jarg1) {
  unsigned int jresult ;
  pj::AudioMediaCapture *arg1 = (pj::AudioMediaCapture *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudioMediaCapture *)jarg1; 
  result = (unsigned int)(arg1)->getFrameSize();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioMediaCapture_getFramesCaptured(void * jarg1) {
  unsigned int jresult ;
  pj::AudioMediaCapture *arg1 = (pj::AudioMediaCapture *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudioMediaCapture *)jarg1; 
  result = (unsigned int)(arg1)->getFramesCaptured();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioMediaCapture_getFrameBuffer(void * jarg1) {
  void * jresult ;
  pj::AudioMediaCapture *arg1 = (pj::AudioMediaCapture *) 0 ;
  void *result = 0 ;
  
  arg1 = (pj::AudioMediaCapture *)jarg1; 
  result = (void *)(arg1)->getFrameBuffer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaCapture_onNewFrame(void * jarg1) {
  pj::AudioMediaCapture *arg1 = (pj::AudioMediaCapture *) 0 ;
  
  arg1 = (pj::AudioMediaCapture *)jarg1; 
  (arg1)->onNewFrame();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioMediaCapture_director_connect(void *objarg, SwigDirector_AudioMediaCapture::SWIG_Callback0_t callback0) {
  pj::AudioMediaCapture *obj = (pj::AudioMediaCapture *)objarg;
  SwigDirector_AudioMediaCapture *director = static_cast<SwigDirector_AudioMediaCapture *>(obj);
  director->swig_connect_director(callback0);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PresenceStatus_status_set(void * jarg1, int jarg2) {
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pjsua_buddy_status arg2 ;
  
  arg1 = (pj::PresenceStatus *)jarg1; 
  arg2 = (pjsua_buddy_status)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PresenceStatus_status_get(void * jarg1) {
  int jresult ;
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pjsua_buddy_status result;
  
  arg1 = (pj::PresenceStatus *)jarg1; 
  result = (pjsua_buddy_status) ((arg1)->status);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PresenceStatus_statusText_set(void * jarg1, const char * jarg2) {
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::PresenceStatus *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->statusText = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_PresenceStatus_statusText_get(void * jarg1) {
  const char * jresult ;
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::PresenceStatus *)jarg1; 
  result = (pj::string *) & ((arg1)->statusText);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PresenceStatus_activity_set(void * jarg1, int jarg2) {
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pjrpid_activity arg2 ;
  
  arg1 = (pj::PresenceStatus *)jarg1; 
  arg2 = (pjrpid_activity)jarg2; 
  if (arg1) (arg1)->activity = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PresenceStatus_activity_get(void * jarg1) {
  int jresult ;
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pjrpid_activity result;
  
  arg1 = (pj::PresenceStatus *)jarg1; 
  result = (pjrpid_activity) ((arg1)->activity);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PresenceStatus_note_set(void * jarg1, const char * jarg2) {
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::PresenceStatus *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->note = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_PresenceStatus_note_get(void * jarg1) {
  const char * jresult ;
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::PresenceStatus *)jarg1; 
  result = (pj::string *) & ((arg1)->note);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PresenceStatus_rpidId_set(void * jarg1, const char * jarg2) {
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::PresenceStatus *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->rpidId = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_PresenceStatus_rpidId_get(void * jarg1) {
  const char * jresult ;
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::PresenceStatus *)jarg1; 
  result = (pj::string *) & ((arg1)->rpidId);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PresenceStatus() {
  void * jresult ;
  pj::PresenceStatus *result = 0 ;
  
  result = (pj::PresenceStatus *)new pj::PresenceStatus();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PresenceStatus(void * jarg1) {
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  
  arg1 = (pj::PresenceStatus *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyConfig_uri_set(void * jarg1, const char * jarg2) {
  pj::BuddyConfig *arg1 = (pj::BuddyConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::BuddyConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->uri = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_BuddyConfig_uri_get(void * jarg1) {
  const char * jresult ;
  pj::BuddyConfig *arg1 = (pj::BuddyConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::BuddyConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->uri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyConfig_subscribe_set(void * jarg1, unsigned int jarg2) {
  pj::BuddyConfig *arg1 = (pj::BuddyConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::BuddyConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->subscribe = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BuddyConfig_subscribe_get(void * jarg1) {
  unsigned int jresult ;
  pj::BuddyConfig *arg1 = (pj::BuddyConfig *) 0 ;
  bool result;
  
  arg1 = (pj::BuddyConfig *)jarg1; 
  result = (bool) ((arg1)->subscribe);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyConfig_readObject(void * jarg1, void * jarg2) {
  pj::BuddyConfig *arg1 = (pj::BuddyConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::BuddyConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyConfig_writeObject(void * jarg1, void * jarg2) {
  pj::BuddyConfig *arg1 = (pj::BuddyConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::BuddyConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & is null", 0);
    return ;
  } 
  try {
    ((pj::BuddyConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BuddyConfig() {
  void * jresult ;
  pj::BuddyConfig *result = 0 ;
  
  result = (pj::BuddyConfig *)new pj::BuddyConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BuddyConfig(void * jarg1) {
  pj::BuddyConfig *arg1 = (pj::BuddyConfig *) 0 ;
  
  arg1 = (pj::BuddyConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyInfo_uri_set(void * jarg1, const char * jarg2) {
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->uri = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_BuddyInfo_uri_get(void * jarg1) {
  const char * jresult ;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->uri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyInfo_contact_set(void * jarg1, const char * jarg2) {
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->contact = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_BuddyInfo_contact_get(void * jarg1) {
  const char * jresult ;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->contact);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyInfo_presMonitorEnabled_set(void * jarg1, unsigned int jarg2) {
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->presMonitorEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BuddyInfo_presMonitorEnabled_get(void * jarg1) {
  unsigned int jresult ;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  bool result;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  result = (bool) ((arg1)->presMonitorEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyInfo_subState_set(void * jarg1, int jarg2) {
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pjsip_evsub_state arg2 ;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  arg2 = (pjsip_evsub_state)jarg2; 
  if (arg1) (arg1)->subState = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BuddyInfo_subState_get(void * jarg1) {
  int jresult ;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pjsip_evsub_state result;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  result = (pjsip_evsub_state) ((arg1)->subState);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyInfo_subStateName_set(void * jarg1, const char * jarg2) {
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->subStateName = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_BuddyInfo_subStateName_get(void * jarg1) {
  const char * jresult ;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->subStateName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyInfo_subTermCode_set(void * jarg1, int jarg2) {
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pjsip_status_code arg2 ;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->subTermCode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BuddyInfo_subTermCode_get(void * jarg1) {
  int jresult ;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pjsip_status_code result;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  result = (pjsip_status_code) ((arg1)->subTermCode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyInfo_subTermReason_set(void * jarg1, const char * jarg2) {
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->subTermReason = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_BuddyInfo_subTermReason_get(void * jarg1) {
  const char * jresult ;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->subTermReason);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuddyInfo_presStatus_set(void * jarg1, void * jarg2) {
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::PresenceStatus *arg2 = (pj::PresenceStatus *) 0 ;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  arg2 = (pj::PresenceStatus *)jarg2; 
  if (arg1) (arg1)->presStatus = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BuddyInfo_presStatus_get(void * jarg1) {
  void * jresult ;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::PresenceStatus *result = 0 ;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  result = (pj::PresenceStatus *)& ((arg1)->presStatus);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BuddyInfo() {
  void * jresult ;
  pj::BuddyInfo *result = 0 ;
  
  result = (pj::BuddyInfo *)new pj::BuddyInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BuddyInfo(void * jarg1) {
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnBuddyEvSubStateParam_e_set(void * jarg1, void * jarg2) {
  pj::OnBuddyEvSubStateParam *arg1 = (pj::OnBuddyEvSubStateParam *) 0 ;
  pj::SipEvent *arg2 = (pj::SipEvent *) 0 ;
  
  arg1 = (pj::OnBuddyEvSubStateParam *)jarg1; 
  arg2 = (pj::SipEvent *)jarg2; 
  if (arg1) (arg1)->e = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnBuddyEvSubStateParam_e_get(void * jarg1) {
  void * jresult ;
  pj::OnBuddyEvSubStateParam *arg1 = (pj::OnBuddyEvSubStateParam *) 0 ;
  pj::SipEvent *result = 0 ;
  
  arg1 = (pj::OnBuddyEvSubStateParam *)jarg1; 
  result = (pj::SipEvent *)& ((arg1)->e);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnBuddyEvSubStateParam() {
  void * jresult ;
  pj::OnBuddyEvSubStateParam *result = 0 ;
  
  result = (pj::OnBuddyEvSubStateParam *)new pj::OnBuddyEvSubStateParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnBuddyEvSubStateParam(void * jarg1) {
  pj::OnBuddyEvSubStateParam *arg1 = (pj::OnBuddyEvSubStateParam *) 0 ;
  
  arg1 = (pj::OnBuddyEvSubStateParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Buddy() {
  void * jresult ;
  pj::Buddy *result = 0 ;
  
  result = (pj::Buddy *)new SwigDirector_Buddy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Buddy(void * jarg1) {
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  
  arg1 = (pj::Buddy *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Buddy_create(void * jarg1, void * jarg2, void * jarg3) {
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  pj::Account *arg2 = 0 ;
  pj::BuddyConfig *arg3 = 0 ;
  
  arg1 = (pj::Buddy *)jarg1; 
  arg2 = (pj::Account *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::Account & is null", 0);
    return ;
  } 
  arg3 = (pj::BuddyConfig *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::BuddyConfig const & is null", 0);
    return ;
  } 
  try {
    (arg1)->create(*arg2,(pj::BuddyConfig const &)*arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Buddy_isValid(void * jarg1) {
  unsigned int jresult ;
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  bool result;
  
  arg1 = (pj::Buddy *)jarg1; 
  result = (bool)((pj::Buddy const *)arg1)->isValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Buddy_getId(void * jarg1) {
  int jresult ;
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  int result;
  
  arg1 = (pj::Buddy *)jarg1; 
  result = (int)((pj::Buddy const *)arg1)->getId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Buddy_getInfo(void * jarg1) {
  void * jresult ;
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  pj::BuddyInfo result;
  
  arg1 = (pj::Buddy *)jarg1; 
  try {
    result = ((pj::Buddy const *)arg1)->getInfo();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::BuddyInfo(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Buddy_subscribePresence(void * jarg1, unsigned int jarg2) {
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::Buddy *)jarg1; 
  arg2 = jarg2 ? true : false; 
  try {
    (arg1)->subscribePresence(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Buddy_updatePresence(void * jarg1) {
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  
  arg1 = (pj::Buddy *)jarg1; 
  try {
    (arg1)->updatePresence();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Buddy_sendInstantMessage(void * jarg1, void * jarg2) {
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  pj::SendInstantMessageParam *arg2 = 0 ;
  
  arg1 = (pj::Buddy *)jarg1; 
  arg2 = (pj::SendInstantMessageParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SendInstantMessageParam const & is null", 0);
    return ;
  } 
  try {
    (arg1)->sendInstantMessage((pj::SendInstantMessageParam const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Buddy_sendTypingIndication(void * jarg1, void * jarg2) {
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  pj::SendTypingIndicationParam *arg2 = 0 ;
  
  arg1 = (pj::Buddy *)jarg1; 
  arg2 = (pj::SendTypingIndicationParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SendTypingIndicationParam const & is null", 0);
    return ;
  } 
  try {
    (arg1)->sendTypingIndication((pj::SendTypingIndicationParam const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Buddy_onBuddyState(void * jarg1) {
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  
  arg1 = (pj::Buddy *)jarg1; 
  (arg1)->onBuddyState();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Buddy_onBuddyStateSwigExplicitBuddy(void * jarg1) {
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  
  arg1 = (pj::Buddy *)jarg1; 
  (arg1)->pj::Buddy::onBuddyState();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Buddy_onBuddyEvSubState(void * jarg1, void * jarg2) {
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  pj::OnBuddyEvSubStateParam *arg2 = 0 ;
  
  arg1 = (pj::Buddy *)jarg1; 
  arg2 = (pj::OnBuddyEvSubStateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnBuddyEvSubStateParam & is null", 0);
    return ;
  } 
  (arg1)->onBuddyEvSubState(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Buddy_onBuddyEvSubStateSwigExplicitBuddy(void * jarg1, void * jarg2) {
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  pj::OnBuddyEvSubStateParam *arg2 = 0 ;
  
  arg1 = (pj::Buddy *)jarg1; 
  arg2 = (pj::OnBuddyEvSubStateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnBuddyEvSubStateParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Buddy::onBuddyEvSubState(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Buddy_director_connect(void *objarg, SwigDirector_Buddy::SWIG_Callback0_t callback0, SwigDirector_Buddy::SWIG_Callback1_t callback1) {
  pj::Buddy *obj = (pj::Buddy *)objarg;
  SwigDirector_Buddy *director = static_cast<SwigDirector_Buddy *>(obj);
  director->swig_connect_director(callback0, callback1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountRegConfig_registrarUri_set(void * jarg1, const char * jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->registrarUri = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AccountRegConfig_registrarUri_get(void * jarg1) {
  const char * jresult ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->registrarUri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountRegConfig_registerOnAdd_set(void * jarg1, unsigned int jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->registerOnAdd = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountRegConfig_registerOnAdd_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  result = (bool) ((arg1)->registerOnAdd);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountRegConfig_disableRegOnModify_set(void * jarg1, unsigned int jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->disableRegOnModify = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountRegConfig_disableRegOnModify_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  result = (bool) ((arg1)->disableRegOnModify);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountRegConfig_headers_set(void * jarg1, void * jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  pj::SipHeaderVector *arg2 = (pj::SipHeaderVector *) 0 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  arg2 = (pj::SipHeaderVector *)jarg2; 
  if (arg1) (arg1)->headers = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AccountRegConfig_headers_get(void * jarg1) {
  void * jresult ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  pj::SipHeaderVector *result = 0 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  result = (pj::SipHeaderVector *)& ((arg1)->headers);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountRegConfig_contactParams_set(void * jarg1, const char * jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->contactParams = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AccountRegConfig_contactParams_get(void * jarg1) {
  const char * jresult ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->contactParams);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountRegConfig_contactUriParams_set(void * jarg1, const char * jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->contactUriParams = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AccountRegConfig_contactUriParams_get(void * jarg1) {
  const char * jresult ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->contactUriParams);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountRegConfig_timeoutSec_set(void * jarg1, unsigned int jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->timeoutSec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountRegConfig_timeoutSec_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  result = (unsigned int) ((arg1)->timeoutSec);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountRegConfig_retryIntervalSec_set(void * jarg1, unsigned int jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->retryIntervalSec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountRegConfig_retryIntervalSec_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  result = (unsigned int) ((arg1)->retryIntervalSec);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountRegConfig_firstRetryIntervalSec_set(void * jarg1, unsigned int jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->firstRetryIntervalSec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountRegConfig_firstRetryIntervalSec_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  result = (unsigned int) ((arg1)->firstRetryIntervalSec);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountRegConfig_randomRetryIntervalSec_set(void * jarg1, unsigned int jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->randomRetryIntervalSec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountRegConfig_randomRetryIntervalSec_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  result = (unsigned int) ((arg1)->randomRetryIntervalSec);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountRegConfig_delayBeforeRefreshSec_set(void * jarg1, unsigned int jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->delayBeforeRefreshSec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountRegConfig_delayBeforeRefreshSec_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  result = (unsigned int) ((arg1)->delayBeforeRefreshSec);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountRegConfig_dropCallsOnFail_set(void * jarg1, unsigned int jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->dropCallsOnFail = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountRegConfig_dropCallsOnFail_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  result = (bool) ((arg1)->dropCallsOnFail);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountRegConfig_unregWaitMsec_set(void * jarg1, unsigned int jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->unregWaitMsec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountRegConfig_unregWaitMsec_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  result = (unsigned int) ((arg1)->unregWaitMsec);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountRegConfig_proxyUse_set(void * jarg1, unsigned int jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->proxyUse = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountRegConfig_proxyUse_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  result = (unsigned int) ((arg1)->proxyUse);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountRegConfig_readObject(void * jarg1, void * jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountRegConfig_writeObject(void * jarg1, void * jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & is null", 0);
    return ;
  } 
  try {
    ((pj::AccountRegConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AccountRegConfig() {
  void * jresult ;
  pj::AccountRegConfig *result = 0 ;
  
  result = (pj::AccountRegConfig *)new pj::AccountRegConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AccountRegConfig(void * jarg1) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountSipConfig_authCreds_set(void * jarg1, void * jarg2) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::AuthCredInfoVector *arg2 = (pj::AuthCredInfoVector *) 0 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  arg2 = (pj::AuthCredInfoVector *)jarg2; 
  if (arg1) (arg1)->authCreds = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AccountSipConfig_authCreds_get(void * jarg1) {
  void * jresult ;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::AuthCredInfoVector *result = 0 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  result = (pj::AuthCredInfoVector *)& ((arg1)->authCreds);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountSipConfig_proxies_set(void * jarg1, void * jarg2) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::StringVector *arg2 = (pj::StringVector *) 0 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  arg2 = (pj::StringVector *)jarg2; 
  if (arg1) (arg1)->proxies = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AccountSipConfig_proxies_get(void * jarg1) {
  void * jresult ;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::StringVector *result = 0 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  result = (pj::StringVector *)& ((arg1)->proxies);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountSipConfig_contactForced_set(void * jarg1, const char * jarg2) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->contactForced = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AccountSipConfig_contactForced_get(void * jarg1) {
  const char * jresult ;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->contactForced);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountSipConfig_contactParams_set(void * jarg1, const char * jarg2) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->contactParams = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AccountSipConfig_contactParams_get(void * jarg1) {
  const char * jresult ;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->contactParams);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountSipConfig_contactUriParams_set(void * jarg1, const char * jarg2) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->contactUriParams = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AccountSipConfig_contactUriParams_get(void * jarg1) {
  const char * jresult ;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->contactUriParams);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountSipConfig_authInitialEmpty_set(void * jarg1, unsigned int jarg2) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->authInitialEmpty = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountSipConfig_authInitialEmpty_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  result = (bool) ((arg1)->authInitialEmpty);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountSipConfig_authInitialAlgorithm_set(void * jarg1, const char * jarg2) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->authInitialAlgorithm = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AccountSipConfig_authInitialAlgorithm_get(void * jarg1) {
  const char * jresult ;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->authInitialAlgorithm);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountSipConfig_transportId_set(void * jarg1, int jarg2) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::TransportId arg2 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  arg2 = (pj::TransportId)jarg2; 
  if (arg1) (arg1)->transportId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AccountSipConfig_transportId_get(void * jarg1) {
  int jresult ;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::TransportId result;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  result = (pj::TransportId) ((arg1)->transportId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountSipConfig_ipv6Use_set(void * jarg1, int jarg2) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pjsua_ipv6_use arg2 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  arg2 = (pjsua_ipv6_use)jarg2; 
  if (arg1) (arg1)->ipv6Use = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AccountSipConfig_ipv6Use_get(void * jarg1) {
  int jresult ;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pjsua_ipv6_use result;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  result = (pjsua_ipv6_use) ((arg1)->ipv6Use);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountSipConfig_readObject(void * jarg1, void * jarg2) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountSipConfig_writeObject(void * jarg1, void * jarg2) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & is null", 0);
    return ;
  } 
  try {
    ((pj::AccountSipConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AccountSipConfig() {
  void * jresult ;
  pj::AccountSipConfig *result = 0 ;
  
  result = (pj::AccountSipConfig *)new pj::AccountSipConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AccountSipConfig(void * jarg1) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountCallConfig_holdType_set(void * jarg1, int jarg2) {
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  pjsua_call_hold_type arg2 ;
  
  arg1 = (pj::AccountCallConfig *)jarg1; 
  arg2 = (pjsua_call_hold_type)jarg2; 
  if (arg1) (arg1)->holdType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AccountCallConfig_holdType_get(void * jarg1) {
  int jresult ;
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  pjsua_call_hold_type result;
  
  arg1 = (pj::AccountCallConfig *)jarg1; 
  result = (pjsua_call_hold_type) ((arg1)->holdType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountCallConfig_prackUse_set(void * jarg1, int jarg2) {
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  pjsua_100rel_use arg2 ;
  
  arg1 = (pj::AccountCallConfig *)jarg1; 
  arg2 = (pjsua_100rel_use)jarg2; 
  if (arg1) (arg1)->prackUse = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AccountCallConfig_prackUse_get(void * jarg1) {
  int jresult ;
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  pjsua_100rel_use result;
  
  arg1 = (pj::AccountCallConfig *)jarg1; 
  result = (pjsua_100rel_use) ((arg1)->prackUse);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountCallConfig_timerUse_set(void * jarg1, int jarg2) {
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  pjsua_sip_timer_use arg2 ;
  
  arg1 = (pj::AccountCallConfig *)jarg1; 
  arg2 = (pjsua_sip_timer_use)jarg2; 
  if (arg1) (arg1)->timerUse = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AccountCallConfig_timerUse_get(void * jarg1) {
  int jresult ;
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  pjsua_sip_timer_use result;
  
  arg1 = (pj::AccountCallConfig *)jarg1; 
  result = (pjsua_sip_timer_use) ((arg1)->timerUse);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountCallConfig_timerMinSESec_set(void * jarg1, unsigned int jarg2) {
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountCallConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->timerMinSESec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountCallConfig_timerMinSESec_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountCallConfig *)jarg1; 
  result = (unsigned int) ((arg1)->timerMinSESec);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountCallConfig_timerSessExpiresSec_set(void * jarg1, unsigned int jarg2) {
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountCallConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->timerSessExpiresSec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountCallConfig_timerSessExpiresSec_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountCallConfig *)jarg1; 
  result = (unsigned int) ((arg1)->timerSessExpiresSec);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AccountCallConfig() {
  void * jresult ;
  pj::AccountCallConfig *result = 0 ;
  
  result = (pj::AccountCallConfig *)new pj::AccountCallConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountCallConfig_readObject(void * jarg1, void * jarg2) {
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountCallConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountCallConfig_writeObject(void * jarg1, void * jarg2) {
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountCallConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & is null", 0);
    return ;
  } 
  try {
    ((pj::AccountCallConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AccountCallConfig(void * jarg1) {
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  
  arg1 = (pj::AccountCallConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountPresConfig_headers_set(void * jarg1, void * jarg2) {
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  pj::SipHeaderVector *arg2 = (pj::SipHeaderVector *) 0 ;
  
  arg1 = (pj::AccountPresConfig *)jarg1; 
  arg2 = (pj::SipHeaderVector *)jarg2; 
  if (arg1) (arg1)->headers = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AccountPresConfig_headers_get(void * jarg1) {
  void * jresult ;
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  pj::SipHeaderVector *result = 0 ;
  
  arg1 = (pj::AccountPresConfig *)jarg1; 
  result = (pj::SipHeaderVector *)& ((arg1)->headers);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountPresConfig_publishEnabled_set(void * jarg1, unsigned int jarg2) {
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountPresConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->publishEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountPresConfig_publishEnabled_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountPresConfig *)jarg1; 
  result = (bool) ((arg1)->publishEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountPresConfig_publishQueue_set(void * jarg1, unsigned int jarg2) {
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountPresConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->publishQueue = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountPresConfig_publishQueue_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountPresConfig *)jarg1; 
  result = (bool) ((arg1)->publishQueue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountPresConfig_publishShutdownWaitMsec_set(void * jarg1, unsigned int jarg2) {
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountPresConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->publishShutdownWaitMsec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountPresConfig_publishShutdownWaitMsec_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountPresConfig *)jarg1; 
  result = (unsigned int) ((arg1)->publishShutdownWaitMsec);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountPresConfig_pidfTupleId_set(void * jarg1, const char * jarg2) {
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountPresConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->pidfTupleId = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AccountPresConfig_pidfTupleId_get(void * jarg1) {
  const char * jresult ;
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountPresConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->pidfTupleId);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountPresConfig_readObject(void * jarg1, void * jarg2) {
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountPresConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountPresConfig_writeObject(void * jarg1, void * jarg2) {
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountPresConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & is null", 0);
    return ;
  } 
  try {
    ((pj::AccountPresConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AccountPresConfig() {
  void * jresult ;
  pj::AccountPresConfig *result = 0 ;
  
  result = (pj::AccountPresConfig *)new pj::AccountPresConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AccountPresConfig(void * jarg1) {
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  
  arg1 = (pj::AccountPresConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountMwiConfig_enabled_set(void * jarg1, unsigned int jarg2) {
  pj::AccountMwiConfig *arg1 = (pj::AccountMwiConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountMwiConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountMwiConfig_enabled_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountMwiConfig *arg1 = (pj::AccountMwiConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountMwiConfig *)jarg1; 
  result = (bool) ((arg1)->enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountMwiConfig_expirationSec_set(void * jarg1, unsigned int jarg2) {
  pj::AccountMwiConfig *arg1 = (pj::AccountMwiConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountMwiConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->expirationSec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountMwiConfig_expirationSec_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountMwiConfig *arg1 = (pj::AccountMwiConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountMwiConfig *)jarg1; 
  result = (unsigned int) ((arg1)->expirationSec);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountMwiConfig_readObject(void * jarg1, void * jarg2) {
  pj::AccountMwiConfig *arg1 = (pj::AccountMwiConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountMwiConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountMwiConfig_writeObject(void * jarg1, void * jarg2) {
  pj::AccountMwiConfig *arg1 = (pj::AccountMwiConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountMwiConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & is null", 0);
    return ;
  } 
  try {
    ((pj::AccountMwiConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AccountMwiConfig() {
  void * jresult ;
  pj::AccountMwiConfig *result = 0 ;
  
  result = (pj::AccountMwiConfig *)new pj::AccountMwiConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AccountMwiConfig(void * jarg1) {
  pj::AccountMwiConfig *arg1 = (pj::AccountMwiConfig *) 0 ;
  
  arg1 = (pj::AccountMwiConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountNatConfig_sipStunUse_set(void * jarg1, int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pjsua_stun_use arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (pjsua_stun_use)jarg2; 
  if (arg1) (arg1)->sipStunUse = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AccountNatConfig_sipStunUse_get(void * jarg1) {
  int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pjsua_stun_use result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (pjsua_stun_use) ((arg1)->sipStunUse);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountNatConfig_mediaStunUse_set(void * jarg1, int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pjsua_stun_use arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (pjsua_stun_use)jarg2; 
  if (arg1) (arg1)->mediaStunUse = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AccountNatConfig_mediaStunUse_get(void * jarg1) {
  int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pjsua_stun_use result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (pjsua_stun_use) ((arg1)->mediaStunUse);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountNatConfig_sipUpnpUse_set(void * jarg1, int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pjsua_upnp_use arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (pjsua_upnp_use)jarg2; 
  if (arg1) (arg1)->sipUpnpUse = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AccountNatConfig_sipUpnpUse_get(void * jarg1) {
  int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pjsua_upnp_use result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (pjsua_upnp_use) ((arg1)->sipUpnpUse);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountNatConfig_mediaUpnpUse_set(void * jarg1, int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pjsua_upnp_use arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (pjsua_upnp_use)jarg2; 
  if (arg1) (arg1)->mediaUpnpUse = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AccountNatConfig_mediaUpnpUse_get(void * jarg1) {
  int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pjsua_upnp_use result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (pjsua_upnp_use) ((arg1)->mediaUpnpUse);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountNatConfig_nat64Opt_set(void * jarg1, int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pjsua_nat64_opt arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (pjsua_nat64_opt)jarg2; 
  if (arg1) (arg1)->nat64Opt = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AccountNatConfig_nat64Opt_get(void * jarg1) {
  int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pjsua_nat64_opt result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (pjsua_nat64_opt) ((arg1)->nat64Opt);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountNatConfig_iceEnabled_set(void * jarg1, unsigned int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->iceEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountNatConfig_iceEnabled_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (bool) ((arg1)->iceEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountNatConfig_iceTrickle_set(void * jarg1, int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj_ice_sess_trickle arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (pj_ice_sess_trickle)jarg2; 
  if (arg1) (arg1)->iceTrickle = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AccountNatConfig_iceTrickle_get(void * jarg1) {
  int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj_ice_sess_trickle result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (pj_ice_sess_trickle) ((arg1)->iceTrickle);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountNatConfig_iceMaxHostCands_set(void * jarg1, int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->iceMaxHostCands = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AccountNatConfig_iceMaxHostCands_get(void * jarg1) {
  int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (int) ((arg1)->iceMaxHostCands);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountNatConfig_iceAggressiveNomination_set(void * jarg1, unsigned int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->iceAggressiveNomination = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountNatConfig_iceAggressiveNomination_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (bool) ((arg1)->iceAggressiveNomination);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountNatConfig_iceNominatedCheckDelayMsec_set(void * jarg1, unsigned int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->iceNominatedCheckDelayMsec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountNatConfig_iceNominatedCheckDelayMsec_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (unsigned int) ((arg1)->iceNominatedCheckDelayMsec);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountNatConfig_iceWaitNominationTimeoutMsec_set(void * jarg1, int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->iceWaitNominationTimeoutMsec = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AccountNatConfig_iceWaitNominationTimeoutMsec_get(void * jarg1) {
  int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (int) ((arg1)->iceWaitNominationTimeoutMsec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountNatConfig_iceNoRtcp_set(void * jarg1, unsigned int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->iceNoRtcp = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountNatConfig_iceNoRtcp_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (bool) ((arg1)->iceNoRtcp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountNatConfig_iceAlwaysUpdate_set(void * jarg1, unsigned int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->iceAlwaysUpdate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountNatConfig_iceAlwaysUpdate_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (bool) ((arg1)->iceAlwaysUpdate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountNatConfig_turnEnabled_set(void * jarg1, unsigned int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->turnEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountNatConfig_turnEnabled_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (bool) ((arg1)->turnEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountNatConfig_turnServer_set(void * jarg1, const char * jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->turnServer = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AccountNatConfig_turnServer_get(void * jarg1) {
  const char * jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->turnServer);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountNatConfig_turnConnType_set(void * jarg1, int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj_turn_tp_type arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (pj_turn_tp_type)jarg2; 
  if (arg1) (arg1)->turnConnType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AccountNatConfig_turnConnType_get(void * jarg1) {
  int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj_turn_tp_type result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (pj_turn_tp_type) ((arg1)->turnConnType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountNatConfig_turnUserName_set(void * jarg1, const char * jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->turnUserName = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AccountNatConfig_turnUserName_get(void * jarg1) {
  const char * jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->turnUserName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountNatConfig_turnPasswordType_set(void * jarg1, int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->turnPasswordType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AccountNatConfig_turnPasswordType_get(void * jarg1) {
  int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (int) ((arg1)->turnPasswordType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountNatConfig_turnPassword_set(void * jarg1, const char * jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->turnPassword = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AccountNatConfig_turnPassword_get(void * jarg1) {
  const char * jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->turnPassword);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountNatConfig_contactRewriteUse_set(void * jarg1, int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->contactRewriteUse = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AccountNatConfig_contactRewriteUse_get(void * jarg1) {
  int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (int) ((arg1)->contactRewriteUse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountNatConfig_contactRewriteMethod_set(void * jarg1, int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->contactRewriteMethod = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AccountNatConfig_contactRewriteMethod_get(void * jarg1) {
  int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (int) ((arg1)->contactRewriteMethod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountNatConfig_contactUseSrcPort_set(void * jarg1, int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->contactUseSrcPort = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AccountNatConfig_contactUseSrcPort_get(void * jarg1) {
  int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (int) ((arg1)->contactUseSrcPort);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountNatConfig_viaRewriteUse_set(void * jarg1, int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->viaRewriteUse = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AccountNatConfig_viaRewriteUse_get(void * jarg1) {
  int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (int) ((arg1)->viaRewriteUse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountNatConfig_sdpNatRewriteUse_set(void * jarg1, int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->sdpNatRewriteUse = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AccountNatConfig_sdpNatRewriteUse_get(void * jarg1) {
  int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (int) ((arg1)->sdpNatRewriteUse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountNatConfig_sipOutboundUse_set(void * jarg1, int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->sipOutboundUse = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AccountNatConfig_sipOutboundUse_get(void * jarg1) {
  int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (int) ((arg1)->sipOutboundUse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountNatConfig_sipOutboundInstanceId_set(void * jarg1, const char * jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->sipOutboundInstanceId = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AccountNatConfig_sipOutboundInstanceId_get(void * jarg1) {
  const char * jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->sipOutboundInstanceId);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountNatConfig_sipOutboundRegId_set(void * jarg1, const char * jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->sipOutboundRegId = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AccountNatConfig_sipOutboundRegId_get(void * jarg1) {
  const char * jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->sipOutboundRegId);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountNatConfig_udpKaIntervalSec_set(void * jarg1, unsigned int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->udpKaIntervalSec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountNatConfig_udpKaIntervalSec_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (unsigned int) ((arg1)->udpKaIntervalSec);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountNatConfig_udpKaData_set(void * jarg1, const char * jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->udpKaData = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AccountNatConfig_udpKaData_get(void * jarg1) {
  const char * jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->udpKaData);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AccountNatConfig() {
  void * jresult ;
  pj::AccountNatConfig *result = 0 ;
  
  result = (pj::AccountNatConfig *)new pj::AccountNatConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountNatConfig_readObject(void * jarg1, void * jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountNatConfig_writeObject(void * jarg1, void * jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & is null", 0);
    return ;
  } 
  try {
    ((pj::AccountNatConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AccountNatConfig(void * jarg1) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SrtpCrypto_key_set(void * jarg1, const char * jarg2) {
  pj::SrtpCrypto *arg1 = (pj::SrtpCrypto *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SrtpCrypto *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->key = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SrtpCrypto_key_get(void * jarg1) {
  const char * jresult ;
  pj::SrtpCrypto *arg1 = (pj::SrtpCrypto *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SrtpCrypto *)jarg1; 
  result = (pj::string *) & ((arg1)->key);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SrtpCrypto_name_set(void * jarg1, const char * jarg2) {
  pj::SrtpCrypto *arg1 = (pj::SrtpCrypto *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SrtpCrypto *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SrtpCrypto_name_get(void * jarg1) {
  const char * jresult ;
  pj::SrtpCrypto *arg1 = (pj::SrtpCrypto *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SrtpCrypto *)jarg1; 
  result = (pj::string *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SrtpCrypto_flags_set(void * jarg1, unsigned int jarg2) {
  pj::SrtpCrypto *arg1 = (pj::SrtpCrypto *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::SrtpCrypto *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SrtpCrypto_flags_get(void * jarg1) {
  unsigned int jresult ;
  pj::SrtpCrypto *arg1 = (pj::SrtpCrypto *) 0 ;
  unsigned int result;
  
  arg1 = (pj::SrtpCrypto *)jarg1; 
  result = (unsigned int) ((arg1)->flags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SrtpCrypto() {
  void * jresult ;
  pj::SrtpCrypto *result = 0 ;
  
  result = (pj::SrtpCrypto *)new pj::SrtpCrypto();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SrtpCrypto(void * jarg1) {
  pj::SrtpCrypto *arg1 = (pj::SrtpCrypto *) 0 ;
  
  arg1 = (pj::SrtpCrypto *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SrtpOpt_cryptos_set(void * jarg1, void * jarg2) {
  pj::SrtpOpt *arg1 = (pj::SrtpOpt *) 0 ;
  pj::SrtpCryptoVector *arg2 = (pj::SrtpCryptoVector *) 0 ;
  
  arg1 = (pj::SrtpOpt *)jarg1; 
  arg2 = (pj::SrtpCryptoVector *)jarg2; 
  if (arg1) (arg1)->cryptos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SrtpOpt_cryptos_get(void * jarg1) {
  void * jresult ;
  pj::SrtpOpt *arg1 = (pj::SrtpOpt *) 0 ;
  pj::SrtpCryptoVector *result = 0 ;
  
  arg1 = (pj::SrtpOpt *)jarg1; 
  result = (pj::SrtpCryptoVector *)& ((arg1)->cryptos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SrtpOpt_keyings_set(void * jarg1, void * jarg2) {
  pj::SrtpOpt *arg1 = (pj::SrtpOpt *) 0 ;
  pj::IntVector *arg2 = (pj::IntVector *) 0 ;
  
  arg1 = (pj::SrtpOpt *)jarg1; 
  arg2 = (pj::IntVector *)jarg2; 
  if (arg1) (arg1)->keyings = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SrtpOpt_keyings_get(void * jarg1) {
  void * jresult ;
  pj::SrtpOpt *arg1 = (pj::SrtpOpt *) 0 ;
  pj::IntVector *result = 0 ;
  
  arg1 = (pj::SrtpOpt *)jarg1; 
  result = (pj::IntVector *)& ((arg1)->keyings);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SrtpOpt() {
  void * jresult ;
  pj::SrtpOpt *result = 0 ;
  
  result = (pj::SrtpOpt *)new pj::SrtpOpt();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SrtpOpt_readObject(void * jarg1, void * jarg2) {
  pj::SrtpOpt *arg1 = (pj::SrtpOpt *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::SrtpOpt *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SrtpOpt_writeObject(void * jarg1, void * jarg2) {
  pj::SrtpOpt *arg1 = (pj::SrtpOpt *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::SrtpOpt *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & is null", 0);
    return ;
  } 
  try {
    ((pj::SrtpOpt const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SrtpOpt(void * jarg1) {
  pj::SrtpOpt *arg1 = (pj::SrtpOpt *) 0 ;
  
  arg1 = (pj::SrtpOpt *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpFbCap_codecId_set(void * jarg1, const char * jarg2) {
  pj::RtcpFbCap *arg1 = (pj::RtcpFbCap *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::RtcpFbCap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->codecId = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_RtcpFbCap_codecId_get(void * jarg1) {
  const char * jresult ;
  pj::RtcpFbCap *arg1 = (pj::RtcpFbCap *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::RtcpFbCap *)jarg1; 
  result = (pj::string *) & ((arg1)->codecId);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpFbCap_type_set(void * jarg1, int jarg2) {
  pj::RtcpFbCap *arg1 = (pj::RtcpFbCap *) 0 ;
  pjmedia_rtcp_fb_type arg2 ;
  
  arg1 = (pj::RtcpFbCap *)jarg1; 
  arg2 = (pjmedia_rtcp_fb_type)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RtcpFbCap_type_get(void * jarg1) {
  int jresult ;
  pj::RtcpFbCap *arg1 = (pj::RtcpFbCap *) 0 ;
  pjmedia_rtcp_fb_type result;
  
  arg1 = (pj::RtcpFbCap *)jarg1; 
  result = (pjmedia_rtcp_fb_type) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpFbCap_typeName_set(void * jarg1, const char * jarg2) {
  pj::RtcpFbCap *arg1 = (pj::RtcpFbCap *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::RtcpFbCap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->typeName = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_RtcpFbCap_typeName_get(void * jarg1) {
  const char * jresult ;
  pj::RtcpFbCap *arg1 = (pj::RtcpFbCap *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::RtcpFbCap *)jarg1; 
  result = (pj::string *) & ((arg1)->typeName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpFbCap_param_set(void * jarg1, const char * jarg2) {
  pj::RtcpFbCap *arg1 = (pj::RtcpFbCap *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::RtcpFbCap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->param = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_RtcpFbCap_param_get(void * jarg1) {
  const char * jresult ;
  pj::RtcpFbCap *arg1 = (pj::RtcpFbCap *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::RtcpFbCap *)jarg1; 
  result = (pj::string *) & ((arg1)->param);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RtcpFbCap() {
  void * jresult ;
  pj::RtcpFbCap *result = 0 ;
  
  result = (pj::RtcpFbCap *)new pj::RtcpFbCap();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RtcpFbCap(void * jarg1) {
  pj::RtcpFbCap *arg1 = (pj::RtcpFbCap *) 0 ;
  
  arg1 = (pj::RtcpFbCap *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpFbConfig_dontUseAvpf_set(void * jarg1, unsigned int jarg2) {
  pj::RtcpFbConfig *arg1 = (pj::RtcpFbConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::RtcpFbConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->dontUseAvpf = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RtcpFbConfig_dontUseAvpf_get(void * jarg1) {
  unsigned int jresult ;
  pj::RtcpFbConfig *arg1 = (pj::RtcpFbConfig *) 0 ;
  bool result;
  
  arg1 = (pj::RtcpFbConfig *)jarg1; 
  result = (bool) ((arg1)->dontUseAvpf);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpFbConfig_caps_set(void * jarg1, void * jarg2) {
  pj::RtcpFbConfig *arg1 = (pj::RtcpFbConfig *) 0 ;
  pj::RtcpFbCapVector *arg2 = (pj::RtcpFbCapVector *) 0 ;
  
  arg1 = (pj::RtcpFbConfig *)jarg1; 
  arg2 = (pj::RtcpFbCapVector *)jarg2; 
  if (arg1) (arg1)->caps = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RtcpFbConfig_caps_get(void * jarg1) {
  void * jresult ;
  pj::RtcpFbConfig *arg1 = (pj::RtcpFbConfig *) 0 ;
  pj::RtcpFbCapVector *result = 0 ;
  
  arg1 = (pj::RtcpFbConfig *)jarg1; 
  result = (pj::RtcpFbCapVector *)& ((arg1)->caps);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RtcpFbConfig() {
  void * jresult ;
  pj::RtcpFbConfig *result = 0 ;
  
  result = (pj::RtcpFbConfig *)new pj::RtcpFbConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpFbConfig_readObject(void * jarg1, void * jarg2) {
  pj::RtcpFbConfig *arg1 = (pj::RtcpFbConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::RtcpFbConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpFbConfig_writeObject(void * jarg1, void * jarg2) {
  pj::RtcpFbConfig *arg1 = (pj::RtcpFbConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::RtcpFbConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & is null", 0);
    return ;
  } 
  try {
    ((pj::RtcpFbConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RtcpFbConfig(void * jarg1) {
  pj::RtcpFbConfig *arg1 = (pj::RtcpFbConfig *) 0 ;
  
  arg1 = (pj::RtcpFbConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountMediaConfig_transportConfig_set(void * jarg1, void * jarg2) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pj::TransportConfig *arg2 = (pj::TransportConfig *) 0 ;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  arg2 = (pj::TransportConfig *)jarg2; 
  if (arg1) (arg1)->transportConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AccountMediaConfig_transportConfig_get(void * jarg1) {
  void * jresult ;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pj::TransportConfig *result = 0 ;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  result = (pj::TransportConfig *)& ((arg1)->transportConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountMediaConfig_lockCodecEnabled_set(void * jarg1, unsigned int jarg2) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->lockCodecEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountMediaConfig_lockCodecEnabled_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  result = (bool) ((arg1)->lockCodecEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountMediaConfig_streamKaEnabled_set(void * jarg1, unsigned int jarg2) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->streamKaEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountMediaConfig_streamKaEnabled_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  result = (bool) ((arg1)->streamKaEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountMediaConfig_srtpUse_set(void * jarg1, int jarg2) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pjmedia_srtp_use arg2 ;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  arg2 = (pjmedia_srtp_use)jarg2; 
  if (arg1) (arg1)->srtpUse = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AccountMediaConfig_srtpUse_get(void * jarg1) {
  int jresult ;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pjmedia_srtp_use result;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  result = (pjmedia_srtp_use) ((arg1)->srtpUse);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountMediaConfig_srtpSecureSignaling_set(void * jarg1, int jarg2) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->srtpSecureSignaling = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AccountMediaConfig_srtpSecureSignaling_get(void * jarg1) {
  int jresult ;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  int result;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  result = (int) ((arg1)->srtpSecureSignaling);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountMediaConfig_srtpOpt_set(void * jarg1, void * jarg2) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pj::SrtpOpt *arg2 = (pj::SrtpOpt *) 0 ;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  arg2 = (pj::SrtpOpt *)jarg2; 
  if (arg1) (arg1)->srtpOpt = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AccountMediaConfig_srtpOpt_get(void * jarg1) {
  void * jresult ;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pj::SrtpOpt *result = 0 ;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  result = (pj::SrtpOpt *)& ((arg1)->srtpOpt);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountMediaConfig_ipv6Use_set(void * jarg1, int jarg2) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pjsua_ipv6_use arg2 ;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  arg2 = (pjsua_ipv6_use)jarg2; 
  if (arg1) (arg1)->ipv6Use = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AccountMediaConfig_ipv6Use_get(void * jarg1) {
  int jresult ;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pjsua_ipv6_use result;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  result = (pjsua_ipv6_use) ((arg1)->ipv6Use);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountMediaConfig_rtcpMuxEnabled_set(void * jarg1, unsigned int jarg2) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->rtcpMuxEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountMediaConfig_rtcpMuxEnabled_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  result = (bool) ((arg1)->rtcpMuxEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountMediaConfig_rtcpFbConfig_set(void * jarg1, void * jarg2) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pj::RtcpFbConfig *arg2 = (pj::RtcpFbConfig *) 0 ;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  arg2 = (pj::RtcpFbConfig *)jarg2; 
  if (arg1) (arg1)->rtcpFbConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AccountMediaConfig_rtcpFbConfig_get(void * jarg1) {
  void * jresult ;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pj::RtcpFbConfig *result = 0 ;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  result = (pj::RtcpFbConfig *)& ((arg1)->rtcpFbConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountMediaConfig_rtcpXrEnabled_set(void * jarg1, unsigned int jarg2) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->rtcpXrEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountMediaConfig_rtcpXrEnabled_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  result = (bool) ((arg1)->rtcpXrEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountMediaConfig_useLoopMedTp_set(void * jarg1, unsigned int jarg2) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->useLoopMedTp = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountMediaConfig_useLoopMedTp_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  result = (bool) ((arg1)->useLoopMedTp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountMediaConfig_enableLoopback_set(void * jarg1, unsigned int jarg2) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enableLoopback = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountMediaConfig_enableLoopback_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  result = (bool) ((arg1)->enableLoopback);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AccountMediaConfig() {
  void * jresult ;
  pj::AccountMediaConfig *result = 0 ;
  
  result = (pj::AccountMediaConfig *)new pj::AccountMediaConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountMediaConfig_readObject(void * jarg1, void * jarg2) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountMediaConfig_writeObject(void * jarg1, void * jarg2) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & is null", 0);
    return ;
  } 
  try {
    ((pj::AccountMediaConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AccountMediaConfig(void * jarg1) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountVideoConfig_autoShowIncoming_set(void * jarg1, unsigned int jarg2) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->autoShowIncoming = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountVideoConfig_autoShowIncoming_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  result = (bool) ((arg1)->autoShowIncoming);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountVideoConfig_autoTransmitOutgoing_set(void * jarg1, unsigned int jarg2) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->autoTransmitOutgoing = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountVideoConfig_autoTransmitOutgoing_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  result = (bool) ((arg1)->autoTransmitOutgoing);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountVideoConfig_windowFlags_set(void * jarg1, unsigned int jarg2) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->windowFlags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountVideoConfig_windowFlags_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  result = (unsigned int) ((arg1)->windowFlags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountVideoConfig_defaultCaptureDevice_set(void * jarg1, int jarg2) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  pjmedia_vid_dev_index arg2 ;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  arg2 = (pjmedia_vid_dev_index)jarg2; 
  if (arg1) (arg1)->defaultCaptureDevice = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AccountVideoConfig_defaultCaptureDevice_get(void * jarg1) {
  int jresult ;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  pjmedia_vid_dev_index result;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  result = (pjmedia_vid_dev_index) ((arg1)->defaultCaptureDevice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountVideoConfig_defaultRenderDevice_set(void * jarg1, int jarg2) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  pjmedia_vid_dev_index arg2 ;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  arg2 = (pjmedia_vid_dev_index)jarg2; 
  if (arg1) (arg1)->defaultRenderDevice = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AccountVideoConfig_defaultRenderDevice_get(void * jarg1) {
  int jresult ;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  pjmedia_vid_dev_index result;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  result = (pjmedia_vid_dev_index) ((arg1)->defaultRenderDevice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountVideoConfig_rateControlMethod_set(void * jarg1, int jarg2) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  pjmedia_vid_stream_rc_method arg2 ;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  arg2 = (pjmedia_vid_stream_rc_method)jarg2; 
  if (arg1) (arg1)->rateControlMethod = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AccountVideoConfig_rateControlMethod_get(void * jarg1) {
  int jresult ;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  pjmedia_vid_stream_rc_method result;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  result = (pjmedia_vid_stream_rc_method) ((arg1)->rateControlMethod);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountVideoConfig_rateControlBandwidth_set(void * jarg1, unsigned int jarg2) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->rateControlBandwidth = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountVideoConfig_rateControlBandwidth_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  result = (unsigned int) ((arg1)->rateControlBandwidth);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountVideoConfig_startKeyframeCount_set(void * jarg1, unsigned int jarg2) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->startKeyframeCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountVideoConfig_startKeyframeCount_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  result = (unsigned int) ((arg1)->startKeyframeCount);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountVideoConfig_startKeyframeInterval_set(void * jarg1, unsigned int jarg2) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->startKeyframeInterval = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountVideoConfig_startKeyframeInterval_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  result = (unsigned int) ((arg1)->startKeyframeInterval);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AccountVideoConfig() {
  void * jresult ;
  pj::AccountVideoConfig *result = 0 ;
  
  result = (pj::AccountVideoConfig *)new pj::AccountVideoConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountVideoConfig_readObject(void * jarg1, void * jarg2) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountVideoConfig_writeObject(void * jarg1, void * jarg2) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & is null", 0);
    return ;
  } 
  try {
    ((pj::AccountVideoConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AccountVideoConfig(void * jarg1) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountIpChangeConfig_shutdownTp_set(void * jarg1, unsigned int jarg2) {
  pj::AccountIpChangeConfig *arg1 = (pj::AccountIpChangeConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountIpChangeConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->shutdownTp = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountIpChangeConfig_shutdownTp_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountIpChangeConfig *arg1 = (pj::AccountIpChangeConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountIpChangeConfig *)jarg1; 
  result = (bool) ((arg1)->shutdownTp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountIpChangeConfig_hangupCalls_set(void * jarg1, unsigned int jarg2) {
  pj::AccountIpChangeConfig *arg1 = (pj::AccountIpChangeConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountIpChangeConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hangupCalls = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountIpChangeConfig_hangupCalls_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountIpChangeConfig *arg1 = (pj::AccountIpChangeConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountIpChangeConfig *)jarg1; 
  result = (bool) ((arg1)->hangupCalls);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountIpChangeConfig_reinviteFlags_set(void * jarg1, unsigned int jarg2) {
  pj::AccountIpChangeConfig *arg1 = (pj::AccountIpChangeConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountIpChangeConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->reinviteFlags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountIpChangeConfig_reinviteFlags_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountIpChangeConfig *arg1 = (pj::AccountIpChangeConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountIpChangeConfig *)jarg1; 
  result = (unsigned int) ((arg1)->reinviteFlags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountIpChangeConfig_reinvUseUpdate_set(void * jarg1, unsigned int jarg2) {
  pj::AccountIpChangeConfig *arg1 = (pj::AccountIpChangeConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountIpChangeConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->reinvUseUpdate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountIpChangeConfig_reinvUseUpdate_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountIpChangeConfig *arg1 = (pj::AccountIpChangeConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountIpChangeConfig *)jarg1; 
  result = (unsigned int) ((arg1)->reinvUseUpdate);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AccountIpChangeConfig(void * jarg1) {
  pj::AccountIpChangeConfig *arg1 = (pj::AccountIpChangeConfig *) 0 ;
  
  arg1 = (pj::AccountIpChangeConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountIpChangeConfig_readObject(void * jarg1, void * jarg2) {
  pj::AccountIpChangeConfig *arg1 = (pj::AccountIpChangeConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountIpChangeConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountIpChangeConfig_writeObject(void * jarg1, void * jarg2) {
  pj::AccountIpChangeConfig *arg1 = (pj::AccountIpChangeConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountIpChangeConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & is null", 0);
    return ;
  } 
  try {
    ((pj::AccountIpChangeConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AccountIpChangeConfig() {
  void * jresult ;
  pj::AccountIpChangeConfig *result = 0 ;
  
  result = (pj::AccountIpChangeConfig *)new pj::AccountIpChangeConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountConfig_priority_set(void * jarg1, int jarg2) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->priority = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AccountConfig_priority_get(void * jarg1) {
  int jresult ;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  int result;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  result = (int) ((arg1)->priority);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountConfig_idUri_set(void * jarg1, const char * jarg2) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->idUri = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AccountConfig_idUri_get(void * jarg1) {
  const char * jresult ;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->idUri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountConfig_regConfig_set(void * jarg1, void * jarg2) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountRegConfig *arg2 = (pj::AccountRegConfig *) 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  arg2 = (pj::AccountRegConfig *)jarg2; 
  if (arg1) (arg1)->regConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AccountConfig_regConfig_get(void * jarg1) {
  void * jresult ;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountRegConfig *result = 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  result = (pj::AccountRegConfig *)& ((arg1)->regConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountConfig_sipConfig_set(void * jarg1, void * jarg2) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountSipConfig *arg2 = (pj::AccountSipConfig *) 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  arg2 = (pj::AccountSipConfig *)jarg2; 
  if (arg1) (arg1)->sipConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AccountConfig_sipConfig_get(void * jarg1) {
  void * jresult ;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountSipConfig *result = 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  result = (pj::AccountSipConfig *)& ((arg1)->sipConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountConfig_callConfig_set(void * jarg1, void * jarg2) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountCallConfig *arg2 = (pj::AccountCallConfig *) 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  arg2 = (pj::AccountCallConfig *)jarg2; 
  if (arg1) (arg1)->callConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AccountConfig_callConfig_get(void * jarg1) {
  void * jresult ;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountCallConfig *result = 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  result = (pj::AccountCallConfig *)& ((arg1)->callConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountConfig_presConfig_set(void * jarg1, void * jarg2) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountPresConfig *arg2 = (pj::AccountPresConfig *) 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  arg2 = (pj::AccountPresConfig *)jarg2; 
  if (arg1) (arg1)->presConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AccountConfig_presConfig_get(void * jarg1) {
  void * jresult ;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountPresConfig *result = 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  result = (pj::AccountPresConfig *)& ((arg1)->presConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountConfig_mwiConfig_set(void * jarg1, void * jarg2) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountMwiConfig *arg2 = (pj::AccountMwiConfig *) 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  arg2 = (pj::AccountMwiConfig *)jarg2; 
  if (arg1) (arg1)->mwiConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AccountConfig_mwiConfig_get(void * jarg1) {
  void * jresult ;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountMwiConfig *result = 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  result = (pj::AccountMwiConfig *)& ((arg1)->mwiConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountConfig_natConfig_set(void * jarg1, void * jarg2) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountNatConfig *arg2 = (pj::AccountNatConfig *) 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  arg2 = (pj::AccountNatConfig *)jarg2; 
  if (arg1) (arg1)->natConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AccountConfig_natConfig_get(void * jarg1) {
  void * jresult ;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountNatConfig *result = 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  result = (pj::AccountNatConfig *)& ((arg1)->natConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountConfig_mediaConfig_set(void * jarg1, void * jarg2) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountMediaConfig *arg2 = (pj::AccountMediaConfig *) 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  arg2 = (pj::AccountMediaConfig *)jarg2; 
  if (arg1) (arg1)->mediaConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AccountConfig_mediaConfig_get(void * jarg1) {
  void * jresult ;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountMediaConfig *result = 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  result = (pj::AccountMediaConfig *)& ((arg1)->mediaConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountConfig_videoConfig_set(void * jarg1, void * jarg2) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountVideoConfig *arg2 = (pj::AccountVideoConfig *) 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  arg2 = (pj::AccountVideoConfig *)jarg2; 
  if (arg1) (arg1)->videoConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AccountConfig_videoConfig_get(void * jarg1) {
  void * jresult ;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountVideoConfig *result = 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  result = (pj::AccountVideoConfig *)& ((arg1)->videoConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountConfig_ipChangeConfig_set(void * jarg1, void * jarg2) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountIpChangeConfig *arg2 = (pj::AccountIpChangeConfig *) 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  arg2 = (pj::AccountIpChangeConfig *)jarg2; 
  if (arg1) (arg1)->ipChangeConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AccountConfig_ipChangeConfig_get(void * jarg1) {
  void * jresult ;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountIpChangeConfig *result = 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  result = (pj::AccountIpChangeConfig *)& ((arg1)->ipChangeConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AccountConfig() {
  void * jresult ;
  pj::AccountConfig *result = 0 ;
  
  result = (pj::AccountConfig *)new pj::AccountConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountConfig_readObject(void * jarg1, void * jarg2) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountConfig_writeObject(void * jarg1, void * jarg2) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & is null", 0);
    return ;
  } 
  try {
    ((pj::AccountConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AccountConfig(void * jarg1) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountInfo_id_set(void * jarg1, int jarg2) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pjsua_acc_id arg2 ;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  arg2 = (pjsua_acc_id)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AccountInfo_id_get(void * jarg1) {
  int jresult ;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pjsua_acc_id result;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  result = (pjsua_acc_id) ((arg1)->id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountInfo_isDefault_set(void * jarg1, unsigned int jarg2) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isDefault = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountInfo_isDefault_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  bool result;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  result = (bool) ((arg1)->isDefault);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountInfo_uri_set(void * jarg1, const char * jarg2) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->uri = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AccountInfo_uri_get(void * jarg1) {
  const char * jresult ;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->uri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountInfo_regIsConfigured_set(void * jarg1, unsigned int jarg2) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->regIsConfigured = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountInfo_regIsConfigured_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  bool result;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  result = (bool) ((arg1)->regIsConfigured);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountInfo_regIsActive_set(void * jarg1, unsigned int jarg2) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->regIsActive = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountInfo_regIsActive_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  bool result;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  result = (bool) ((arg1)->regIsActive);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountInfo_regExpiresSec_set(void * jarg1, unsigned int jarg2) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->regExpiresSec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountInfo_regExpiresSec_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  result = (unsigned int) ((arg1)->regExpiresSec);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountInfo_regStatus_set(void * jarg1, int jarg2) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pjsip_status_code arg2 ;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->regStatus = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AccountInfo_regStatus_get(void * jarg1) {
  int jresult ;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pjsip_status_code result;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  result = (pjsip_status_code) ((arg1)->regStatus);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountInfo_regStatusText_set(void * jarg1, const char * jarg2) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->regStatusText = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AccountInfo_regStatusText_get(void * jarg1) {
  const char * jresult ;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->regStatusText);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountInfo_regLastErr_set(void * jarg1, int jarg2) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pj_status_t arg2 ;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  arg2 = (pj_status_t)jarg2; 
  if (arg1) (arg1)->regLastErr = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AccountInfo_regLastErr_get(void * jarg1) {
  int jresult ;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pj_status_t result;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  result = (pj_status_t) ((arg1)->regLastErr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountInfo_onlineStatus_set(void * jarg1, unsigned int jarg2) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->onlineStatus = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AccountInfo_onlineStatus_get(void * jarg1) {
  unsigned int jresult ;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  bool result;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  result = (bool) ((arg1)->onlineStatus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AccountInfo_onlineStatusText_set(void * jarg1, const char * jarg2) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->onlineStatusText = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_AccountInfo_onlineStatusText_get(void * jarg1) {
  const char * jresult ;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->onlineStatusText);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AccountInfo() {
  void * jresult ;
  pj::AccountInfo *result = 0 ;
  
  result = (pj::AccountInfo *)new pj::AccountInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AccountInfo(void * jarg1) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnIncomingCallParam_callId_set(void * jarg1, int jarg2) {
  pj::OnIncomingCallParam *arg1 = (pj::OnIncomingCallParam *) 0 ;
  int arg2 ;
  
  arg1 = (pj::OnIncomingCallParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->callId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OnIncomingCallParam_callId_get(void * jarg1) {
  int jresult ;
  pj::OnIncomingCallParam *arg1 = (pj::OnIncomingCallParam *) 0 ;
  int result;
  
  arg1 = (pj::OnIncomingCallParam *)jarg1; 
  result = (int) ((arg1)->callId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnIncomingCallParam_rdata_set(void * jarg1, void * jarg2) {
  pj::OnIncomingCallParam *arg1 = (pj::OnIncomingCallParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  arg1 = (pj::OnIncomingCallParam *)jarg1; 
  arg2 = (pj::SipRxData *)jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnIncomingCallParam_rdata_get(void * jarg1) {
  void * jresult ;
  pj::OnIncomingCallParam *arg1 = (pj::OnIncomingCallParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  arg1 = (pj::OnIncomingCallParam *)jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnIncomingCallParam() {
  void * jresult ;
  pj::OnIncomingCallParam *result = 0 ;
  
  result = (pj::OnIncomingCallParam *)new pj::OnIncomingCallParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnIncomingCallParam(void * jarg1) {
  pj::OnIncomingCallParam *arg1 = (pj::OnIncomingCallParam *) 0 ;
  
  arg1 = (pj::OnIncomingCallParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnRegStartedParam_renew_set(void * jarg1, unsigned int jarg2) {
  pj::OnRegStartedParam *arg1 = (pj::OnRegStartedParam *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::OnRegStartedParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->renew = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OnRegStartedParam_renew_get(void * jarg1) {
  unsigned int jresult ;
  pj::OnRegStartedParam *arg1 = (pj::OnRegStartedParam *) 0 ;
  bool result;
  
  arg1 = (pj::OnRegStartedParam *)jarg1; 
  result = (bool) ((arg1)->renew);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnRegStartedParam() {
  void * jresult ;
  pj::OnRegStartedParam *result = 0 ;
  
  result = (pj::OnRegStartedParam *)new pj::OnRegStartedParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnRegStartedParam(void * jarg1) {
  pj::OnRegStartedParam *arg1 = (pj::OnRegStartedParam *) 0 ;
  
  arg1 = (pj::OnRegStartedParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnRegStateParam_status_set(void * jarg1, int jarg2) {
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  pj_status_t arg2 ;
  
  arg1 = (pj::OnRegStateParam *)jarg1; 
  arg2 = (pj_status_t)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OnRegStateParam_status_get(void * jarg1) {
  int jresult ;
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  pj_status_t result;
  
  arg1 = (pj::OnRegStateParam *)jarg1; 
  result = (pj_status_t) ((arg1)->status);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnRegStateParam_code_set(void * jarg1, int jarg2) {
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  pjsip_status_code arg2 ;
  
  arg1 = (pj::OnRegStateParam *)jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->code = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OnRegStateParam_code_get(void * jarg1) {
  int jresult ;
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  pjsip_status_code result;
  
  arg1 = (pj::OnRegStateParam *)jarg1; 
  result = (pjsip_status_code) ((arg1)->code);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnRegStateParam_reason_set(void * jarg1, const char * jarg2) {
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnRegStateParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->reason = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OnRegStateParam_reason_get(void * jarg1) {
  const char * jresult ;
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnRegStateParam *)jarg1; 
  result = (pj::string *) & ((arg1)->reason);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnRegStateParam_rdata_set(void * jarg1, void * jarg2) {
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  arg1 = (pj::OnRegStateParam *)jarg1; 
  arg2 = (pj::SipRxData *)jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnRegStateParam_rdata_get(void * jarg1) {
  void * jresult ;
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  arg1 = (pj::OnRegStateParam *)jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnRegStateParam_expiration_set(void * jarg1, unsigned int jarg2) {
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::OnRegStateParam *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->expiration = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OnRegStateParam_expiration_get(void * jarg1) {
  unsigned int jresult ;
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  unsigned int result;
  
  arg1 = (pj::OnRegStateParam *)jarg1; 
  result = (unsigned int) ((arg1)->expiration);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnRegStateParam() {
  void * jresult ;
  pj::OnRegStateParam *result = 0 ;
  
  result = (pj::OnRegStateParam *)new pj::OnRegStateParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnRegStateParam(void * jarg1) {
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  
  arg1 = (pj::OnRegStateParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnIncomingSubscribeParam_srvPres_set(void * jarg1, void * jarg2) {
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (pj::OnIncomingSubscribeParam *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->srvPres = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnIncomingSubscribeParam_srvPres_get(void * jarg1) {
  void * jresult ;
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  void *result = 0 ;
  
  arg1 = (pj::OnIncomingSubscribeParam *)jarg1; 
  result = (void *) ((arg1)->srvPres);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnIncomingSubscribeParam_fromUri_set(void * jarg1, const char * jarg2) {
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnIncomingSubscribeParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->fromUri = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OnIncomingSubscribeParam_fromUri_get(void * jarg1) {
  const char * jresult ;
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnIncomingSubscribeParam *)jarg1; 
  result = (pj::string *) & ((arg1)->fromUri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnIncomingSubscribeParam_rdata_set(void * jarg1, void * jarg2) {
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  arg1 = (pj::OnIncomingSubscribeParam *)jarg1; 
  arg2 = (pj::SipRxData *)jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnIncomingSubscribeParam_rdata_get(void * jarg1) {
  void * jresult ;
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  arg1 = (pj::OnIncomingSubscribeParam *)jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnIncomingSubscribeParam_code_set(void * jarg1, int jarg2) {
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pjsip_status_code arg2 ;
  
  arg1 = (pj::OnIncomingSubscribeParam *)jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->code = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OnIncomingSubscribeParam_code_get(void * jarg1) {
  int jresult ;
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pjsip_status_code result;
  
  arg1 = (pj::OnIncomingSubscribeParam *)jarg1; 
  result = (pjsip_status_code) ((arg1)->code);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnIncomingSubscribeParam_reason_set(void * jarg1, const char * jarg2) {
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnIncomingSubscribeParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->reason = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OnIncomingSubscribeParam_reason_get(void * jarg1) {
  const char * jresult ;
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnIncomingSubscribeParam *)jarg1; 
  result = (pj::string *) & ((arg1)->reason);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnIncomingSubscribeParam_txOption_set(void * jarg1, void * jarg2) {
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pj::SipTxOption *arg2 = (pj::SipTxOption *) 0 ;
  
  arg1 = (pj::OnIncomingSubscribeParam *)jarg1; 
  arg2 = (pj::SipTxOption *)jarg2; 
  if (arg1) (arg1)->txOption = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnIncomingSubscribeParam_txOption_get(void * jarg1) {
  void * jresult ;
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pj::SipTxOption *result = 0 ;
  
  arg1 = (pj::OnIncomingSubscribeParam *)jarg1; 
  result = (pj::SipTxOption *)& ((arg1)->txOption);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnIncomingSubscribeParam() {
  void * jresult ;
  pj::OnIncomingSubscribeParam *result = 0 ;
  
  result = (pj::OnIncomingSubscribeParam *)new pj::OnIncomingSubscribeParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnIncomingSubscribeParam(void * jarg1) {
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  
  arg1 = (pj::OnIncomingSubscribeParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnInstantMessageParam_fromUri_set(void * jarg1, const char * jarg2) {
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnInstantMessageParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->fromUri = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OnInstantMessageParam_fromUri_get(void * jarg1) {
  const char * jresult ;
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnInstantMessageParam *)jarg1; 
  result = (pj::string *) & ((arg1)->fromUri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnInstantMessageParam_toUri_set(void * jarg1, const char * jarg2) {
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnInstantMessageParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->toUri = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OnInstantMessageParam_toUri_get(void * jarg1) {
  const char * jresult ;
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnInstantMessageParam *)jarg1; 
  result = (pj::string *) & ((arg1)->toUri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnInstantMessageParam_contactUri_set(void * jarg1, const char * jarg2) {
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnInstantMessageParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->contactUri = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OnInstantMessageParam_contactUri_get(void * jarg1) {
  const char * jresult ;
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnInstantMessageParam *)jarg1; 
  result = (pj::string *) & ((arg1)->contactUri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnInstantMessageParam_contentType_set(void * jarg1, const char * jarg2) {
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnInstantMessageParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->contentType = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OnInstantMessageParam_contentType_get(void * jarg1) {
  const char * jresult ;
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnInstantMessageParam *)jarg1; 
  result = (pj::string *) & ((arg1)->contentType);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnInstantMessageParam_msgBody_set(void * jarg1, const char * jarg2) {
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnInstantMessageParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->msgBody = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OnInstantMessageParam_msgBody_get(void * jarg1) {
  const char * jresult ;
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnInstantMessageParam *)jarg1; 
  result = (pj::string *) & ((arg1)->msgBody);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnInstantMessageParam_rdata_set(void * jarg1, void * jarg2) {
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  arg1 = (pj::OnInstantMessageParam *)jarg1; 
  arg2 = (pj::SipRxData *)jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnInstantMessageParam_rdata_get(void * jarg1) {
  void * jresult ;
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  arg1 = (pj::OnInstantMessageParam *)jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnInstantMessageParam() {
  void * jresult ;
  pj::OnInstantMessageParam *result = 0 ;
  
  result = (pj::OnInstantMessageParam *)new pj::OnInstantMessageParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnInstantMessageParam(void * jarg1) {
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  
  arg1 = (pj::OnInstantMessageParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnInstantMessageStatusParam_userData_set(void * jarg1, void * jarg2) {
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::Token arg2 = (pj::Token) 0 ;
  
  arg1 = (pj::OnInstantMessageStatusParam *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->userData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnInstantMessageStatusParam_userData_get(void * jarg1) {
  void * jresult ;
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::Token result;
  
  arg1 = (pj::OnInstantMessageStatusParam *)jarg1; 
  result = (pj::Token) ((arg1)->userData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnInstantMessageStatusParam_toUri_set(void * jarg1, const char * jarg2) {
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnInstantMessageStatusParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->toUri = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OnInstantMessageStatusParam_toUri_get(void * jarg1) {
  const char * jresult ;
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnInstantMessageStatusParam *)jarg1; 
  result = (pj::string *) & ((arg1)->toUri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnInstantMessageStatusParam_msgBody_set(void * jarg1, const char * jarg2) {
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnInstantMessageStatusParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->msgBody = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OnInstantMessageStatusParam_msgBody_get(void * jarg1) {
  const char * jresult ;
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnInstantMessageStatusParam *)jarg1; 
  result = (pj::string *) & ((arg1)->msgBody);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnInstantMessageStatusParam_code_set(void * jarg1, int jarg2) {
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pjsip_status_code arg2 ;
  
  arg1 = (pj::OnInstantMessageStatusParam *)jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->code = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OnInstantMessageStatusParam_code_get(void * jarg1) {
  int jresult ;
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pjsip_status_code result;
  
  arg1 = (pj::OnInstantMessageStatusParam *)jarg1; 
  result = (pjsip_status_code) ((arg1)->code);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnInstantMessageStatusParam_reason_set(void * jarg1, const char * jarg2) {
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnInstantMessageStatusParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->reason = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OnInstantMessageStatusParam_reason_get(void * jarg1) {
  const char * jresult ;
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnInstantMessageStatusParam *)jarg1; 
  result = (pj::string *) & ((arg1)->reason);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnInstantMessageStatusParam_rdata_set(void * jarg1, void * jarg2) {
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  arg1 = (pj::OnInstantMessageStatusParam *)jarg1; 
  arg2 = (pj::SipRxData *)jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnInstantMessageStatusParam_rdata_get(void * jarg1) {
  void * jresult ;
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  arg1 = (pj::OnInstantMessageStatusParam *)jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnInstantMessageStatusParam() {
  void * jresult ;
  pj::OnInstantMessageStatusParam *result = 0 ;
  
  result = (pj::OnInstantMessageStatusParam *)new pj::OnInstantMessageStatusParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnInstantMessageStatusParam(void * jarg1) {
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  
  arg1 = (pj::OnInstantMessageStatusParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnTypingIndicationParam_fromUri_set(void * jarg1, const char * jarg2) {
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnTypingIndicationParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->fromUri = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OnTypingIndicationParam_fromUri_get(void * jarg1) {
  const char * jresult ;
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnTypingIndicationParam *)jarg1; 
  result = (pj::string *) & ((arg1)->fromUri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnTypingIndicationParam_toUri_set(void * jarg1, const char * jarg2) {
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnTypingIndicationParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->toUri = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OnTypingIndicationParam_toUri_get(void * jarg1) {
  const char * jresult ;
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnTypingIndicationParam *)jarg1; 
  result = (pj::string *) & ((arg1)->toUri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnTypingIndicationParam_contactUri_set(void * jarg1, const char * jarg2) {
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnTypingIndicationParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->contactUri = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OnTypingIndicationParam_contactUri_get(void * jarg1) {
  const char * jresult ;
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnTypingIndicationParam *)jarg1; 
  result = (pj::string *) & ((arg1)->contactUri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnTypingIndicationParam_isTyping_set(void * jarg1, unsigned int jarg2) {
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::OnTypingIndicationParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isTyping = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OnTypingIndicationParam_isTyping_get(void * jarg1) {
  unsigned int jresult ;
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  bool result;
  
  arg1 = (pj::OnTypingIndicationParam *)jarg1; 
  result = (bool) ((arg1)->isTyping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnTypingIndicationParam_rdata_set(void * jarg1, void * jarg2) {
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  arg1 = (pj::OnTypingIndicationParam *)jarg1; 
  arg2 = (pj::SipRxData *)jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnTypingIndicationParam_rdata_get(void * jarg1) {
  void * jresult ;
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  arg1 = (pj::OnTypingIndicationParam *)jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnTypingIndicationParam() {
  void * jresult ;
  pj::OnTypingIndicationParam *result = 0 ;
  
  result = (pj::OnTypingIndicationParam *)new pj::OnTypingIndicationParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnTypingIndicationParam(void * jarg1) {
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  
  arg1 = (pj::OnTypingIndicationParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnMwiInfoParam_state_set(void * jarg1, int jarg2) {
  pj::OnMwiInfoParam *arg1 = (pj::OnMwiInfoParam *) 0 ;
  pjsip_evsub_state arg2 ;
  
  arg1 = (pj::OnMwiInfoParam *)jarg1; 
  arg2 = (pjsip_evsub_state)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OnMwiInfoParam_state_get(void * jarg1) {
  int jresult ;
  pj::OnMwiInfoParam *arg1 = (pj::OnMwiInfoParam *) 0 ;
  pjsip_evsub_state result;
  
  arg1 = (pj::OnMwiInfoParam *)jarg1; 
  result = (pjsip_evsub_state) ((arg1)->state);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnMwiInfoParam_rdata_set(void * jarg1, void * jarg2) {
  pj::OnMwiInfoParam *arg1 = (pj::OnMwiInfoParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  arg1 = (pj::OnMwiInfoParam *)jarg1; 
  arg2 = (pj::SipRxData *)jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnMwiInfoParam_rdata_get(void * jarg1) {
  void * jresult ;
  pj::OnMwiInfoParam *arg1 = (pj::OnMwiInfoParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  arg1 = (pj::OnMwiInfoParam *)jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnMwiInfoParam() {
  void * jresult ;
  pj::OnMwiInfoParam *result = 0 ;
  
  result = (pj::OnMwiInfoParam *)new pj::OnMwiInfoParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnMwiInfoParam(void * jarg1) {
  pj::OnMwiInfoParam *arg1 = (pj::OnMwiInfoParam *) 0 ;
  
  arg1 = (pj::OnMwiInfoParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PresNotifyParam_srvPres_set(void * jarg1, void * jarg2) {
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (pj::PresNotifyParam *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->srvPres = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PresNotifyParam_srvPres_get(void * jarg1) {
  void * jresult ;
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  void *result = 0 ;
  
  arg1 = (pj::PresNotifyParam *)jarg1; 
  result = (void *) ((arg1)->srvPres);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PresNotifyParam_state_set(void * jarg1, int jarg2) {
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  pjsip_evsub_state arg2 ;
  
  arg1 = (pj::PresNotifyParam *)jarg1; 
  arg2 = (pjsip_evsub_state)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PresNotifyParam_state_get(void * jarg1) {
  int jresult ;
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  pjsip_evsub_state result;
  
  arg1 = (pj::PresNotifyParam *)jarg1; 
  result = (pjsip_evsub_state) ((arg1)->state);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PresNotifyParam_stateStr_set(void * jarg1, const char * jarg2) {
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::PresNotifyParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->stateStr = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_PresNotifyParam_stateStr_get(void * jarg1) {
  const char * jresult ;
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::PresNotifyParam *)jarg1; 
  result = (pj::string *) & ((arg1)->stateStr);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PresNotifyParam_reason_set(void * jarg1, const char * jarg2) {
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::PresNotifyParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->reason = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_PresNotifyParam_reason_get(void * jarg1) {
  const char * jresult ;
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::PresNotifyParam *)jarg1; 
  result = (pj::string *) & ((arg1)->reason);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PresNotifyParam_withBody_set(void * jarg1, unsigned int jarg2) {
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::PresNotifyParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->withBody = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PresNotifyParam_withBody_get(void * jarg1) {
  unsigned int jresult ;
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  bool result;
  
  arg1 = (pj::PresNotifyParam *)jarg1; 
  result = (bool) ((arg1)->withBody);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PresNotifyParam_txOption_set(void * jarg1, void * jarg2) {
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  pj::SipTxOption *arg2 = (pj::SipTxOption *) 0 ;
  
  arg1 = (pj::PresNotifyParam *)jarg1; 
  arg2 = (pj::SipTxOption *)jarg2; 
  if (arg1) (arg1)->txOption = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PresNotifyParam_txOption_get(void * jarg1) {
  void * jresult ;
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  pj::SipTxOption *result = 0 ;
  
  arg1 = (pj::PresNotifyParam *)jarg1; 
  result = (pj::SipTxOption *)& ((arg1)->txOption);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PresNotifyParam() {
  void * jresult ;
  pj::PresNotifyParam *result = 0 ;
  
  result = (pj::PresNotifyParam *)new pj::PresNotifyParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PresNotifyParam(void * jarg1) {
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  
  arg1 = (pj::PresNotifyParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FindBuddyMatch_match(void * jarg1, const char * jarg2, void * jarg3) {
  unsigned int jresult ;
  pj::FindBuddyMatch *arg1 = (pj::FindBuddyMatch *) 0 ;
  pj::string *arg2 = 0 ;
  pj::Buddy *arg3 = 0 ;
  bool result;
  
  arg1 = (pj::FindBuddyMatch *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (pj::Buddy *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::Buddy const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->match((pj::string const &)*arg2,(pj::Buddy const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FindBuddyMatch_matchSwigExplicitFindBuddyMatch(void * jarg1, const char * jarg2, void * jarg3) {
  unsigned int jresult ;
  pj::FindBuddyMatch *arg1 = (pj::FindBuddyMatch *) 0 ;
  pj::string *arg2 = 0 ;
  pj::Buddy *arg3 = 0 ;
  bool result;
  
  arg1 = (pj::FindBuddyMatch *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (pj::Buddy *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::Buddy const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->pj::FindBuddyMatch::match((pj::string const &)*arg2,(pj::Buddy const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FindBuddyMatch(void * jarg1) {
  pj::FindBuddyMatch *arg1 = (pj::FindBuddyMatch *) 0 ;
  
  arg1 = (pj::FindBuddyMatch *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FindBuddyMatch() {
  void * jresult ;
  pj::FindBuddyMatch *result = 0 ;
  
  result = (pj::FindBuddyMatch *)new SwigDirector_FindBuddyMatch();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FindBuddyMatch_director_connect(void *objarg, SwigDirector_FindBuddyMatch::SWIG_Callback0_t callback0) {
  pj::FindBuddyMatch *obj = (pj::FindBuddyMatch *)objarg;
  SwigDirector_FindBuddyMatch *director = static_cast<SwigDirector_FindBuddyMatch *>(obj);
  director->swig_connect_director(callback0);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Account() {
  void * jresult ;
  pj::Account *result = 0 ;
  
  result = (pj::Account *)new SwigDirector_Account();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Account(void * jarg1) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Account_create__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::AccountConfig *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::AccountConfig *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AccountConfig const & is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->create((pj::AccountConfig const &)*arg2,arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Account_create__SWIG_1(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::AccountConfig *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::AccountConfig *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AccountConfig const & is null", 0);
    return ;
  } 
  try {
    (arg1)->create((pj::AccountConfig const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Account_shutdown(void * jarg1) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  (arg1)->shutdown();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Account_modify(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::AccountConfig *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::AccountConfig *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AccountConfig const & is null", 0);
    return ;
  } 
  try {
    (arg1)->modify((pj::AccountConfig const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Account_isValid(void * jarg1) {
  unsigned int jresult ;
  pj::Account *arg1 = (pj::Account *) 0 ;
  bool result;
  
  arg1 = (pj::Account *)jarg1; 
  result = (bool)((pj::Account const *)arg1)->isValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Account_setDefault(void * jarg1) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  try {
    (arg1)->setDefault();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Account_isDefault(void * jarg1) {
  unsigned int jresult ;
  pj::Account *arg1 = (pj::Account *) 0 ;
  bool result;
  
  arg1 = (pj::Account *)jarg1; 
  result = (bool)((pj::Account const *)arg1)->isDefault();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Account_getId(void * jarg1) {
  int jresult ;
  pj::Account *arg1 = (pj::Account *) 0 ;
  int result;
  
  arg1 = (pj::Account *)jarg1; 
  result = (int)((pj::Account const *)arg1)->getId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Account_lookup(int jarg1) {
  void * jresult ;
  int arg1 ;
  pj::Account *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (pj::Account *)pj::Account::lookup(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Account_getInfo(void * jarg1) {
  void * jresult ;
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::AccountInfo result;
  
  arg1 = (pj::Account *)jarg1; 
  try {
    result = ((pj::Account const *)arg1)->getInfo();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::AccountInfo(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Account_setRegistration(void * jarg1, unsigned int jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = jarg2 ? true : false; 
  try {
    (arg1)->setRegistration(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Account_setOnlineStatus(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::PresenceStatus *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::PresenceStatus *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::PresenceStatus const & is null", 0);
    return ;
  } 
  try {
    (arg1)->setOnlineStatus((pj::PresenceStatus const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Account_setTransport(void * jarg1, int jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::TransportId arg2 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::TransportId)jarg2; 
  try {
    (arg1)->setTransport(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Account_presNotify(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::PresNotifyParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::PresNotifyParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::PresNotifyParam const & is null", 0);
    return ;
  } 
  try {
    (arg1)->presNotify((pj::PresNotifyParam const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Account_enumBuddies2(void * jarg1) {
  void * jresult ;
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::BuddyVector2 result;
  
  arg1 = (pj::Account *)jarg1; 
  try {
    result = ((pj::Account const *)arg1)->enumBuddies2();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::BuddyVector2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Account_findBuddy2(void * jarg1, const char * jarg2) {
  void * jresult ;
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::string arg2 ;
  pj::Buddy result;
  
  arg1 = (pj::Account *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  try {
    result = ((pj::Account const *)arg1)->findBuddy2(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::Buddy(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Account_onIncomingCall(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnIncomingCallParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::OnIncomingCallParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnIncomingCallParam & is null", 0);
    return ;
  } 
  (arg1)->onIncomingCall(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Account_onIncomingCallSwigExplicitAccount(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnIncomingCallParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::OnIncomingCallParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnIncomingCallParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Account::onIncomingCall(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Account_onRegStarted(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnRegStartedParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::OnRegStartedParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnRegStartedParam & is null", 0);
    return ;
  } 
  (arg1)->onRegStarted(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Account_onRegStartedSwigExplicitAccount(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnRegStartedParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::OnRegStartedParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnRegStartedParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Account::onRegStarted(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Account_onRegState(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnRegStateParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::OnRegStateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnRegStateParam & is null", 0);
    return ;
  } 
  (arg1)->onRegState(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Account_onRegStateSwigExplicitAccount(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnRegStateParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::OnRegStateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnRegStateParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Account::onRegState(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Account_onIncomingSubscribe(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnIncomingSubscribeParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::OnIncomingSubscribeParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnIncomingSubscribeParam & is null", 0);
    return ;
  } 
  (arg1)->onIncomingSubscribe(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Account_onIncomingSubscribeSwigExplicitAccount(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnIncomingSubscribeParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::OnIncomingSubscribeParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnIncomingSubscribeParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Account::onIncomingSubscribe(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Account_onInstantMessage(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnInstantMessageParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::OnInstantMessageParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnInstantMessageParam & is null", 0);
    return ;
  } 
  (arg1)->onInstantMessage(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Account_onInstantMessageSwigExplicitAccount(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnInstantMessageParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::OnInstantMessageParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnInstantMessageParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Account::onInstantMessage(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Account_onInstantMessageStatus(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnInstantMessageStatusParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::OnInstantMessageStatusParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnInstantMessageStatusParam & is null", 0);
    return ;
  } 
  (arg1)->onInstantMessageStatus(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Account_onInstantMessageStatusSwigExplicitAccount(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnInstantMessageStatusParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::OnInstantMessageStatusParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnInstantMessageStatusParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Account::onInstantMessageStatus(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Account_onTypingIndication(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnTypingIndicationParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::OnTypingIndicationParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnTypingIndicationParam & is null", 0);
    return ;
  } 
  (arg1)->onTypingIndication(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Account_onTypingIndicationSwigExplicitAccount(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnTypingIndicationParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::OnTypingIndicationParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnTypingIndicationParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Account::onTypingIndication(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Account_onMwiInfo(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnMwiInfoParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::OnMwiInfoParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnMwiInfoParam & is null", 0);
    return ;
  } 
  (arg1)->onMwiInfo(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Account_onMwiInfoSwigExplicitAccount(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnMwiInfoParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::OnMwiInfoParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnMwiInfoParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Account::onMwiInfo(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Account_director_connect(void *objarg, SwigDirector_Account::SWIG_Callback0_t callback0, SwigDirector_Account::SWIG_Callback1_t callback1, SwigDirector_Account::SWIG_Callback2_t callback2, SwigDirector_Account::SWIG_Callback3_t callback3, SwigDirector_Account::SWIG_Callback4_t callback4, SwigDirector_Account::SWIG_Callback5_t callback5, SwigDirector_Account::SWIG_Callback6_t callback6, SwigDirector_Account::SWIG_Callback7_t callback7) {
  pj::Account *obj = (pj::Account *)objarg;
  SwigDirector_Account *director = static_cast<SwigDirector_Account *>(obj);
  director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MathStat_n_set(void * jarg1, int jarg2) {
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int arg2 ;
  
  arg1 = (pj::MathStat *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->n = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MathStat_n_get(void * jarg1) {
  int jresult ;
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int result;
  
  arg1 = (pj::MathStat *)jarg1; 
  result = (int) ((arg1)->n);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MathStat_max_set(void * jarg1, int jarg2) {
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int arg2 ;
  
  arg1 = (pj::MathStat *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->max = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MathStat_max_get(void * jarg1) {
  int jresult ;
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int result;
  
  arg1 = (pj::MathStat *)jarg1; 
  result = (int) ((arg1)->max);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MathStat_min_set(void * jarg1, int jarg2) {
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int arg2 ;
  
  arg1 = (pj::MathStat *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->min = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MathStat_min_get(void * jarg1) {
  int jresult ;
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int result;
  
  arg1 = (pj::MathStat *)jarg1; 
  result = (int) ((arg1)->min);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MathStat_last_set(void * jarg1, int jarg2) {
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int arg2 ;
  
  arg1 = (pj::MathStat *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->last = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MathStat_last_get(void * jarg1) {
  int jresult ;
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int result;
  
  arg1 = (pj::MathStat *)jarg1; 
  result = (int) ((arg1)->last);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MathStat_mean_set(void * jarg1, int jarg2) {
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int arg2 ;
  
  arg1 = (pj::MathStat *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mean = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MathStat_mean_get(void * jarg1) {
  int jresult ;
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int result;
  
  arg1 = (pj::MathStat *)jarg1; 
  result = (int) ((arg1)->mean);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MathStat() {
  void * jresult ;
  pj::MathStat *result = 0 ;
  
  result = (pj::MathStat *)new pj::MathStat();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MathStat(void * jarg1) {
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  
  arg1 = (pj::MathStat *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LossType_burst_set(void * jarg1, unsigned int jarg2) {
  pj::LossType *arg1 = (pj::LossType *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::LossType *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->burst = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LossType_burst_get(void * jarg1) {
  unsigned int jresult ;
  pj::LossType *arg1 = (pj::LossType *) 0 ;
  unsigned int result;
  
  arg1 = (pj::LossType *)jarg1; 
  result = (unsigned int) ((arg1)->burst);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LossType_random_set(void * jarg1, unsigned int jarg2) {
  pj::LossType *arg1 = (pj::LossType *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::LossType *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->random = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LossType_random_get(void * jarg1) {
  unsigned int jresult ;
  pj::LossType *arg1 = (pj::LossType *) 0 ;
  unsigned int result;
  
  arg1 = (pj::LossType *)jarg1; 
  result = (unsigned int) ((arg1)->random);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LossType() {
  void * jresult ;
  pj::LossType *result = 0 ;
  
  result = (pj::LossType *)new pj::LossType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LossType(void * jarg1) {
  pj::LossType *arg1 = (pj::LossType *) 0 ;
  
  arg1 = (pj::LossType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpStreamStat_update_set(void * jarg1, void * jarg2) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  pj::TimeVal *arg2 = (pj::TimeVal *) 0 ;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  arg2 = (pj::TimeVal *)jarg2; 
  if (arg1) (arg1)->update = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RtcpStreamStat_update_get(void * jarg1) {
  void * jresult ;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  pj::TimeVal *result = 0 ;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  result = (pj::TimeVal *)& ((arg1)->update);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpStreamStat_updateCount_set(void * jarg1, unsigned int jarg2) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->updateCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RtcpStreamStat_updateCount_get(void * jarg1) {
  unsigned int jresult ;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int result;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  result = (unsigned int) ((arg1)->updateCount);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpStreamStat_pkt_set(void * jarg1, unsigned int jarg2) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->pkt = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RtcpStreamStat_pkt_get(void * jarg1) {
  unsigned int jresult ;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int result;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  result = (unsigned int) ((arg1)->pkt);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpStreamStat_bytes_set(void * jarg1, unsigned int jarg2) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->bytes = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RtcpStreamStat_bytes_get(void * jarg1) {
  unsigned int jresult ;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int result;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  result = (unsigned int) ((arg1)->bytes);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpStreamStat_discard_set(void * jarg1, unsigned int jarg2) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->discard = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RtcpStreamStat_discard_get(void * jarg1) {
  unsigned int jresult ;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int result;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  result = (unsigned int) ((arg1)->discard);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpStreamStat_loss_set(void * jarg1, unsigned int jarg2) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->loss = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RtcpStreamStat_loss_get(void * jarg1) {
  unsigned int jresult ;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int result;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  result = (unsigned int) ((arg1)->loss);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpStreamStat_reorder_set(void * jarg1, unsigned int jarg2) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->reorder = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RtcpStreamStat_reorder_get(void * jarg1) {
  unsigned int jresult ;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int result;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  result = (unsigned int) ((arg1)->reorder);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpStreamStat_dup_set(void * jarg1, unsigned int jarg2) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->dup = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RtcpStreamStat_dup_get(void * jarg1) {
  unsigned int jresult ;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int result;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  result = (unsigned int) ((arg1)->dup);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpStreamStat_lossPeriodUsec_set(void * jarg1, void * jarg2) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  pj::MathStat *arg2 = (pj::MathStat *) 0 ;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  arg2 = (pj::MathStat *)jarg2; 
  if (arg1) (arg1)->lossPeriodUsec = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RtcpStreamStat_lossPeriodUsec_get(void * jarg1) {
  void * jresult ;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  pj::MathStat *result = 0 ;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  result = (pj::MathStat *)& ((arg1)->lossPeriodUsec);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpStreamStat_lossType_set(void * jarg1, void * jarg2) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  pj::LossType *arg2 = (pj::LossType *) 0 ;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  arg2 = (pj::LossType *)jarg2; 
  if (arg1) (arg1)->lossType = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RtcpStreamStat_lossType_get(void * jarg1) {
  void * jresult ;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  pj::LossType *result = 0 ;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  result = (pj::LossType *)& ((arg1)->lossType);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpStreamStat_jitterUsec_set(void * jarg1, void * jarg2) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  pj::MathStat *arg2 = (pj::MathStat *) 0 ;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  arg2 = (pj::MathStat *)jarg2; 
  if (arg1) (arg1)->jitterUsec = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RtcpStreamStat_jitterUsec_get(void * jarg1) {
  void * jresult ;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  pj::MathStat *result = 0 ;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  result = (pj::MathStat *)& ((arg1)->jitterUsec);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RtcpStreamStat() {
  void * jresult ;
  pj::RtcpStreamStat *result = 0 ;
  
  result = (pj::RtcpStreamStat *)new pj::RtcpStreamStat();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RtcpStreamStat(void * jarg1) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpSdes_cname_set(void * jarg1, const char * jarg2) {
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::RtcpSdes *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->cname = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_RtcpSdes_cname_get(void * jarg1) {
  const char * jresult ;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::RtcpSdes *)jarg1; 
  result = (pj::string *) & ((arg1)->cname);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpSdes_name_set(void * jarg1, const char * jarg2) {
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::RtcpSdes *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_RtcpSdes_name_get(void * jarg1) {
  const char * jresult ;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::RtcpSdes *)jarg1; 
  result = (pj::string *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpSdes_email_set(void * jarg1, const char * jarg2) {
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::RtcpSdes *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->email = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_RtcpSdes_email_get(void * jarg1) {
  const char * jresult ;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::RtcpSdes *)jarg1; 
  result = (pj::string *) & ((arg1)->email);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpSdes_phone_set(void * jarg1, const char * jarg2) {
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::RtcpSdes *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->phone = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_RtcpSdes_phone_get(void * jarg1) {
  const char * jresult ;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::RtcpSdes *)jarg1; 
  result = (pj::string *) & ((arg1)->phone);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpSdes_loc_set(void * jarg1, const char * jarg2) {
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::RtcpSdes *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->loc = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_RtcpSdes_loc_get(void * jarg1) {
  const char * jresult ;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::RtcpSdes *)jarg1; 
  result = (pj::string *) & ((arg1)->loc);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpSdes_tool_set(void * jarg1, const char * jarg2) {
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::RtcpSdes *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->tool = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_RtcpSdes_tool_get(void * jarg1) {
  const char * jresult ;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::RtcpSdes *)jarg1; 
  result = (pj::string *) & ((arg1)->tool);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpSdes_note_set(void * jarg1, const char * jarg2) {
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::RtcpSdes *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->note = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_RtcpSdes_note_get(void * jarg1) {
  const char * jresult ;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::RtcpSdes *)jarg1; 
  result = (pj::string *) & ((arg1)->note);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RtcpSdes() {
  void * jresult ;
  pj::RtcpSdes *result = 0 ;
  
  result = (pj::RtcpSdes *)new pj::RtcpSdes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RtcpSdes(void * jarg1) {
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  
  arg1 = (pj::RtcpSdes *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpStat_start_set(void * jarg1, void * jarg2) {
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::TimeVal *arg2 = (pj::TimeVal *) 0 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  arg2 = (pj::TimeVal *)jarg2; 
  if (arg1) (arg1)->start = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RtcpStat_start_get(void * jarg1) {
  void * jresult ;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::TimeVal *result = 0 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  result = (pj::TimeVal *)& ((arg1)->start);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpStat_txStat_set(void * jarg1, void * jarg2) {
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::RtcpStreamStat *arg2 = (pj::RtcpStreamStat *) 0 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  arg2 = (pj::RtcpStreamStat *)jarg2; 
  if (arg1) (arg1)->txStat = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RtcpStat_txStat_get(void * jarg1) {
  void * jresult ;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::RtcpStreamStat *result = 0 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  result = (pj::RtcpStreamStat *)& ((arg1)->txStat);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpStat_rxStat_set(void * jarg1, void * jarg2) {
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::RtcpStreamStat *arg2 = (pj::RtcpStreamStat *) 0 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  arg2 = (pj::RtcpStreamStat *)jarg2; 
  if (arg1) (arg1)->rxStat = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RtcpStat_rxStat_get(void * jarg1) {
  void * jresult ;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::RtcpStreamStat *result = 0 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  result = (pj::RtcpStreamStat *)& ((arg1)->rxStat);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpStat_rttUsec_set(void * jarg1, void * jarg2) {
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::MathStat *arg2 = (pj::MathStat *) 0 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  arg2 = (pj::MathStat *)jarg2; 
  if (arg1) (arg1)->rttUsec = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RtcpStat_rttUsec_get(void * jarg1) {
  void * jresult ;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::MathStat *result = 0 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  result = (pj::MathStat *)& ((arg1)->rttUsec);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpStat_rtpTxLastTs_set(void * jarg1, unsigned int jarg2) {
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj_uint32_t arg2 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  if (arg1) (arg1)->rtpTxLastTs = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RtcpStat_rtpTxLastTs_get(void * jarg1) {
  unsigned int jresult ;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj_uint32_t result;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  result = (pj_uint32_t) ((arg1)->rtpTxLastTs);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpStat_rtpTxLastSeq_set(void * jarg1, unsigned short jarg2) {
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj_uint16_t arg2 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  arg2 = (pj_uint16_t)jarg2; 
  if (arg1) (arg1)->rtpTxLastSeq = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_RtcpStat_rtpTxLastSeq_get(void * jarg1) {
  unsigned short jresult ;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj_uint16_t result;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  result = (pj_uint16_t) ((arg1)->rtpTxLastSeq);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpStat_rxIpdvUsec_set(void * jarg1, void * jarg2) {
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::MathStat *arg2 = (pj::MathStat *) 0 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  arg2 = (pj::MathStat *)jarg2; 
  if (arg1) (arg1)->rxIpdvUsec = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RtcpStat_rxIpdvUsec_get(void * jarg1) {
  void * jresult ;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::MathStat *result = 0 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  result = (pj::MathStat *)& ((arg1)->rxIpdvUsec);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpStat_rxRawJitterUsec_set(void * jarg1, void * jarg2) {
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::MathStat *arg2 = (pj::MathStat *) 0 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  arg2 = (pj::MathStat *)jarg2; 
  if (arg1) (arg1)->rxRawJitterUsec = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RtcpStat_rxRawJitterUsec_get(void * jarg1) {
  void * jresult ;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::MathStat *result = 0 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  result = (pj::MathStat *)& ((arg1)->rxRawJitterUsec);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RtcpStat_peerSdes_set(void * jarg1, void * jarg2) {
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::RtcpSdes *arg2 = (pj::RtcpSdes *) 0 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  arg2 = (pj::RtcpSdes *)jarg2; 
  if (arg1) (arg1)->peerSdes = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RtcpStat_peerSdes_get(void * jarg1) {
  void * jresult ;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::RtcpSdes *result = 0 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  result = (pj::RtcpSdes *)& ((arg1)->peerSdes);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RtcpStat() {
  void * jresult ;
  pj::RtcpStat *result = 0 ;
  
  result = (pj::RtcpStat *)new pj::RtcpStat();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RtcpStat(void * jarg1) {
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JbufState_frameSize_set(void * jarg1, unsigned int jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::JbufState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->frameSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_JbufState_frameSize_get(void * jarg1) {
  unsigned int jresult ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  arg1 = (pj::JbufState *)jarg1; 
  result = (unsigned int) ((arg1)->frameSize);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JbufState_minPrefetch_set(void * jarg1, unsigned int jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::JbufState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->minPrefetch = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_JbufState_minPrefetch_get(void * jarg1) {
  unsigned int jresult ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  arg1 = (pj::JbufState *)jarg1; 
  result = (unsigned int) ((arg1)->minPrefetch);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JbufState_maxPrefetch_set(void * jarg1, unsigned int jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::JbufState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->maxPrefetch = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_JbufState_maxPrefetch_get(void * jarg1) {
  unsigned int jresult ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  arg1 = (pj::JbufState *)jarg1; 
  result = (unsigned int) ((arg1)->maxPrefetch);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JbufState_burst_set(void * jarg1, unsigned int jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::JbufState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->burst = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_JbufState_burst_get(void * jarg1) {
  unsigned int jresult ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  arg1 = (pj::JbufState *)jarg1; 
  result = (unsigned int) ((arg1)->burst);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JbufState_prefetch_set(void * jarg1, unsigned int jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::JbufState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->prefetch = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_JbufState_prefetch_get(void * jarg1) {
  unsigned int jresult ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  arg1 = (pj::JbufState *)jarg1; 
  result = (unsigned int) ((arg1)->prefetch);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JbufState_size_set(void * jarg1, unsigned int jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::JbufState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_JbufState_size_get(void * jarg1) {
  unsigned int jresult ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  arg1 = (pj::JbufState *)jarg1; 
  result = (unsigned int) ((arg1)->size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JbufState_avgDelayMsec_set(void * jarg1, unsigned int jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::JbufState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->avgDelayMsec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_JbufState_avgDelayMsec_get(void * jarg1) {
  unsigned int jresult ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  arg1 = (pj::JbufState *)jarg1; 
  result = (unsigned int) ((arg1)->avgDelayMsec);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JbufState_minDelayMsec_set(void * jarg1, unsigned int jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::JbufState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->minDelayMsec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_JbufState_minDelayMsec_get(void * jarg1) {
  unsigned int jresult ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  arg1 = (pj::JbufState *)jarg1; 
  result = (unsigned int) ((arg1)->minDelayMsec);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JbufState_maxDelayMsec_set(void * jarg1, unsigned int jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::JbufState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->maxDelayMsec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_JbufState_maxDelayMsec_get(void * jarg1) {
  unsigned int jresult ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  arg1 = (pj::JbufState *)jarg1; 
  result = (unsigned int) ((arg1)->maxDelayMsec);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JbufState_devDelayMsec_set(void * jarg1, unsigned int jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::JbufState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->devDelayMsec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_JbufState_devDelayMsec_get(void * jarg1) {
  unsigned int jresult ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  arg1 = (pj::JbufState *)jarg1; 
  result = (unsigned int) ((arg1)->devDelayMsec);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JbufState_avgBurst_set(void * jarg1, unsigned int jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::JbufState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->avgBurst = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_JbufState_avgBurst_get(void * jarg1) {
  unsigned int jresult ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  arg1 = (pj::JbufState *)jarg1; 
  result = (unsigned int) ((arg1)->avgBurst);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JbufState_lost_set(void * jarg1, unsigned int jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::JbufState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->lost = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_JbufState_lost_get(void * jarg1) {
  unsigned int jresult ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  arg1 = (pj::JbufState *)jarg1; 
  result = (unsigned int) ((arg1)->lost);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JbufState_discard_set(void * jarg1, unsigned int jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::JbufState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->discard = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_JbufState_discard_get(void * jarg1) {
  unsigned int jresult ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  arg1 = (pj::JbufState *)jarg1; 
  result = (unsigned int) ((arg1)->discard);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JbufState_empty_set(void * jarg1, unsigned int jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::JbufState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->empty = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_JbufState_empty_get(void * jarg1) {
  unsigned int jresult ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  arg1 = (pj::JbufState *)jarg1; 
  result = (unsigned int) ((arg1)->empty);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_JbufState() {
  void * jresult ;
  pj::JbufState *result = 0 ;
  
  result = (pj::JbufState *)new pj::JbufState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_JbufState(void * jarg1) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  
  arg1 = (pj::JbufState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SdpSession_wholeSdp_set(void * jarg1, const char * jarg2) {
  pj::SdpSession *arg1 = (pj::SdpSession *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SdpSession *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->wholeSdp = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SdpSession_wholeSdp_get(void * jarg1) {
  const char * jresult ;
  pj::SdpSession *arg1 = (pj::SdpSession *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SdpSession *)jarg1; 
  result = (pj::string *) & ((arg1)->wholeSdp);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SdpSession_pjSdpSession_set(void * jarg1, void * jarg2) {
  pj::SdpSession *arg1 = (pj::SdpSession *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (pj::SdpSession *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->pjSdpSession = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SdpSession_pjSdpSession_get(void * jarg1) {
  void * jresult ;
  pj::SdpSession *arg1 = (pj::SdpSession *) 0 ;
  void *result = 0 ;
  
  arg1 = (pj::SdpSession *)jarg1; 
  result = (void *) ((arg1)->pjSdpSession);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SdpSession() {
  void * jresult ;
  pj::SdpSession *result = 0 ;
  
  result = (pj::SdpSession *)new pj::SdpSession();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SdpSession(void * jarg1) {
  pj::SdpSession *arg1 = (pj::SdpSession *) 0 ;
  
  arg1 = (pj::SdpSession *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaTransportInfo_localRtpName_set(void * jarg1, const char * jarg2) {
  pj::MediaTransportInfo *arg1 = (pj::MediaTransportInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  arg1 = (pj::MediaTransportInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::SocketAddress arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->localRtpName = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_MediaTransportInfo_localRtpName_get(void * jarg1) {
  const char * jresult ;
  pj::MediaTransportInfo *arg1 = (pj::MediaTransportInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  arg1 = (pj::MediaTransportInfo *)jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->localRtpName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaTransportInfo_localRtcpName_set(void * jarg1, const char * jarg2) {
  pj::MediaTransportInfo *arg1 = (pj::MediaTransportInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  arg1 = (pj::MediaTransportInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::SocketAddress arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->localRtcpName = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_MediaTransportInfo_localRtcpName_get(void * jarg1) {
  const char * jresult ;
  pj::MediaTransportInfo *arg1 = (pj::MediaTransportInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  arg1 = (pj::MediaTransportInfo *)jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->localRtcpName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaTransportInfo_srcRtpName_set(void * jarg1, const char * jarg2) {
  pj::MediaTransportInfo *arg1 = (pj::MediaTransportInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  arg1 = (pj::MediaTransportInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::SocketAddress arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->srcRtpName = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_MediaTransportInfo_srcRtpName_get(void * jarg1) {
  const char * jresult ;
  pj::MediaTransportInfo *arg1 = (pj::MediaTransportInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  arg1 = (pj::MediaTransportInfo *)jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->srcRtpName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaTransportInfo_srcRtcpName_set(void * jarg1, const char * jarg2) {
  pj::MediaTransportInfo *arg1 = (pj::MediaTransportInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  arg1 = (pj::MediaTransportInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::SocketAddress arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->srcRtcpName = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_MediaTransportInfo_srcRtcpName_get(void * jarg1) {
  const char * jresult ;
  pj::MediaTransportInfo *arg1 = (pj::MediaTransportInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  arg1 = (pj::MediaTransportInfo *)jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->srcRtcpName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MediaTransportInfo() {
  void * jresult ;
  pj::MediaTransportInfo *result = 0 ;
  
  result = (pj::MediaTransportInfo *)new pj::MediaTransportInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MediaTransportInfo(void * jarg1) {
  pj::MediaTransportInfo *arg1 = (pj::MediaTransportInfo *) 0 ;
  
  arg1 = (pj::MediaTransportInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallSetting_flag_set(void * jarg1, unsigned int jarg2) {
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CallSetting *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->flag = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CallSetting_flag_get(void * jarg1) {
  unsigned int jresult ;
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CallSetting *)jarg1; 
  result = (unsigned int) ((arg1)->flag);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallSetting_reqKeyframeMethod_set(void * jarg1, unsigned int jarg2) {
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CallSetting *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->reqKeyframeMethod = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CallSetting_reqKeyframeMethod_get(void * jarg1) {
  unsigned int jresult ;
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CallSetting *)jarg1; 
  result = (unsigned int) ((arg1)->reqKeyframeMethod);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallSetting_audioCount_set(void * jarg1, unsigned int jarg2) {
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CallSetting *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->audioCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CallSetting_audioCount_get(void * jarg1) {
  unsigned int jresult ;
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CallSetting *)jarg1; 
  result = (unsigned int) ((arg1)->audioCount);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallSetting_videoCount_set(void * jarg1, unsigned int jarg2) {
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CallSetting *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->videoCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CallSetting_videoCount_get(void * jarg1) {
  unsigned int jresult ;
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CallSetting *)jarg1; 
  result = (unsigned int) ((arg1)->videoCount);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallSetting_mediaDir_set(void * jarg1, void * jarg2) {
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  pj::MediaDirVector *arg2 = (pj::MediaDirVector *) 0 ;
  
  arg1 = (pj::CallSetting *)jarg1; 
  arg2 = (pj::MediaDirVector *)jarg2; 
  if (arg1) (arg1)->mediaDir = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CallSetting_mediaDir_get(void * jarg1) {
  void * jresult ;
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  pj::MediaDirVector *result = 0 ;
  
  arg1 = (pj::CallSetting *)jarg1; 
  result = (pj::MediaDirVector *)& ((arg1)->mediaDir);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallSetting_customCallId_set(void * jarg1, const char * jarg2) {
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::CallSetting *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->customCallId = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_CallSetting_customCallId_get(void * jarg1) {
  const char * jresult ;
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::CallSetting *)jarg1; 
  result = (pj::string *) & ((arg1)->customCallId);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CallSetting__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  pj::CallSetting *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (pj::CallSetting *)new pj::CallSetting(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CallSetting__SWIG_1() {
  void * jresult ;
  pj::CallSetting *result = 0 ;
  
  result = (pj::CallSetting *)new pj::CallSetting();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CallSetting_isEmpty(void * jarg1) {
  unsigned int jresult ;
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  bool result;
  
  arg1 = (pj::CallSetting *)jarg1; 
  result = (bool)((pj::CallSetting const *)arg1)->isEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CallSetting(void * jarg1) {
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  
  arg1 = (pj::CallSetting *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallMediaInfo_index_set(void * jarg1, unsigned int jarg2) {
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->index = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CallMediaInfo_index_get(void * jarg1) {
  unsigned int jresult ;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  result = (unsigned int) ((arg1)->index);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallMediaInfo_type_set(void * jarg1, int jarg2) {
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjmedia_type arg2 ;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  arg2 = (pjmedia_type)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CallMediaInfo_type_get(void * jarg1) {
  int jresult ;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjmedia_type result;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  result = (pjmedia_type) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallMediaInfo_dir_set(void * jarg1, int jarg2) {
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjmedia_dir arg2 ;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  arg2 = (pjmedia_dir)jarg2; 
  if (arg1) (arg1)->dir = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CallMediaInfo_dir_get(void * jarg1) {
  int jresult ;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjmedia_dir result;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  result = (pjmedia_dir) ((arg1)->dir);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallMediaInfo_status_set(void * jarg1, int jarg2) {
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjsua_call_media_status arg2 ;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  arg2 = (pjsua_call_media_status)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CallMediaInfo_status_get(void * jarg1) {
  int jresult ;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjsua_call_media_status result;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  result = (pjsua_call_media_status) ((arg1)->status);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallMediaInfo_audioConfSlot_set(void * jarg1, int jarg2) {
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  int arg2 ;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->audioConfSlot = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CallMediaInfo_audioConfSlot_get(void * jarg1) {
  int jresult ;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  int result;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  result = (int) ((arg1)->audioConfSlot);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallMediaInfo_videoIncomingWindowId_set(void * jarg1, int jarg2) {
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjsua_vid_win_id arg2 ;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  arg2 = (pjsua_vid_win_id)jarg2; 
  if (arg1) (arg1)->videoIncomingWindowId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CallMediaInfo_videoIncomingWindowId_get(void * jarg1) {
  int jresult ;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjsua_vid_win_id result;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  result = (pjsua_vid_win_id) ((arg1)->videoIncomingWindowId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallMediaInfo_videoWindow_set(void * jarg1, void * jarg2) {
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pj::VideoWindow *arg2 = (pj::VideoWindow *) 0 ;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  arg2 = (pj::VideoWindow *)jarg2; 
  if (arg1) (arg1)->videoWindow = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CallMediaInfo_videoWindow_get(void * jarg1) {
  void * jresult ;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pj::VideoWindow *result = 0 ;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  result = (pj::VideoWindow *)& ((arg1)->videoWindow);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallMediaInfo_videoCapDev_set(void * jarg1, int jarg2) {
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjmedia_vid_dev_index arg2 ;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  arg2 = (pjmedia_vid_dev_index)jarg2; 
  if (arg1) (arg1)->videoCapDev = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CallMediaInfo_videoCapDev_get(void * jarg1) {
  int jresult ;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjmedia_vid_dev_index result;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  result = (pjmedia_vid_dev_index) ((arg1)->videoCapDev);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CallMediaInfo() {
  void * jresult ;
  pj::CallMediaInfo *result = 0 ;
  
  result = (pj::CallMediaInfo *)new pj::CallMediaInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CallMediaInfo(void * jarg1) {
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallInfo_id_set(void * jarg1, int jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsua_call_id arg2 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  arg2 = (pjsua_call_id)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CallInfo_id_get(void * jarg1) {
  int jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsua_call_id result;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pjsua_call_id) ((arg1)->id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallInfo_role_set(void * jarg1, int jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsip_role_e arg2 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  arg2 = (pjsip_role_e)jarg2; 
  if (arg1) (arg1)->role = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CallInfo_role_get(void * jarg1) {
  int jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsip_role_e result;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pjsip_role_e) ((arg1)->role);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallInfo_accId_set(void * jarg1, int jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsua_acc_id arg2 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  arg2 = (pjsua_acc_id)jarg2; 
  if (arg1) (arg1)->accId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CallInfo_accId_get(void * jarg1) {
  int jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsua_acc_id result;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pjsua_acc_id) ((arg1)->accId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallInfo_localUri_set(void * jarg1, const char * jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->localUri = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_CallInfo_localUri_get(void * jarg1) {
  const char * jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->localUri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallInfo_localContact_set(void * jarg1, const char * jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->localContact = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_CallInfo_localContact_get(void * jarg1) {
  const char * jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->localContact);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallInfo_remoteUri_set(void * jarg1, const char * jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->remoteUri = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_CallInfo_remoteUri_get(void * jarg1) {
  const char * jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->remoteUri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallInfo_remoteContact_set(void * jarg1, const char * jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->remoteContact = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_CallInfo_remoteContact_get(void * jarg1) {
  const char * jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->remoteContact);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallInfo_callIdString_set(void * jarg1, const char * jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->callIdString = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_CallInfo_callIdString_get(void * jarg1) {
  const char * jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->callIdString);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallInfo_setting_set(void * jarg1, void * jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::CallSetting *arg2 = (pj::CallSetting *) 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  arg2 = (pj::CallSetting *)jarg2; 
  if (arg1) (arg1)->setting = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CallInfo_setting_get(void * jarg1) {
  void * jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::CallSetting *result = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pj::CallSetting *)& ((arg1)->setting);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallInfo_state_set(void * jarg1, int jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsip_inv_state arg2 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  arg2 = (pjsip_inv_state)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CallInfo_state_get(void * jarg1) {
  int jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsip_inv_state result;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pjsip_inv_state) ((arg1)->state);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallInfo_stateText_set(void * jarg1, const char * jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->stateText = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_CallInfo_stateText_get(void * jarg1) {
  const char * jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->stateText);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallInfo_lastStatusCode_set(void * jarg1, int jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsip_status_code arg2 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->lastStatusCode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CallInfo_lastStatusCode_get(void * jarg1) {
  int jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsip_status_code result;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pjsip_status_code) ((arg1)->lastStatusCode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallInfo_lastReason_set(void * jarg1, const char * jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->lastReason = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_CallInfo_lastReason_get(void * jarg1) {
  const char * jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->lastReason);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallInfo_media_set(void * jarg1, void * jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::CallMediaInfoVector *arg2 = (pj::CallMediaInfoVector *) 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  arg2 = (pj::CallMediaInfoVector *)jarg2; 
  if (arg1) (arg1)->media = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CallInfo_media_get(void * jarg1) {
  void * jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::CallMediaInfoVector *result = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pj::CallMediaInfoVector *)& ((arg1)->media);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallInfo_provMedia_set(void * jarg1, void * jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::CallMediaInfoVector *arg2 = (pj::CallMediaInfoVector *) 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  arg2 = (pj::CallMediaInfoVector *)jarg2; 
  if (arg1) (arg1)->provMedia = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CallInfo_provMedia_get(void * jarg1) {
  void * jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::CallMediaInfoVector *result = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pj::CallMediaInfoVector *)& ((arg1)->provMedia);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallInfo_connectDuration_set(void * jarg1, void * jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::TimeVal *arg2 = (pj::TimeVal *) 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  arg2 = (pj::TimeVal *)jarg2; 
  if (arg1) (arg1)->connectDuration = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CallInfo_connectDuration_get(void * jarg1) {
  void * jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::TimeVal *result = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pj::TimeVal *)& ((arg1)->connectDuration);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallInfo_totalDuration_set(void * jarg1, void * jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::TimeVal *arg2 = (pj::TimeVal *) 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  arg2 = (pj::TimeVal *)jarg2; 
  if (arg1) (arg1)->totalDuration = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CallInfo_totalDuration_get(void * jarg1) {
  void * jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::TimeVal *result = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pj::TimeVal *)& ((arg1)->totalDuration);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallInfo_remOfferer_set(void * jarg1, unsigned int jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->remOfferer = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CallInfo_remOfferer_get(void * jarg1) {
  unsigned int jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  bool result;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (bool) ((arg1)->remOfferer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallInfo_remAudioCount_set(void * jarg1, unsigned int jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->remAudioCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CallInfo_remAudioCount_get(void * jarg1) {
  unsigned int jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (unsigned int) ((arg1)->remAudioCount);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallInfo_remVideoCount_set(void * jarg1, unsigned int jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->remVideoCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CallInfo_remVideoCount_get(void * jarg1) {
  unsigned int jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (unsigned int) ((arg1)->remVideoCount);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CallInfo() {
  void * jresult ;
  pj::CallInfo *result = 0 ;
  
  result = (pj::CallInfo *)new pj::CallInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CallInfo(void * jarg1) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamInfo_type_set(void * jarg1, int jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pjmedia_type arg2 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  arg2 = (pjmedia_type)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamInfo_type_get(void * jarg1) {
  int jresult ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pjmedia_type result;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  result = (pjmedia_type) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamInfo_proto_set(void * jarg1, int jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pjmedia_tp_proto arg2 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  arg2 = (pjmedia_tp_proto)jarg2; 
  if (arg1) (arg1)->proto = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamInfo_proto_get(void * jarg1) {
  int jresult ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pjmedia_tp_proto result;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  result = (pjmedia_tp_proto) ((arg1)->proto);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamInfo_dir_set(void * jarg1, int jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pjmedia_dir arg2 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  arg2 = (pjmedia_dir)jarg2; 
  if (arg1) (arg1)->dir = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamInfo_dir_get(void * jarg1) {
  int jresult ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pjmedia_dir result;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  result = (pjmedia_dir) ((arg1)->dir);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamInfo_remoteRtpAddress_set(void * jarg1, const char * jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::SocketAddress arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->remoteRtpAddress = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_StreamInfo_remoteRtpAddress_get(void * jarg1) {
  const char * jresult ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->remoteRtpAddress);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamInfo_remoteRtcpAddress_set(void * jarg1, const char * jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::SocketAddress arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->remoteRtcpAddress = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_StreamInfo_remoteRtcpAddress_get(void * jarg1) {
  const char * jresult ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->remoteRtcpAddress);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamInfo_txPt_set(void * jarg1, unsigned int jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->txPt = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StreamInfo_txPt_get(void * jarg1) {
  unsigned int jresult ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  result = (unsigned int) ((arg1)->txPt);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamInfo_rxPt_set(void * jarg1, unsigned int jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->rxPt = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StreamInfo_rxPt_get(void * jarg1) {
  unsigned int jresult ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  result = (unsigned int) ((arg1)->rxPt);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamInfo_audTxEventPt_set(void * jarg1, int jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  int arg2 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->audTxEventPt = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamInfo_audTxEventPt_get(void * jarg1) {
  int jresult ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  int result;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  result = (int) ((arg1)->audTxEventPt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamInfo_audRxEventPt_set(void * jarg1, int jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  int arg2 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->audRxEventPt = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamInfo_audRxEventPt_get(void * jarg1) {
  int jresult ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  int result;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  result = (int) ((arg1)->audRxEventPt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamInfo_codecName_set(void * jarg1, const char * jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->codecName = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_StreamInfo_codecName_get(void * jarg1) {
  const char * jresult ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->codecName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamInfo_codecClockRate_set(void * jarg1, unsigned int jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->codecClockRate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StreamInfo_codecClockRate_get(void * jarg1) {
  unsigned int jresult ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  result = (unsigned int) ((arg1)->codecClockRate);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamInfo_audCodecParam_set(void * jarg1, void * jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::CodecParam *arg2 = (pj::CodecParam *) 0 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  arg2 = (pj::CodecParam *)jarg2; 
  if (arg1) (arg1)->audCodecParam = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StreamInfo_audCodecParam_get(void * jarg1) {
  void * jresult ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::CodecParam *result = 0 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  result = (pj::CodecParam *)& ((arg1)->audCodecParam);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamInfo_vidCodecParam_set(void * jarg1, void * jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::VidCodecParam *arg2 = (pj::VidCodecParam *) 0 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  arg2 = (pj::VidCodecParam *)jarg2; 
  if (arg1) (arg1)->vidCodecParam = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StreamInfo_vidCodecParam_get(void * jarg1) {
  void * jresult ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::VidCodecParam *result = 0 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  result = (pj::VidCodecParam *)& ((arg1)->vidCodecParam);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamInfo_jbInit_set(void * jarg1, int jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  int arg2 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->jbInit = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamInfo_jbInit_get(void * jarg1) {
  int jresult ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  int result;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  result = (int) ((arg1)->jbInit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamInfo_jbMinPre_set(void * jarg1, int jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  int arg2 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->jbMinPre = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamInfo_jbMinPre_get(void * jarg1) {
  int jresult ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  int result;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  result = (int) ((arg1)->jbMinPre);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamInfo_jbMaxPre_set(void * jarg1, int jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  int arg2 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->jbMaxPre = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamInfo_jbMaxPre_get(void * jarg1) {
  int jresult ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  int result;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  result = (int) ((arg1)->jbMaxPre);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamInfo_jbMax_set(void * jarg1, int jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  int arg2 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->jbMax = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamInfo_jbMax_get(void * jarg1) {
  int jresult ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  int result;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  result = (int) ((arg1)->jbMax);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamInfo_jbDiscardAlgo_set(void * jarg1, void * jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pjmedia_jb_discard_algo arg2 ;
  pjmedia_jb_discard_algo *argp2 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  argp2 = (pjmedia_jb_discard_algo *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null pjmedia_jb_discard_algo", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->jbDiscardAlgo = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StreamInfo_jbDiscardAlgo_get(void * jarg1) {
  void * jresult ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pjmedia_jb_discard_algo result;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  result =  ((arg1)->jbDiscardAlgo);
  jresult = new pjmedia_jb_discard_algo(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamInfo_rtcpSdesByeDisabled_set(void * jarg1, unsigned int jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->rtcpSdesByeDisabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StreamInfo_rtcpSdesByeDisabled_get(void * jarg1) {
  unsigned int jresult ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  bool result;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  result = (bool) ((arg1)->rtcpSdesByeDisabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StreamInfo() {
  void * jresult ;
  pj::StreamInfo *result = 0 ;
  
  result = (pj::StreamInfo *)new pj::StreamInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StreamInfo(void * jarg1) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamStat_rtcp_set(void * jarg1, void * jarg2) {
  pj::StreamStat *arg1 = (pj::StreamStat *) 0 ;
  pj::RtcpStat *arg2 = (pj::RtcpStat *) 0 ;
  
  arg1 = (pj::StreamStat *)jarg1; 
  arg2 = (pj::RtcpStat *)jarg2; 
  if (arg1) (arg1)->rtcp = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StreamStat_rtcp_get(void * jarg1) {
  void * jresult ;
  pj::StreamStat *arg1 = (pj::StreamStat *) 0 ;
  pj::RtcpStat *result = 0 ;
  
  arg1 = (pj::StreamStat *)jarg1; 
  result = (pj::RtcpStat *)& ((arg1)->rtcp);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamStat_jbuf_set(void * jarg1, void * jarg2) {
  pj::StreamStat *arg1 = (pj::StreamStat *) 0 ;
  pj::JbufState *arg2 = (pj::JbufState *) 0 ;
  
  arg1 = (pj::StreamStat *)jarg1; 
  arg2 = (pj::JbufState *)jarg2; 
  if (arg1) (arg1)->jbuf = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StreamStat_jbuf_get(void * jarg1) {
  void * jresult ;
  pj::StreamStat *arg1 = (pj::StreamStat *) 0 ;
  pj::JbufState *result = 0 ;
  
  arg1 = (pj::StreamStat *)jarg1; 
  result = (pj::JbufState *)& ((arg1)->jbuf);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StreamStat() {
  void * jresult ;
  pj::StreamStat *result = 0 ;
  
  result = (pj::StreamStat *)new pj::StreamStat();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StreamStat(void * jarg1) {
  pj::StreamStat *arg1 = (pj::StreamStat *) 0 ;
  
  arg1 = (pj::StreamStat *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallStateParam_e_set(void * jarg1, void * jarg2) {
  pj::OnCallStateParam *arg1 = (pj::OnCallStateParam *) 0 ;
  pj::SipEvent *arg2 = (pj::SipEvent *) 0 ;
  
  arg1 = (pj::OnCallStateParam *)jarg1; 
  arg2 = (pj::SipEvent *)jarg2; 
  if (arg1) (arg1)->e = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnCallStateParam_e_get(void * jarg1) {
  void * jresult ;
  pj::OnCallStateParam *arg1 = (pj::OnCallStateParam *) 0 ;
  pj::SipEvent *result = 0 ;
  
  arg1 = (pj::OnCallStateParam *)jarg1; 
  result = (pj::SipEvent *)& ((arg1)->e);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnCallStateParam() {
  void * jresult ;
  pj::OnCallStateParam *result = 0 ;
  
  result = (pj::OnCallStateParam *)new pj::OnCallStateParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnCallStateParam(void * jarg1) {
  pj::OnCallStateParam *arg1 = (pj::OnCallStateParam *) 0 ;
  
  arg1 = (pj::OnCallStateParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallTsxStateParam_e_set(void * jarg1, void * jarg2) {
  pj::OnCallTsxStateParam *arg1 = (pj::OnCallTsxStateParam *) 0 ;
  pj::SipEvent *arg2 = (pj::SipEvent *) 0 ;
  
  arg1 = (pj::OnCallTsxStateParam *)jarg1; 
  arg2 = (pj::SipEvent *)jarg2; 
  if (arg1) (arg1)->e = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnCallTsxStateParam_e_get(void * jarg1) {
  void * jresult ;
  pj::OnCallTsxStateParam *arg1 = (pj::OnCallTsxStateParam *) 0 ;
  pj::SipEvent *result = 0 ;
  
  arg1 = (pj::OnCallTsxStateParam *)jarg1; 
  result = (pj::SipEvent *)& ((arg1)->e);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnCallTsxStateParam() {
  void * jresult ;
  pj::OnCallTsxStateParam *result = 0 ;
  
  result = (pj::OnCallTsxStateParam *)new pj::OnCallTsxStateParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnCallTsxStateParam(void * jarg1) {
  pj::OnCallTsxStateParam *arg1 = (pj::OnCallTsxStateParam *) 0 ;
  
  arg1 = (pj::OnCallTsxStateParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnCallMediaStateParam() {
  void * jresult ;
  pj::OnCallMediaStateParam *result = 0 ;
  
  result = (pj::OnCallMediaStateParam *)new pj::OnCallMediaStateParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnCallMediaStateParam(void * jarg1) {
  pj::OnCallMediaStateParam *arg1 = (pj::OnCallMediaStateParam *) 0 ;
  
  arg1 = (pj::OnCallMediaStateParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallSdpCreatedParam_sdp_set(void * jarg1, void * jarg2) {
  pj::OnCallSdpCreatedParam *arg1 = (pj::OnCallSdpCreatedParam *) 0 ;
  pj::SdpSession *arg2 = (pj::SdpSession *) 0 ;
  
  arg1 = (pj::OnCallSdpCreatedParam *)jarg1; 
  arg2 = (pj::SdpSession *)jarg2; 
  if (arg1) (arg1)->sdp = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnCallSdpCreatedParam_sdp_get(void * jarg1) {
  void * jresult ;
  pj::OnCallSdpCreatedParam *arg1 = (pj::OnCallSdpCreatedParam *) 0 ;
  pj::SdpSession *result = 0 ;
  
  arg1 = (pj::OnCallSdpCreatedParam *)jarg1; 
  result = (pj::SdpSession *)& ((arg1)->sdp);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallSdpCreatedParam_remSdp_set(void * jarg1, void * jarg2) {
  pj::OnCallSdpCreatedParam *arg1 = (pj::OnCallSdpCreatedParam *) 0 ;
  pj::SdpSession *arg2 = (pj::SdpSession *) 0 ;
  
  arg1 = (pj::OnCallSdpCreatedParam *)jarg1; 
  arg2 = (pj::SdpSession *)jarg2; 
  if (arg1) (arg1)->remSdp = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnCallSdpCreatedParam_remSdp_get(void * jarg1) {
  void * jresult ;
  pj::OnCallSdpCreatedParam *arg1 = (pj::OnCallSdpCreatedParam *) 0 ;
  pj::SdpSession *result = 0 ;
  
  arg1 = (pj::OnCallSdpCreatedParam *)jarg1; 
  result = (pj::SdpSession *)& ((arg1)->remSdp);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnCallSdpCreatedParam() {
  void * jresult ;
  pj::OnCallSdpCreatedParam *result = 0 ;
  
  result = (pj::OnCallSdpCreatedParam *)new pj::OnCallSdpCreatedParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnCallSdpCreatedParam(void * jarg1) {
  pj::OnCallSdpCreatedParam *arg1 = (pj::OnCallSdpCreatedParam *) 0 ;
  
  arg1 = (pj::OnCallSdpCreatedParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnStreamPreCreateParam_streamIdx_set(void * jarg1, unsigned int jarg2) {
  pj::OnStreamPreCreateParam *arg1 = (pj::OnStreamPreCreateParam *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::OnStreamPreCreateParam *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->streamIdx = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OnStreamPreCreateParam_streamIdx_get(void * jarg1) {
  unsigned int jresult ;
  pj::OnStreamPreCreateParam *arg1 = (pj::OnStreamPreCreateParam *) 0 ;
  unsigned int result;
  
  arg1 = (pj::OnStreamPreCreateParam *)jarg1; 
  result = (unsigned int) ((arg1)->streamIdx);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnStreamPreCreateParam_streamInfo_set(void * jarg1, void * jarg2) {
  pj::OnStreamPreCreateParam *arg1 = (pj::OnStreamPreCreateParam *) 0 ;
  pj::StreamInfo *arg2 = (pj::StreamInfo *) 0 ;
  
  arg1 = (pj::OnStreamPreCreateParam *)jarg1; 
  arg2 = (pj::StreamInfo *)jarg2; 
  if (arg1) (arg1)->streamInfo = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnStreamPreCreateParam_streamInfo_get(void * jarg1) {
  void * jresult ;
  pj::OnStreamPreCreateParam *arg1 = (pj::OnStreamPreCreateParam *) 0 ;
  pj::StreamInfo *result = 0 ;
  
  arg1 = (pj::OnStreamPreCreateParam *)jarg1; 
  result = (pj::StreamInfo *)& ((arg1)->streamInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnStreamPreCreateParam() {
  void * jresult ;
  pj::OnStreamPreCreateParam *result = 0 ;
  
  result = (pj::OnStreamPreCreateParam *)new pj::OnStreamPreCreateParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnStreamPreCreateParam(void * jarg1) {
  pj::OnStreamPreCreateParam *arg1 = (pj::OnStreamPreCreateParam *) 0 ;
  
  arg1 = (pj::OnStreamPreCreateParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnStreamCreatedParam_stream_set(void * jarg1, void * jarg2) {
  pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) 0 ;
  pj::MediaStream arg2 = (pj::MediaStream) 0 ;
  
  arg1 = (pj::OnStreamCreatedParam *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->stream = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnStreamCreatedParam_stream_get(void * jarg1) {
  void * jresult ;
  pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) 0 ;
  pj::MediaStream result;
  
  arg1 = (pj::OnStreamCreatedParam *)jarg1; 
  result = (pj::MediaStream) ((arg1)->stream);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnStreamCreatedParam_streamIdx_set(void * jarg1, unsigned int jarg2) {
  pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::OnStreamCreatedParam *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->streamIdx = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OnStreamCreatedParam_streamIdx_get(void * jarg1) {
  unsigned int jresult ;
  pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) 0 ;
  unsigned int result;
  
  arg1 = (pj::OnStreamCreatedParam *)jarg1; 
  result = (unsigned int) ((arg1)->streamIdx);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnStreamCreatedParam_destroyPort_set(void * jarg1, unsigned int jarg2) {
  pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::OnStreamCreatedParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->destroyPort = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OnStreamCreatedParam_destroyPort_get(void * jarg1) {
  unsigned int jresult ;
  pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) 0 ;
  bool result;
  
  arg1 = (pj::OnStreamCreatedParam *)jarg1; 
  result = (bool) ((arg1)->destroyPort);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnStreamCreatedParam_pPort_set(void * jarg1, void * jarg2) {
  pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) 0 ;
  pj::MediaPort arg2 = (pj::MediaPort) 0 ;
  
  arg1 = (pj::OnStreamCreatedParam *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->pPort = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnStreamCreatedParam_pPort_get(void * jarg1) {
  void * jresult ;
  pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) 0 ;
  pj::MediaPort result;
  
  arg1 = (pj::OnStreamCreatedParam *)jarg1; 
  result = (pj::MediaPort) ((arg1)->pPort);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnStreamCreatedParam() {
  void * jresult ;
  pj::OnStreamCreatedParam *result = 0 ;
  
  result = (pj::OnStreamCreatedParam *)new pj::OnStreamCreatedParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnStreamCreatedParam(void * jarg1) {
  pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) 0 ;
  
  arg1 = (pj::OnStreamCreatedParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnStreamDestroyedParam_stream_set(void * jarg1, void * jarg2) {
  pj::OnStreamDestroyedParam *arg1 = (pj::OnStreamDestroyedParam *) 0 ;
  pj::MediaStream arg2 = (pj::MediaStream) 0 ;
  
  arg1 = (pj::OnStreamDestroyedParam *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->stream = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnStreamDestroyedParam_stream_get(void * jarg1) {
  void * jresult ;
  pj::OnStreamDestroyedParam *arg1 = (pj::OnStreamDestroyedParam *) 0 ;
  pj::MediaStream result;
  
  arg1 = (pj::OnStreamDestroyedParam *)jarg1; 
  result = (pj::MediaStream) ((arg1)->stream);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnStreamDestroyedParam_streamIdx_set(void * jarg1, unsigned int jarg2) {
  pj::OnStreamDestroyedParam *arg1 = (pj::OnStreamDestroyedParam *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::OnStreamDestroyedParam *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->streamIdx = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OnStreamDestroyedParam_streamIdx_get(void * jarg1) {
  unsigned int jresult ;
  pj::OnStreamDestroyedParam *arg1 = (pj::OnStreamDestroyedParam *) 0 ;
  unsigned int result;
  
  arg1 = (pj::OnStreamDestroyedParam *)jarg1; 
  result = (unsigned int) ((arg1)->streamIdx);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnStreamDestroyedParam() {
  void * jresult ;
  pj::OnStreamDestroyedParam *result = 0 ;
  
  result = (pj::OnStreamDestroyedParam *)new pj::OnStreamDestroyedParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnStreamDestroyedParam(void * jarg1) {
  pj::OnStreamDestroyedParam *arg1 = (pj::OnStreamDestroyedParam *) 0 ;
  
  arg1 = (pj::OnStreamDestroyedParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnDtmfDigitParam_method_set(void * jarg1, int jarg2) {
  pj::OnDtmfDigitParam *arg1 = (pj::OnDtmfDigitParam *) 0 ;
  pjsua_dtmf_method arg2 ;
  
  arg1 = (pj::OnDtmfDigitParam *)jarg1; 
  arg2 = (pjsua_dtmf_method)jarg2; 
  if (arg1) (arg1)->method = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OnDtmfDigitParam_method_get(void * jarg1) {
  int jresult ;
  pj::OnDtmfDigitParam *arg1 = (pj::OnDtmfDigitParam *) 0 ;
  pjsua_dtmf_method result;
  
  arg1 = (pj::OnDtmfDigitParam *)jarg1; 
  result = (pjsua_dtmf_method) ((arg1)->method);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnDtmfDigitParam_digit_set(void * jarg1, const char * jarg2) {
  pj::OnDtmfDigitParam *arg1 = (pj::OnDtmfDigitParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnDtmfDigitParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->digit = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OnDtmfDigitParam_digit_get(void * jarg1) {
  const char * jresult ;
  pj::OnDtmfDigitParam *arg1 = (pj::OnDtmfDigitParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnDtmfDigitParam *)jarg1; 
  result = (pj::string *) & ((arg1)->digit);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnDtmfDigitParam_duration_set(void * jarg1, unsigned int jarg2) {
  pj::OnDtmfDigitParam *arg1 = (pj::OnDtmfDigitParam *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::OnDtmfDigitParam *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->duration = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OnDtmfDigitParam_duration_get(void * jarg1) {
  unsigned int jresult ;
  pj::OnDtmfDigitParam *arg1 = (pj::OnDtmfDigitParam *) 0 ;
  unsigned int result;
  
  arg1 = (pj::OnDtmfDigitParam *)jarg1; 
  result = (unsigned int) ((arg1)->duration);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnDtmfDigitParam() {
  void * jresult ;
  pj::OnDtmfDigitParam *result = 0 ;
  
  result = (pj::OnDtmfDigitParam *)new pj::OnDtmfDigitParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnDtmfDigitParam(void * jarg1) {
  pj::OnDtmfDigitParam *arg1 = (pj::OnDtmfDigitParam *) 0 ;
  
  arg1 = (pj::OnDtmfDigitParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnDtmfEventParam_method_set(void * jarg1, int jarg2) {
  pj::OnDtmfEventParam *arg1 = (pj::OnDtmfEventParam *) 0 ;
  pjsua_dtmf_method arg2 ;
  
  arg1 = (pj::OnDtmfEventParam *)jarg1; 
  arg2 = (pjsua_dtmf_method)jarg2; 
  if (arg1) (arg1)->method = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OnDtmfEventParam_method_get(void * jarg1) {
  int jresult ;
  pj::OnDtmfEventParam *arg1 = (pj::OnDtmfEventParam *) 0 ;
  pjsua_dtmf_method result;
  
  arg1 = (pj::OnDtmfEventParam *)jarg1; 
  result = (pjsua_dtmf_method) ((arg1)->method);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnDtmfEventParam_timestamp_set(void * jarg1, unsigned int jarg2) {
  pj::OnDtmfEventParam *arg1 = (pj::OnDtmfEventParam *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::OnDtmfEventParam *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->timestamp = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OnDtmfEventParam_timestamp_get(void * jarg1) {
  unsigned int jresult ;
  pj::OnDtmfEventParam *arg1 = (pj::OnDtmfEventParam *) 0 ;
  unsigned int result;
  
  arg1 = (pj::OnDtmfEventParam *)jarg1; 
  result = (unsigned int) ((arg1)->timestamp);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnDtmfEventParam_digit_set(void * jarg1, const char * jarg2) {
  pj::OnDtmfEventParam *arg1 = (pj::OnDtmfEventParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnDtmfEventParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->digit = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OnDtmfEventParam_digit_get(void * jarg1) {
  const char * jresult ;
  pj::OnDtmfEventParam *arg1 = (pj::OnDtmfEventParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnDtmfEventParam *)jarg1; 
  result = (pj::string *) & ((arg1)->digit);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnDtmfEventParam_duration_set(void * jarg1, unsigned int jarg2) {
  pj::OnDtmfEventParam *arg1 = (pj::OnDtmfEventParam *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::OnDtmfEventParam *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->duration = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OnDtmfEventParam_duration_get(void * jarg1) {
  unsigned int jresult ;
  pj::OnDtmfEventParam *arg1 = (pj::OnDtmfEventParam *) 0 ;
  unsigned int result;
  
  arg1 = (pj::OnDtmfEventParam *)jarg1; 
  result = (unsigned int) ((arg1)->duration);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnDtmfEventParam_flags_set(void * jarg1, unsigned int jarg2) {
  pj::OnDtmfEventParam *arg1 = (pj::OnDtmfEventParam *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::OnDtmfEventParam *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OnDtmfEventParam_flags_get(void * jarg1) {
  unsigned int jresult ;
  pj::OnDtmfEventParam *arg1 = (pj::OnDtmfEventParam *) 0 ;
  unsigned int result;
  
  arg1 = (pj::OnDtmfEventParam *)jarg1; 
  result = (unsigned int) ((arg1)->flags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnDtmfEventParam() {
  void * jresult ;
  pj::OnDtmfEventParam *result = 0 ;
  
  result = (pj::OnDtmfEventParam *)new pj::OnDtmfEventParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnDtmfEventParam(void * jarg1) {
  pj::OnDtmfEventParam *arg1 = (pj::OnDtmfEventParam *) 0 ;
  
  arg1 = (pj::OnDtmfEventParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallTransferRequestParam_dstUri_set(void * jarg1, const char * jarg2) {
  pj::OnCallTransferRequestParam *arg1 = (pj::OnCallTransferRequestParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnCallTransferRequestParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->dstUri = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OnCallTransferRequestParam_dstUri_get(void * jarg1) {
  const char * jresult ;
  pj::OnCallTransferRequestParam *arg1 = (pj::OnCallTransferRequestParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnCallTransferRequestParam *)jarg1; 
  result = (pj::string *) & ((arg1)->dstUri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallTransferRequestParam_statusCode_set(void * jarg1, int jarg2) {
  pj::OnCallTransferRequestParam *arg1 = (pj::OnCallTransferRequestParam *) 0 ;
  pjsip_status_code arg2 ;
  
  arg1 = (pj::OnCallTransferRequestParam *)jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->statusCode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OnCallTransferRequestParam_statusCode_get(void * jarg1) {
  int jresult ;
  pj::OnCallTransferRequestParam *arg1 = (pj::OnCallTransferRequestParam *) 0 ;
  pjsip_status_code result;
  
  arg1 = (pj::OnCallTransferRequestParam *)jarg1; 
  result = (pjsip_status_code) ((arg1)->statusCode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallTransferRequestParam_opt_set(void * jarg1, void * jarg2) {
  pj::OnCallTransferRequestParam *arg1 = (pj::OnCallTransferRequestParam *) 0 ;
  pj::CallSetting *arg2 = (pj::CallSetting *) 0 ;
  
  arg1 = (pj::OnCallTransferRequestParam *)jarg1; 
  arg2 = (pj::CallSetting *)jarg2; 
  if (arg1) (arg1)->opt = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnCallTransferRequestParam_opt_get(void * jarg1) {
  void * jresult ;
  pj::OnCallTransferRequestParam *arg1 = (pj::OnCallTransferRequestParam *) 0 ;
  pj::CallSetting *result = 0 ;
  
  arg1 = (pj::OnCallTransferRequestParam *)jarg1; 
  result = (pj::CallSetting *)& ((arg1)->opt);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallTransferRequestParam_newCall_set(void * jarg1, void * jarg2) {
  pj::OnCallTransferRequestParam *arg1 = (pj::OnCallTransferRequestParam *) 0 ;
  pj::Call *arg2 = (pj::Call *) 0 ;
  
  arg1 = (pj::OnCallTransferRequestParam *)jarg1; 
  arg2 = (pj::Call *)jarg2; 
  if (arg1) (arg1)->newCall = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnCallTransferRequestParam_newCall_get(void * jarg1) {
  void * jresult ;
  pj::OnCallTransferRequestParam *arg1 = (pj::OnCallTransferRequestParam *) 0 ;
  pj::Call *result = 0 ;
  
  arg1 = (pj::OnCallTransferRequestParam *)jarg1; 
  result = (pj::Call *) ((arg1)->newCall);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnCallTransferRequestParam() {
  void * jresult ;
  pj::OnCallTransferRequestParam *result = 0 ;
  
  result = (pj::OnCallTransferRequestParam *)new pj::OnCallTransferRequestParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnCallTransferRequestParam(void * jarg1) {
  pj::OnCallTransferRequestParam *arg1 = (pj::OnCallTransferRequestParam *) 0 ;
  
  arg1 = (pj::OnCallTransferRequestParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallTransferStatusParam_statusCode_set(void * jarg1, int jarg2) {
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  pjsip_status_code arg2 ;
  
  arg1 = (pj::OnCallTransferStatusParam *)jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->statusCode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OnCallTransferStatusParam_statusCode_get(void * jarg1) {
  int jresult ;
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  pjsip_status_code result;
  
  arg1 = (pj::OnCallTransferStatusParam *)jarg1; 
  result = (pjsip_status_code) ((arg1)->statusCode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallTransferStatusParam_reason_set(void * jarg1, const char * jarg2) {
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnCallTransferStatusParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->reason = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OnCallTransferStatusParam_reason_get(void * jarg1) {
  const char * jresult ;
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnCallTransferStatusParam *)jarg1; 
  result = (pj::string *) & ((arg1)->reason);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallTransferStatusParam_finalNotify_set(void * jarg1, unsigned int jarg2) {
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::OnCallTransferStatusParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->finalNotify = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OnCallTransferStatusParam_finalNotify_get(void * jarg1) {
  unsigned int jresult ;
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  bool result;
  
  arg1 = (pj::OnCallTransferStatusParam *)jarg1; 
  result = (bool) ((arg1)->finalNotify);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallTransferStatusParam_cont_set(void * jarg1, unsigned int jarg2) {
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::OnCallTransferStatusParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->cont = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OnCallTransferStatusParam_cont_get(void * jarg1) {
  unsigned int jresult ;
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  bool result;
  
  arg1 = (pj::OnCallTransferStatusParam *)jarg1; 
  result = (bool) ((arg1)->cont);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnCallTransferStatusParam() {
  void * jresult ;
  pj::OnCallTransferStatusParam *result = 0 ;
  
  result = (pj::OnCallTransferStatusParam *)new pj::OnCallTransferStatusParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnCallTransferStatusParam(void * jarg1) {
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  
  arg1 = (pj::OnCallTransferStatusParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallReplaceRequestParam_rdata_set(void * jarg1, void * jarg2) {
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  arg1 = (pj::OnCallReplaceRequestParam *)jarg1; 
  arg2 = (pj::SipRxData *)jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnCallReplaceRequestParam_rdata_get(void * jarg1) {
  void * jresult ;
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  arg1 = (pj::OnCallReplaceRequestParam *)jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallReplaceRequestParam_statusCode_set(void * jarg1, int jarg2) {
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pjsip_status_code arg2 ;
  
  arg1 = (pj::OnCallReplaceRequestParam *)jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->statusCode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OnCallReplaceRequestParam_statusCode_get(void * jarg1) {
  int jresult ;
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pjsip_status_code result;
  
  arg1 = (pj::OnCallReplaceRequestParam *)jarg1; 
  result = (pjsip_status_code) ((arg1)->statusCode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallReplaceRequestParam_reason_set(void * jarg1, const char * jarg2) {
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnCallReplaceRequestParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->reason = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OnCallReplaceRequestParam_reason_get(void * jarg1) {
  const char * jresult ;
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnCallReplaceRequestParam *)jarg1; 
  result = (pj::string *) & ((arg1)->reason);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallReplaceRequestParam_opt_set(void * jarg1, void * jarg2) {
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pj::CallSetting *arg2 = (pj::CallSetting *) 0 ;
  
  arg1 = (pj::OnCallReplaceRequestParam *)jarg1; 
  arg2 = (pj::CallSetting *)jarg2; 
  if (arg1) (arg1)->opt = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnCallReplaceRequestParam_opt_get(void * jarg1) {
  void * jresult ;
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pj::CallSetting *result = 0 ;
  
  arg1 = (pj::OnCallReplaceRequestParam *)jarg1; 
  result = (pj::CallSetting *)& ((arg1)->opt);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallReplaceRequestParam_newCall_set(void * jarg1, void * jarg2) {
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pj::Call *arg2 = (pj::Call *) 0 ;
  
  arg1 = (pj::OnCallReplaceRequestParam *)jarg1; 
  arg2 = (pj::Call *)jarg2; 
  if (arg1) (arg1)->newCall = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnCallReplaceRequestParam_newCall_get(void * jarg1) {
  void * jresult ;
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pj::Call *result = 0 ;
  
  arg1 = (pj::OnCallReplaceRequestParam *)jarg1; 
  result = (pj::Call *) ((arg1)->newCall);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnCallReplaceRequestParam() {
  void * jresult ;
  pj::OnCallReplaceRequestParam *result = 0 ;
  
  result = (pj::OnCallReplaceRequestParam *)new pj::OnCallReplaceRequestParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnCallReplaceRequestParam(void * jarg1) {
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  
  arg1 = (pj::OnCallReplaceRequestParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallReplacedParam_newCallId_set(void * jarg1, int jarg2) {
  pj::OnCallReplacedParam *arg1 = (pj::OnCallReplacedParam *) 0 ;
  pjsua_call_id arg2 ;
  
  arg1 = (pj::OnCallReplacedParam *)jarg1; 
  arg2 = (pjsua_call_id)jarg2; 
  if (arg1) (arg1)->newCallId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OnCallReplacedParam_newCallId_get(void * jarg1) {
  int jresult ;
  pj::OnCallReplacedParam *arg1 = (pj::OnCallReplacedParam *) 0 ;
  pjsua_call_id result;
  
  arg1 = (pj::OnCallReplacedParam *)jarg1; 
  result = (pjsua_call_id) ((arg1)->newCallId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallReplacedParam_newCall_set(void * jarg1, void * jarg2) {
  pj::OnCallReplacedParam *arg1 = (pj::OnCallReplacedParam *) 0 ;
  pj::Call *arg2 = (pj::Call *) 0 ;
  
  arg1 = (pj::OnCallReplacedParam *)jarg1; 
  arg2 = (pj::Call *)jarg2; 
  if (arg1) (arg1)->newCall = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnCallReplacedParam_newCall_get(void * jarg1) {
  void * jresult ;
  pj::OnCallReplacedParam *arg1 = (pj::OnCallReplacedParam *) 0 ;
  pj::Call *result = 0 ;
  
  arg1 = (pj::OnCallReplacedParam *)jarg1; 
  result = (pj::Call *) ((arg1)->newCall);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnCallReplacedParam() {
  void * jresult ;
  pj::OnCallReplacedParam *result = 0 ;
  
  result = (pj::OnCallReplacedParam *)new pj::OnCallReplacedParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnCallReplacedParam(void * jarg1) {
  pj::OnCallReplacedParam *arg1 = (pj::OnCallReplacedParam *) 0 ;
  
  arg1 = (pj::OnCallReplacedParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallRxOfferParam_offer_set(void * jarg1, void * jarg2) {
  pj::OnCallRxOfferParam *arg1 = (pj::OnCallRxOfferParam *) 0 ;
  pj::SdpSession *arg2 = (pj::SdpSession *) 0 ;
  
  arg1 = (pj::OnCallRxOfferParam *)jarg1; 
  arg2 = (pj::SdpSession *)jarg2; 
  if (arg1) (arg1)->offer = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnCallRxOfferParam_offer_get(void * jarg1) {
  void * jresult ;
  pj::OnCallRxOfferParam *arg1 = (pj::OnCallRxOfferParam *) 0 ;
  pj::SdpSession *result = 0 ;
  
  arg1 = (pj::OnCallRxOfferParam *)jarg1; 
  result = (pj::SdpSession *)& ((arg1)->offer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallRxOfferParam_statusCode_set(void * jarg1, int jarg2) {
  pj::OnCallRxOfferParam *arg1 = (pj::OnCallRxOfferParam *) 0 ;
  pjsip_status_code arg2 ;
  
  arg1 = (pj::OnCallRxOfferParam *)jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->statusCode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OnCallRxOfferParam_statusCode_get(void * jarg1) {
  int jresult ;
  pj::OnCallRxOfferParam *arg1 = (pj::OnCallRxOfferParam *) 0 ;
  pjsip_status_code result;
  
  arg1 = (pj::OnCallRxOfferParam *)jarg1; 
  result = (pjsip_status_code) ((arg1)->statusCode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallRxOfferParam_opt_set(void * jarg1, void * jarg2) {
  pj::OnCallRxOfferParam *arg1 = (pj::OnCallRxOfferParam *) 0 ;
  pj::CallSetting *arg2 = (pj::CallSetting *) 0 ;
  
  arg1 = (pj::OnCallRxOfferParam *)jarg1; 
  arg2 = (pj::CallSetting *)jarg2; 
  if (arg1) (arg1)->opt = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnCallRxOfferParam_opt_get(void * jarg1) {
  void * jresult ;
  pj::OnCallRxOfferParam *arg1 = (pj::OnCallRxOfferParam *) 0 ;
  pj::CallSetting *result = 0 ;
  
  arg1 = (pj::OnCallRxOfferParam *)jarg1; 
  result = (pj::CallSetting *)& ((arg1)->opt);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnCallRxOfferParam() {
  void * jresult ;
  pj::OnCallRxOfferParam *result = 0 ;
  
  result = (pj::OnCallRxOfferParam *)new pj::OnCallRxOfferParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnCallRxOfferParam(void * jarg1) {
  pj::OnCallRxOfferParam *arg1 = (pj::OnCallRxOfferParam *) 0 ;
  
  arg1 = (pj::OnCallRxOfferParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallRxReinviteParam_offer_set(void * jarg1, void * jarg2) {
  pj::OnCallRxReinviteParam *arg1 = (pj::OnCallRxReinviteParam *) 0 ;
  pj::SdpSession *arg2 = (pj::SdpSession *) 0 ;
  
  arg1 = (pj::OnCallRxReinviteParam *)jarg1; 
  arg2 = (pj::SdpSession *)jarg2; 
  if (arg1) (arg1)->offer = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnCallRxReinviteParam_offer_get(void * jarg1) {
  void * jresult ;
  pj::OnCallRxReinviteParam *arg1 = (pj::OnCallRxReinviteParam *) 0 ;
  pj::SdpSession *result = 0 ;
  
  arg1 = (pj::OnCallRxReinviteParam *)jarg1; 
  result = (pj::SdpSession *)& ((arg1)->offer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallRxReinviteParam_rdata_set(void * jarg1, void * jarg2) {
  pj::OnCallRxReinviteParam *arg1 = (pj::OnCallRxReinviteParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  arg1 = (pj::OnCallRxReinviteParam *)jarg1; 
  arg2 = (pj::SipRxData *)jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnCallRxReinviteParam_rdata_get(void * jarg1) {
  void * jresult ;
  pj::OnCallRxReinviteParam *arg1 = (pj::OnCallRxReinviteParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  arg1 = (pj::OnCallRxReinviteParam *)jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallRxReinviteParam_isAsync_set(void * jarg1, unsigned int jarg2) {
  pj::OnCallRxReinviteParam *arg1 = (pj::OnCallRxReinviteParam *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::OnCallRxReinviteParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isAsync = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OnCallRxReinviteParam_isAsync_get(void * jarg1) {
  unsigned int jresult ;
  pj::OnCallRxReinviteParam *arg1 = (pj::OnCallRxReinviteParam *) 0 ;
  bool result;
  
  arg1 = (pj::OnCallRxReinviteParam *)jarg1; 
  result = (bool) ((arg1)->isAsync);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallRxReinviteParam_statusCode_set(void * jarg1, int jarg2) {
  pj::OnCallRxReinviteParam *arg1 = (pj::OnCallRxReinviteParam *) 0 ;
  pjsip_status_code arg2 ;
  
  arg1 = (pj::OnCallRxReinviteParam *)jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->statusCode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OnCallRxReinviteParam_statusCode_get(void * jarg1) {
  int jresult ;
  pj::OnCallRxReinviteParam *arg1 = (pj::OnCallRxReinviteParam *) 0 ;
  pjsip_status_code result;
  
  arg1 = (pj::OnCallRxReinviteParam *)jarg1; 
  result = (pjsip_status_code) ((arg1)->statusCode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallRxReinviteParam_opt_set(void * jarg1, void * jarg2) {
  pj::OnCallRxReinviteParam *arg1 = (pj::OnCallRxReinviteParam *) 0 ;
  pj::CallSetting *arg2 = (pj::CallSetting *) 0 ;
  
  arg1 = (pj::OnCallRxReinviteParam *)jarg1; 
  arg2 = (pj::CallSetting *)jarg2; 
  if (arg1) (arg1)->opt = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnCallRxReinviteParam_opt_get(void * jarg1) {
  void * jresult ;
  pj::OnCallRxReinviteParam *arg1 = (pj::OnCallRxReinviteParam *) 0 ;
  pj::CallSetting *result = 0 ;
  
  arg1 = (pj::OnCallRxReinviteParam *)jarg1; 
  result = (pj::CallSetting *)& ((arg1)->opt);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnCallRxReinviteParam() {
  void * jresult ;
  pj::OnCallRxReinviteParam *result = 0 ;
  
  result = (pj::OnCallRxReinviteParam *)new pj::OnCallRxReinviteParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnCallRxReinviteParam(void * jarg1) {
  pj::OnCallRxReinviteParam *arg1 = (pj::OnCallRxReinviteParam *) 0 ;
  
  arg1 = (pj::OnCallRxReinviteParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallTxOfferParam_opt_set(void * jarg1, void * jarg2) {
  pj::OnCallTxOfferParam *arg1 = (pj::OnCallTxOfferParam *) 0 ;
  pj::CallSetting *arg2 = (pj::CallSetting *) 0 ;
  
  arg1 = (pj::OnCallTxOfferParam *)jarg1; 
  arg2 = (pj::CallSetting *)jarg2; 
  if (arg1) (arg1)->opt = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnCallTxOfferParam_opt_get(void * jarg1) {
  void * jresult ;
  pj::OnCallTxOfferParam *arg1 = (pj::OnCallTxOfferParam *) 0 ;
  pj::CallSetting *result = 0 ;
  
  arg1 = (pj::OnCallTxOfferParam *)jarg1; 
  result = (pj::CallSetting *)& ((arg1)->opt);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnCallTxOfferParam() {
  void * jresult ;
  pj::OnCallTxOfferParam *result = 0 ;
  
  result = (pj::OnCallTxOfferParam *)new pj::OnCallTxOfferParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnCallTxOfferParam(void * jarg1) {
  pj::OnCallTxOfferParam *arg1 = (pj::OnCallTxOfferParam *) 0 ;
  
  arg1 = (pj::OnCallTxOfferParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallRedirectedParam_targetUri_set(void * jarg1, const char * jarg2) {
  pj::OnCallRedirectedParam *arg1 = (pj::OnCallRedirectedParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnCallRedirectedParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->targetUri = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OnCallRedirectedParam_targetUri_get(void * jarg1) {
  const char * jresult ;
  pj::OnCallRedirectedParam *arg1 = (pj::OnCallRedirectedParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnCallRedirectedParam *)jarg1; 
  result = (pj::string *) & ((arg1)->targetUri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallRedirectedParam_e_set(void * jarg1, void * jarg2) {
  pj::OnCallRedirectedParam *arg1 = (pj::OnCallRedirectedParam *) 0 ;
  pj::SipEvent *arg2 = (pj::SipEvent *) 0 ;
  
  arg1 = (pj::OnCallRedirectedParam *)jarg1; 
  arg2 = (pj::SipEvent *)jarg2; 
  if (arg1) (arg1)->e = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnCallRedirectedParam_e_get(void * jarg1) {
  void * jresult ;
  pj::OnCallRedirectedParam *arg1 = (pj::OnCallRedirectedParam *) 0 ;
  pj::SipEvent *result = 0 ;
  
  arg1 = (pj::OnCallRedirectedParam *)jarg1; 
  result = (pj::SipEvent *)& ((arg1)->e);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnCallRedirectedParam() {
  void * jresult ;
  pj::OnCallRedirectedParam *result = 0 ;
  
  result = (pj::OnCallRedirectedParam *)new pj::OnCallRedirectedParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnCallRedirectedParam(void * jarg1) {
  pj::OnCallRedirectedParam *arg1 = (pj::OnCallRedirectedParam *) 0 ;
  
  arg1 = (pj::OnCallRedirectedParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallMediaEventParam_medIdx_set(void * jarg1, unsigned int jarg2) {
  pj::OnCallMediaEventParam *arg1 = (pj::OnCallMediaEventParam *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::OnCallMediaEventParam *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->medIdx = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OnCallMediaEventParam_medIdx_get(void * jarg1) {
  unsigned int jresult ;
  pj::OnCallMediaEventParam *arg1 = (pj::OnCallMediaEventParam *) 0 ;
  unsigned int result;
  
  arg1 = (pj::OnCallMediaEventParam *)jarg1; 
  result = (unsigned int) ((arg1)->medIdx);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallMediaEventParam_ev_set(void * jarg1, void * jarg2) {
  pj::OnCallMediaEventParam *arg1 = (pj::OnCallMediaEventParam *) 0 ;
  pj::MediaEvent *arg2 = (pj::MediaEvent *) 0 ;
  
  arg1 = (pj::OnCallMediaEventParam *)jarg1; 
  arg2 = (pj::MediaEvent *)jarg2; 
  if (arg1) (arg1)->ev = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnCallMediaEventParam_ev_get(void * jarg1) {
  void * jresult ;
  pj::OnCallMediaEventParam *arg1 = (pj::OnCallMediaEventParam *) 0 ;
  pj::MediaEvent *result = 0 ;
  
  arg1 = (pj::OnCallMediaEventParam *)jarg1; 
  result = (pj::MediaEvent *)& ((arg1)->ev);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnCallMediaEventParam() {
  void * jresult ;
  pj::OnCallMediaEventParam *result = 0 ;
  
  result = (pj::OnCallMediaEventParam *)new pj::OnCallMediaEventParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnCallMediaEventParam(void * jarg1) {
  pj::OnCallMediaEventParam *arg1 = (pj::OnCallMediaEventParam *) 0 ;
  
  arg1 = (pj::OnCallMediaEventParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallMediaTransportStateParam_medIdx_set(void * jarg1, unsigned int jarg2) {
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::OnCallMediaTransportStateParam *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->medIdx = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OnCallMediaTransportStateParam_medIdx_get(void * jarg1) {
  unsigned int jresult ;
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  unsigned int result;
  
  arg1 = (pj::OnCallMediaTransportStateParam *)jarg1; 
  result = (unsigned int) ((arg1)->medIdx);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallMediaTransportStateParam_state_set(void * jarg1, int jarg2) {
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  pjsua_med_tp_st arg2 ;
  
  arg1 = (pj::OnCallMediaTransportStateParam *)jarg1; 
  arg2 = (pjsua_med_tp_st)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OnCallMediaTransportStateParam_state_get(void * jarg1) {
  int jresult ;
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  pjsua_med_tp_st result;
  
  arg1 = (pj::OnCallMediaTransportStateParam *)jarg1; 
  result = (pjsua_med_tp_st) ((arg1)->state);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallMediaTransportStateParam_status_set(void * jarg1, int jarg2) {
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  pj_status_t arg2 ;
  
  arg1 = (pj::OnCallMediaTransportStateParam *)jarg1; 
  arg2 = (pj_status_t)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OnCallMediaTransportStateParam_status_get(void * jarg1) {
  int jresult ;
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  pj_status_t result;
  
  arg1 = (pj::OnCallMediaTransportStateParam *)jarg1; 
  result = (pj_status_t) ((arg1)->status);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCallMediaTransportStateParam_sipErrorCode_set(void * jarg1, int jarg2) {
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  int arg2 ;
  
  arg1 = (pj::OnCallMediaTransportStateParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->sipErrorCode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OnCallMediaTransportStateParam_sipErrorCode_get(void * jarg1) {
  int jresult ;
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  int result;
  
  arg1 = (pj::OnCallMediaTransportStateParam *)jarg1; 
  result = (int) ((arg1)->sipErrorCode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnCallMediaTransportStateParam() {
  void * jresult ;
  pj::OnCallMediaTransportStateParam *result = 0 ;
  
  result = (pj::OnCallMediaTransportStateParam *)new pj::OnCallMediaTransportStateParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnCallMediaTransportStateParam(void * jarg1) {
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  
  arg1 = (pj::OnCallMediaTransportStateParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCreateMediaTransportParam_mediaIdx_set(void * jarg1, unsigned int jarg2) {
  pj::OnCreateMediaTransportParam *arg1 = (pj::OnCreateMediaTransportParam *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::OnCreateMediaTransportParam *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->mediaIdx = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OnCreateMediaTransportParam_mediaIdx_get(void * jarg1) {
  unsigned int jresult ;
  pj::OnCreateMediaTransportParam *arg1 = (pj::OnCreateMediaTransportParam *) 0 ;
  unsigned int result;
  
  arg1 = (pj::OnCreateMediaTransportParam *)jarg1; 
  result = (unsigned int) ((arg1)->mediaIdx);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCreateMediaTransportParam_mediaTp_set(void * jarg1, void * jarg2) {
  pj::OnCreateMediaTransportParam *arg1 = (pj::OnCreateMediaTransportParam *) 0 ;
  pj::MediaTransport arg2 = (pj::MediaTransport) 0 ;
  
  arg1 = (pj::OnCreateMediaTransportParam *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->mediaTp = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnCreateMediaTransportParam_mediaTp_get(void * jarg1) {
  void * jresult ;
  pj::OnCreateMediaTransportParam *arg1 = (pj::OnCreateMediaTransportParam *) 0 ;
  pj::MediaTransport result;
  
  arg1 = (pj::OnCreateMediaTransportParam *)jarg1; 
  result = (pj::MediaTransport) ((arg1)->mediaTp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCreateMediaTransportParam_flags_set(void * jarg1, unsigned int jarg2) {
  pj::OnCreateMediaTransportParam *arg1 = (pj::OnCreateMediaTransportParam *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::OnCreateMediaTransportParam *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OnCreateMediaTransportParam_flags_get(void * jarg1) {
  unsigned int jresult ;
  pj::OnCreateMediaTransportParam *arg1 = (pj::OnCreateMediaTransportParam *) 0 ;
  unsigned int result;
  
  arg1 = (pj::OnCreateMediaTransportParam *)jarg1; 
  result = (unsigned int) ((arg1)->flags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnCreateMediaTransportParam() {
  void * jresult ;
  pj::OnCreateMediaTransportParam *result = 0 ;
  
  result = (pj::OnCreateMediaTransportParam *)new pj::OnCreateMediaTransportParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnCreateMediaTransportParam(void * jarg1) {
  pj::OnCreateMediaTransportParam *arg1 = (pj::OnCreateMediaTransportParam *) 0 ;
  
  arg1 = (pj::OnCreateMediaTransportParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCreateMediaTransportSrtpParam_mediaIdx_set(void * jarg1, unsigned int jarg2) {
  pj::OnCreateMediaTransportSrtpParam *arg1 = (pj::OnCreateMediaTransportSrtpParam *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::OnCreateMediaTransportSrtpParam *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->mediaIdx = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OnCreateMediaTransportSrtpParam_mediaIdx_get(void * jarg1) {
  unsigned int jresult ;
  pj::OnCreateMediaTransportSrtpParam *arg1 = (pj::OnCreateMediaTransportSrtpParam *) 0 ;
  unsigned int result;
  
  arg1 = (pj::OnCreateMediaTransportSrtpParam *)jarg1; 
  result = (unsigned int) ((arg1)->mediaIdx);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCreateMediaTransportSrtpParam_srtpUse_set(void * jarg1, int jarg2) {
  pj::OnCreateMediaTransportSrtpParam *arg1 = (pj::OnCreateMediaTransportSrtpParam *) 0 ;
  pjmedia_srtp_use arg2 ;
  
  arg1 = (pj::OnCreateMediaTransportSrtpParam *)jarg1; 
  arg2 = (pjmedia_srtp_use)jarg2; 
  if (arg1) (arg1)->srtpUse = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OnCreateMediaTransportSrtpParam_srtpUse_get(void * jarg1) {
  int jresult ;
  pj::OnCreateMediaTransportSrtpParam *arg1 = (pj::OnCreateMediaTransportSrtpParam *) 0 ;
  pjmedia_srtp_use result;
  
  arg1 = (pj::OnCreateMediaTransportSrtpParam *)jarg1; 
  result = (pjmedia_srtp_use) ((arg1)->srtpUse);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCreateMediaTransportSrtpParam_cryptos_set(void * jarg1, void * jarg2) {
  pj::OnCreateMediaTransportSrtpParam *arg1 = (pj::OnCreateMediaTransportSrtpParam *) 0 ;
  pj::SrtpCryptoVector *arg2 = (pj::SrtpCryptoVector *) 0 ;
  
  arg1 = (pj::OnCreateMediaTransportSrtpParam *)jarg1; 
  arg2 = (pj::SrtpCryptoVector *)jarg2; 
  if (arg1) (arg1)->cryptos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnCreateMediaTransportSrtpParam_cryptos_get(void * jarg1) {
  void * jresult ;
  pj::OnCreateMediaTransportSrtpParam *arg1 = (pj::OnCreateMediaTransportSrtpParam *) 0 ;
  pj::SrtpCryptoVector *result = 0 ;
  
  arg1 = (pj::OnCreateMediaTransportSrtpParam *)jarg1; 
  result = (pj::SrtpCryptoVector *)& ((arg1)->cryptos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnCreateMediaTransportSrtpParam() {
  void * jresult ;
  pj::OnCreateMediaTransportSrtpParam *result = 0 ;
  
  result = (pj::OnCreateMediaTransportSrtpParam *)new pj::OnCreateMediaTransportSrtpParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnCreateMediaTransportSrtpParam(void * jarg1) {
  pj::OnCreateMediaTransportSrtpParam *arg1 = (pj::OnCreateMediaTransportSrtpParam *) 0 ;
  
  arg1 = (pj::OnCreateMediaTransportSrtpParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallOpParam_opt_set(void * jarg1, void * jarg2) {
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pj::CallSetting *arg2 = (pj::CallSetting *) 0 ;
  
  arg1 = (pj::CallOpParam *)jarg1; 
  arg2 = (pj::CallSetting *)jarg2; 
  if (arg1) (arg1)->opt = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CallOpParam_opt_get(void * jarg1) {
  void * jresult ;
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pj::CallSetting *result = 0 ;
  
  arg1 = (pj::CallOpParam *)jarg1; 
  result = (pj::CallSetting *)& ((arg1)->opt);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallOpParam_statusCode_set(void * jarg1, int jarg2) {
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pjsip_status_code arg2 ;
  
  arg1 = (pj::CallOpParam *)jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->statusCode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CallOpParam_statusCode_get(void * jarg1) {
  int jresult ;
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pjsip_status_code result;
  
  arg1 = (pj::CallOpParam *)jarg1; 
  result = (pjsip_status_code) ((arg1)->statusCode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallOpParam_reason_set(void * jarg1, const char * jarg2) {
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::CallOpParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->reason = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_CallOpParam_reason_get(void * jarg1) {
  const char * jresult ;
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::CallOpParam *)jarg1; 
  result = (pj::string *) & ((arg1)->reason);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallOpParam_options_set(void * jarg1, unsigned int jarg2) {
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CallOpParam *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->options = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CallOpParam_options_get(void * jarg1) {
  unsigned int jresult ;
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CallOpParam *)jarg1; 
  result = (unsigned int) ((arg1)->options);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallOpParam_txOption_set(void * jarg1, void * jarg2) {
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pj::SipTxOption *arg2 = (pj::SipTxOption *) 0 ;
  
  arg1 = (pj::CallOpParam *)jarg1; 
  arg2 = (pj::SipTxOption *)jarg2; 
  if (arg1) (arg1)->txOption = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CallOpParam_txOption_get(void * jarg1) {
  void * jresult ;
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pj::SipTxOption *result = 0 ;
  
  arg1 = (pj::CallOpParam *)jarg1; 
  result = (pj::SipTxOption *)& ((arg1)->txOption);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallOpParam_sdp_set(void * jarg1, void * jarg2) {
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pj::SdpSession *arg2 = (pj::SdpSession *) 0 ;
  
  arg1 = (pj::CallOpParam *)jarg1; 
  arg2 = (pj::SdpSession *)jarg2; 
  if (arg1) (arg1)->sdp = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CallOpParam_sdp_get(void * jarg1) {
  void * jresult ;
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pj::SdpSession *result = 0 ;
  
  arg1 = (pj::CallOpParam *)jarg1; 
  result = (pj::SdpSession *)& ((arg1)->sdp);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CallOpParam__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  pj::CallOpParam *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (pj::CallOpParam *)new pj::CallOpParam(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CallOpParam__SWIG_1() {
  void * jresult ;
  pj::CallOpParam *result = 0 ;
  
  result = (pj::CallOpParam *)new pj::CallOpParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CallOpParam(void * jarg1) {
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  
  arg1 = (pj::CallOpParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallSendRequestParam_method_set(void * jarg1, const char * jarg2) {
  pj::CallSendRequestParam *arg1 = (pj::CallSendRequestParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::CallSendRequestParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->method = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_CallSendRequestParam_method_get(void * jarg1) {
  const char * jresult ;
  pj::CallSendRequestParam *arg1 = (pj::CallSendRequestParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::CallSendRequestParam *)jarg1; 
  result = (pj::string *) & ((arg1)->method);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallSendRequestParam_txOption_set(void * jarg1, void * jarg2) {
  pj::CallSendRequestParam *arg1 = (pj::CallSendRequestParam *) 0 ;
  pj::SipTxOption *arg2 = (pj::SipTxOption *) 0 ;
  
  arg1 = (pj::CallSendRequestParam *)jarg1; 
  arg2 = (pj::SipTxOption *)jarg2; 
  if (arg1) (arg1)->txOption = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CallSendRequestParam_txOption_get(void * jarg1) {
  void * jresult ;
  pj::CallSendRequestParam *arg1 = (pj::CallSendRequestParam *) 0 ;
  pj::SipTxOption *result = 0 ;
  
  arg1 = (pj::CallSendRequestParam *)jarg1; 
  result = (pj::SipTxOption *)& ((arg1)->txOption);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CallSendRequestParam() {
  void * jresult ;
  pj::CallSendRequestParam *result = 0 ;
  
  result = (pj::CallSendRequestParam *)new pj::CallSendRequestParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CallSendRequestParam(void * jarg1) {
  pj::CallSendRequestParam *arg1 = (pj::CallSendRequestParam *) 0 ;
  
  arg1 = (pj::CallSendRequestParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallVidSetStreamParam_medIdx_set(void * jarg1, int jarg2) {
  pj::CallVidSetStreamParam *arg1 = (pj::CallVidSetStreamParam *) 0 ;
  int arg2 ;
  
  arg1 = (pj::CallVidSetStreamParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->medIdx = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CallVidSetStreamParam_medIdx_get(void * jarg1) {
  int jresult ;
  pj::CallVidSetStreamParam *arg1 = (pj::CallVidSetStreamParam *) 0 ;
  int result;
  
  arg1 = (pj::CallVidSetStreamParam *)jarg1; 
  result = (int) ((arg1)->medIdx);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallVidSetStreamParam_dir_set(void * jarg1, int jarg2) {
  pj::CallVidSetStreamParam *arg1 = (pj::CallVidSetStreamParam *) 0 ;
  pjmedia_dir arg2 ;
  
  arg1 = (pj::CallVidSetStreamParam *)jarg1; 
  arg2 = (pjmedia_dir)jarg2; 
  if (arg1) (arg1)->dir = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CallVidSetStreamParam_dir_get(void * jarg1) {
  int jresult ;
  pj::CallVidSetStreamParam *arg1 = (pj::CallVidSetStreamParam *) 0 ;
  pjmedia_dir result;
  
  arg1 = (pj::CallVidSetStreamParam *)jarg1; 
  result = (pjmedia_dir) ((arg1)->dir);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallVidSetStreamParam_capDev_set(void * jarg1, int jarg2) {
  pj::CallVidSetStreamParam *arg1 = (pj::CallVidSetStreamParam *) 0 ;
  pjmedia_vid_dev_index arg2 ;
  
  arg1 = (pj::CallVidSetStreamParam *)jarg1; 
  arg2 = (pjmedia_vid_dev_index)jarg2; 
  if (arg1) (arg1)->capDev = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CallVidSetStreamParam_capDev_get(void * jarg1) {
  int jresult ;
  pj::CallVidSetStreamParam *arg1 = (pj::CallVidSetStreamParam *) 0 ;
  pjmedia_vid_dev_index result;
  
  arg1 = (pj::CallVidSetStreamParam *)jarg1; 
  result = (pjmedia_vid_dev_index) ((arg1)->capDev);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CallVidSetStreamParam() {
  void * jresult ;
  pj::CallVidSetStreamParam *result = 0 ;
  
  result = (pj::CallVidSetStreamParam *)new pj::CallVidSetStreamParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CallVidSetStreamParam(void * jarg1) {
  pj::CallVidSetStreamParam *arg1 = (pj::CallVidSetStreamParam *) 0 ;
  
  arg1 = (pj::CallVidSetStreamParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallSendDtmfParam_method_set(void * jarg1, int jarg2) {
  pj::CallSendDtmfParam *arg1 = (pj::CallSendDtmfParam *) 0 ;
  pjsua_dtmf_method arg2 ;
  
  arg1 = (pj::CallSendDtmfParam *)jarg1; 
  arg2 = (pjsua_dtmf_method)jarg2; 
  if (arg1) (arg1)->method = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CallSendDtmfParam_method_get(void * jarg1) {
  int jresult ;
  pj::CallSendDtmfParam *arg1 = (pj::CallSendDtmfParam *) 0 ;
  pjsua_dtmf_method result;
  
  arg1 = (pj::CallSendDtmfParam *)jarg1; 
  result = (pjsua_dtmf_method) ((arg1)->method);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallSendDtmfParam_duration_set(void * jarg1, unsigned int jarg2) {
  pj::CallSendDtmfParam *arg1 = (pj::CallSendDtmfParam *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CallSendDtmfParam *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->duration = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CallSendDtmfParam_duration_get(void * jarg1) {
  unsigned int jresult ;
  pj::CallSendDtmfParam *arg1 = (pj::CallSendDtmfParam *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CallSendDtmfParam *)jarg1; 
  result = (unsigned int) ((arg1)->duration);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CallSendDtmfParam_digits_set(void * jarg1, const char * jarg2) {
  pj::CallSendDtmfParam *arg1 = (pj::CallSendDtmfParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::CallSendDtmfParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->digits = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_CallSendDtmfParam_digits_get(void * jarg1) {
  const char * jresult ;
  pj::CallSendDtmfParam *arg1 = (pj::CallSendDtmfParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::CallSendDtmfParam *)jarg1; 
  result = (pj::string *) & ((arg1)->digits);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CallSendDtmfParam() {
  void * jresult ;
  pj::CallSendDtmfParam *result = 0 ;
  
  result = (pj::CallSendDtmfParam *)new pj::CallSendDtmfParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CallSendDtmfParam(void * jarg1) {
  pj::CallSendDtmfParam *arg1 = (pj::CallSendDtmfParam *) 0 ;
  
  arg1 = (pj::CallSendDtmfParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Call__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  pj::Account *arg1 = 0 ;
  int arg2 ;
  pj::Call *result = 0 ;
  
  arg1 = (pj::Account *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::Account & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  result = (pj::Call *)new SwigDirector_Call(*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Call__SWIG_1(void * jarg1) {
  void * jresult ;
  pj::Account *arg1 = 0 ;
  pj::Call *result = 0 ;
  
  arg1 = (pj::Account *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::Account & is null", 0);
    return 0;
  } 
  result = (pj::Call *)new SwigDirector_Call(*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Call(void * jarg1) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Call_getInfo(void * jarg1) {
  void * jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::CallInfo result;
  
  arg1 = (pj::Call *)jarg1; 
  try {
    result = ((pj::Call const *)arg1)->getInfo();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::CallInfo(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Call_isActive(void * jarg1) {
  unsigned int jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  bool result;
  
  arg1 = (pj::Call *)jarg1; 
  result = (bool)((pj::Call const *)arg1)->isActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Call_getId(void * jarg1) {
  int jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  int result;
  
  arg1 = (pj::Call *)jarg1; 
  result = (int)((pj::Call const *)arg1)->getId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Call_lookup(int jarg1) {
  void * jresult ;
  int arg1 ;
  pj::Call *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (pj::Call *)pj::Call::lookup(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Call_hasMedia(void * jarg1) {
  unsigned int jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  bool result;
  
  arg1 = (pj::Call *)jarg1; 
  result = (bool)((pj::Call const *)arg1)->hasMedia();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Call_getMedia(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  unsigned int arg2 ;
  pj::Media *result = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (pj::Media *)((pj::Call const *)arg1)->getMedia(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Call_getAudioMedia(void * jarg1, int jarg2) {
  void * jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  int arg2 ;
  pj::AudioMedia result;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = ((pj::Call const *)arg1)->getAudioMedia(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::AudioMedia(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Call_getEncodingVideoMedia(void * jarg1, int jarg2) {
  void * jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  int arg2 ;
  pj::VideoMedia result;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = ((pj::Call const *)arg1)->getEncodingVideoMedia(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::VideoMedia(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Call_getDecodingVideoMedia(void * jarg1, int jarg2) {
  void * jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  int arg2 ;
  pj::VideoMedia result;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = ((pj::Call const *)arg1)->getDecodingVideoMedia(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::VideoMedia(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Call_remoteHasCap(void * jarg1, int jarg2, const char * jarg3, const char * jarg4) {
  int jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  int arg2 ;
  pj::string *arg3 = 0 ;
  pj::string *arg4 = 0 ;
  pjsip_dialog_cap_status result;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (pjsip_dialog_cap_status)((pj::Call const *)arg1)->remoteHasCap(arg2,(pj::string const &)*arg3,(pj::string const &)*arg4);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_setUserData(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::Token arg2 = (pj::Token) 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = jarg2; 
  (arg1)->setUserData(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Call_getUserData(void * jarg1) {
  void * jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::Token result;
  
  arg1 = (pj::Call *)jarg1; 
  result = (pj::Token)((pj::Call const *)arg1)->getUserData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Call_getRemNatType(void * jarg1) {
  int jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj_stun_nat_type result;
  
  arg1 = (pj::Call *)jarg1; 
  try {
    result = (pj_stun_nat_type)(arg1)->getRemNatType();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_makeCall(void * jarg1, const char * jarg2, void * jarg3) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::string *arg2 = 0 ;
  pj::CallOpParam *arg3 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (pj::CallOpParam *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CallOpParam const & is null", 0);
    return ;
  } 
  try {
    (arg1)->makeCall((pj::string const &)*arg2,(pj::CallOpParam const &)*arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_answer(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::CallOpParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::CallOpParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CallOpParam const & is null", 0);
    return ;
  } 
  try {
    (arg1)->answer((pj::CallOpParam const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_hangup(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::CallOpParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::CallOpParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CallOpParam const & is null", 0);
    return ;
  } 
  try {
    (arg1)->hangup((pj::CallOpParam const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_setHold(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::CallOpParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::CallOpParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CallOpParam const & is null", 0);
    return ;
  } 
  try {
    (arg1)->setHold((pj::CallOpParam const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_reinvite(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::CallOpParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::CallOpParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CallOpParam const & is null", 0);
    return ;
  } 
  try {
    (arg1)->reinvite((pj::CallOpParam const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_update(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::CallOpParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::CallOpParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CallOpParam const & is null", 0);
    return ;
  } 
  try {
    (arg1)->update((pj::CallOpParam const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_xfer(void * jarg1, const char * jarg2, void * jarg3) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::string *arg2 = 0 ;
  pj::CallOpParam *arg3 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (pj::CallOpParam *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CallOpParam const & is null", 0);
    return ;
  } 
  try {
    (arg1)->xfer((pj::string const &)*arg2,(pj::CallOpParam const &)*arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_xferReplaces(void * jarg1, void * jarg2, void * jarg3) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::Call *arg2 = 0 ;
  pj::CallOpParam *arg3 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::Call *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::Call const & is null", 0);
    return ;
  } 
  arg3 = (pj::CallOpParam *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CallOpParam const & is null", 0);
    return ;
  } 
  try {
    (arg1)->xferReplaces((pj::Call const &)*arg2,(pj::CallOpParam const &)*arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_processRedirect(void * jarg1, int jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pjsip_redirect_op arg2 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pjsip_redirect_op)jarg2; 
  try {
    (arg1)->processRedirect(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_dialDtmf(void * jarg1, const char * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->dialDtmf((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_sendDtmf(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::CallSendDtmfParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::CallSendDtmfParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CallSendDtmfParam const & is null", 0);
    return ;
  } 
  try {
    (arg1)->sendDtmf((pj::CallSendDtmfParam const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_sendInstantMessage(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::SendInstantMessageParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::SendInstantMessageParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SendInstantMessageParam const & is null", 0);
    return ;
  } 
  try {
    (arg1)->sendInstantMessage((pj::SendInstantMessageParam const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_sendTypingIndication(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::SendTypingIndicationParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::SendTypingIndicationParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SendTypingIndicationParam const & is null", 0);
    return ;
  } 
  try {
    (arg1)->sendTypingIndication((pj::SendTypingIndicationParam const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_sendRequest(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::CallSendRequestParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::CallSendRequestParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CallSendRequestParam const & is null", 0);
    return ;
  } 
  try {
    (arg1)->sendRequest((pj::CallSendRequestParam const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Call_dump(void * jarg1, unsigned int jarg2, const char * jarg3) {
  const char * jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  bool arg2 ;
  pj::string arg3 ;
  pj::string result;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg3)->assign(jarg3); 
  try {
    result = (arg1)->dump(arg2,arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Call_vidGetStreamIdx(void * jarg1) {
  int jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  int result;
  
  arg1 = (pj::Call *)jarg1; 
  result = (int)((pj::Call const *)arg1)->vidGetStreamIdx();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Call_vidStreamIsRunning(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  int arg2 ;
  pjmedia_dir arg3 ;
  bool result;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pjmedia_dir)jarg3; 
  result = (bool)((pj::Call const *)arg1)->vidStreamIsRunning(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_vidSetStream(void * jarg1, int jarg2, void * jarg3) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pjsua_call_vid_strm_op arg2 ;
  pj::CallVidSetStreamParam *arg3 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pjsua_call_vid_strm_op)jarg2; 
  arg3 = (pj::CallVidSetStreamParam *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CallVidSetStreamParam const & is null", 0);
    return ;
  } 
  try {
    (arg1)->vidSetStream(arg2,(pj::CallVidSetStreamParam const &)*arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_vidStreamModifyCodecParam(void * jarg1, int jarg2, void * jarg3) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  int arg2 ;
  pj::VidCodecParam *arg3 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::VidCodecParam *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::VidCodecParam const & is null", 0);
    return ;
  } 
  try {
    (arg1)->vidStreamModifyCodecParam(arg2,(pj::VidCodecParam const &)*arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_audStreamModifyCodecParam(void * jarg1, int jarg2, void * jarg3) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  int arg2 ;
  pj::CodecParam *arg3 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::CodecParam *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CodecParam const & is null", 0);
    return ;
  } 
  try {
    (arg1)->audStreamModifyCodecParam(arg2,(pj::CodecParam const &)*arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Call_getStreamInfo(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  unsigned int arg2 ;
  pj::StreamInfo result;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    result = ((pj::Call const *)arg1)->getStreamInfo(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::StreamInfo(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Call_getStreamStat(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  unsigned int arg2 ;
  pj::StreamStat result;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    result = ((pj::Call const *)arg1)->getStreamStat(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::StreamStat(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Call_getMedTransportInfo(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  unsigned int arg2 ;
  pj::MediaTransportInfo result;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    result = ((pj::Call const *)arg1)->getMedTransportInfo(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::MediaTransportInfo(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_processMediaUpdate(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallMediaStateParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallMediaStateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallMediaStateParam & is null", 0);
    return ;
  } 
  (arg1)->processMediaUpdate(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_processStateChange(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallStateParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallStateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallStateParam & is null", 0);
    return ;
  } 
  (arg1)->processStateChange(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onCallState(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallStateParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallStateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallStateParam & is null", 0);
    return ;
  } 
  (arg1)->onCallState(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onCallStateSwigExplicitCall(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallStateParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallStateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallStateParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onCallState(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onCallTsxState(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallTsxStateParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallTsxStateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallTsxStateParam & is null", 0);
    return ;
  } 
  (arg1)->onCallTsxState(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onCallTsxStateSwigExplicitCall(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallTsxStateParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallTsxStateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallTsxStateParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onCallTsxState(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onCallMediaState(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallMediaStateParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallMediaStateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallMediaStateParam & is null", 0);
    return ;
  } 
  (arg1)->onCallMediaState(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onCallMediaStateSwigExplicitCall(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallMediaStateParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallMediaStateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallMediaStateParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onCallMediaState(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onCallSdpCreated(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallSdpCreatedParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallSdpCreatedParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallSdpCreatedParam & is null", 0);
    return ;
  } 
  (arg1)->onCallSdpCreated(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onCallSdpCreatedSwigExplicitCall(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallSdpCreatedParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallSdpCreatedParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallSdpCreatedParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onCallSdpCreated(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onStreamPreCreate(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnStreamPreCreateParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnStreamPreCreateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnStreamPreCreateParam & is null", 0);
    return ;
  } 
  (arg1)->onStreamPreCreate(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onStreamPreCreateSwigExplicitCall(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnStreamPreCreateParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnStreamPreCreateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnStreamPreCreateParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onStreamPreCreate(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onStreamCreated(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnStreamCreatedParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnStreamCreatedParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnStreamCreatedParam & is null", 0);
    return ;
  } 
  (arg1)->onStreamCreated(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onStreamCreatedSwigExplicitCall(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnStreamCreatedParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnStreamCreatedParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnStreamCreatedParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onStreamCreated(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onStreamDestroyed(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnStreamDestroyedParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnStreamDestroyedParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnStreamDestroyedParam & is null", 0);
    return ;
  } 
  (arg1)->onStreamDestroyed(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onStreamDestroyedSwigExplicitCall(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnStreamDestroyedParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnStreamDestroyedParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnStreamDestroyedParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onStreamDestroyed(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onDtmfDigit(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnDtmfDigitParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnDtmfDigitParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnDtmfDigitParam & is null", 0);
    return ;
  } 
  (arg1)->onDtmfDigit(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onDtmfDigitSwigExplicitCall(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnDtmfDigitParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnDtmfDigitParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnDtmfDigitParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onDtmfDigit(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onDtmfEvent(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnDtmfEventParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnDtmfEventParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnDtmfEventParam & is null", 0);
    return ;
  } 
  (arg1)->onDtmfEvent(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onDtmfEventSwigExplicitCall(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnDtmfEventParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnDtmfEventParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnDtmfEventParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onDtmfEvent(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onCallTransferRequest(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallTransferRequestParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallTransferRequestParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallTransferRequestParam & is null", 0);
    return ;
  } 
  (arg1)->onCallTransferRequest(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onCallTransferRequestSwigExplicitCall(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallTransferRequestParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallTransferRequestParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallTransferRequestParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onCallTransferRequest(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onCallTransferStatus(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallTransferStatusParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallTransferStatusParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallTransferStatusParam & is null", 0);
    return ;
  } 
  (arg1)->onCallTransferStatus(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onCallTransferStatusSwigExplicitCall(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallTransferStatusParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallTransferStatusParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallTransferStatusParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onCallTransferStatus(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onCallReplaceRequest(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallReplaceRequestParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallReplaceRequestParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallReplaceRequestParam & is null", 0);
    return ;
  } 
  (arg1)->onCallReplaceRequest(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onCallReplaceRequestSwigExplicitCall(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallReplaceRequestParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallReplaceRequestParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallReplaceRequestParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onCallReplaceRequest(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onCallReplaced(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallReplacedParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallReplacedParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallReplacedParam & is null", 0);
    return ;
  } 
  (arg1)->onCallReplaced(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onCallReplacedSwigExplicitCall(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallReplacedParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallReplacedParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallReplacedParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onCallReplaced(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onCallRxOffer(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallRxOfferParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallRxOfferParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallRxOfferParam & is null", 0);
    return ;
  } 
  (arg1)->onCallRxOffer(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onCallRxOfferSwigExplicitCall(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallRxOfferParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallRxOfferParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallRxOfferParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onCallRxOffer(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onCallRxReinvite(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallRxReinviteParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallRxReinviteParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallRxReinviteParam & is null", 0);
    return ;
  } 
  (arg1)->onCallRxReinvite(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onCallRxReinviteSwigExplicitCall(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallRxReinviteParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallRxReinviteParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallRxReinviteParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onCallRxReinvite(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onCallTxOffer(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallTxOfferParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallTxOfferParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallTxOfferParam & is null", 0);
    return ;
  } 
  (arg1)->onCallTxOffer(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onCallTxOfferSwigExplicitCall(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallTxOfferParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallTxOfferParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallTxOfferParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onCallTxOffer(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onInstantMessage(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnInstantMessageParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnInstantMessageParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnInstantMessageParam & is null", 0);
    return ;
  } 
  (arg1)->onInstantMessage(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onInstantMessageSwigExplicitCall(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnInstantMessageParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnInstantMessageParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnInstantMessageParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onInstantMessage(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onInstantMessageStatus(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnInstantMessageStatusParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnInstantMessageStatusParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnInstantMessageStatusParam & is null", 0);
    return ;
  } 
  (arg1)->onInstantMessageStatus(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onInstantMessageStatusSwigExplicitCall(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnInstantMessageStatusParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnInstantMessageStatusParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnInstantMessageStatusParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onInstantMessageStatus(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onTypingIndication(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnTypingIndicationParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnTypingIndicationParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnTypingIndicationParam & is null", 0);
    return ;
  } 
  (arg1)->onTypingIndication(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onTypingIndicationSwigExplicitCall(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnTypingIndicationParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnTypingIndicationParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnTypingIndicationParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onTypingIndication(*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Call_onCallRedirected(void * jarg1, void * jarg2) {
  int jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallRedirectedParam *arg2 = 0 ;
  pjsip_redirect_op result;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallRedirectedParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallRedirectedParam & is null", 0);
    return 0;
  } 
  result = (pjsip_redirect_op)(arg1)->onCallRedirected(*arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Call_onCallRedirectedSwigExplicitCall(void * jarg1, void * jarg2) {
  int jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallRedirectedParam *arg2 = 0 ;
  pjsip_redirect_op result;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallRedirectedParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallRedirectedParam & is null", 0);
    return 0;
  } 
  result = (pjsip_redirect_op)(arg1)->pj::Call::onCallRedirected(*arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onCallMediaTransportState(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallMediaTransportStateParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallMediaTransportStateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallMediaTransportStateParam & is null", 0);
    return ;
  } 
  (arg1)->onCallMediaTransportState(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onCallMediaTransportStateSwigExplicitCall(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallMediaTransportStateParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallMediaTransportStateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallMediaTransportStateParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onCallMediaTransportState(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onCallMediaEvent(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallMediaEventParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallMediaEventParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallMediaEventParam & is null", 0);
    return ;
  } 
  (arg1)->onCallMediaEvent(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onCallMediaEventSwigExplicitCall(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallMediaEventParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallMediaEventParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallMediaEventParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onCallMediaEvent(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onCreateMediaTransport(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCreateMediaTransportParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCreateMediaTransportParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCreateMediaTransportParam & is null", 0);
    return ;
  } 
  (arg1)->onCreateMediaTransport(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onCreateMediaTransportSwigExplicitCall(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCreateMediaTransportParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCreateMediaTransportParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCreateMediaTransportParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onCreateMediaTransport(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onCreateMediaTransportSrtp(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCreateMediaTransportSrtpParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCreateMediaTransportSrtpParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCreateMediaTransportSrtpParam & is null", 0);
    return ;
  } 
  (arg1)->onCreateMediaTransportSrtp(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_onCreateMediaTransportSrtpSwigExplicitCall(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCreateMediaTransportSrtpParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCreateMediaTransportSrtpParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCreateMediaTransportSrtpParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onCreateMediaTransportSrtp(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call_director_connect(void *objarg, SwigDirector_Call::SWIG_Callback0_t callback0, SwigDirector_Call::SWIG_Callback1_t callback1, SwigDirector_Call::SWIG_Callback2_t callback2, SwigDirector_Call::SWIG_Callback3_t callback3, SwigDirector_Call::SWIG_Callback4_t callback4, SwigDirector_Call::SWIG_Callback5_t callback5, SwigDirector_Call::SWIG_Callback6_t callback6, SwigDirector_Call::SWIG_Callback7_t callback7, SwigDirector_Call::SWIG_Callback8_t callback8, SwigDirector_Call::SWIG_Callback9_t callback9, SwigDirector_Call::SWIG_Callback10_t callback10, SwigDirector_Call::SWIG_Callback11_t callback11, SwigDirector_Call::SWIG_Callback12_t callback12, SwigDirector_Call::SWIG_Callback13_t callback13, SwigDirector_Call::SWIG_Callback14_t callback14, SwigDirector_Call::SWIG_Callback15_t callback15, SwigDirector_Call::SWIG_Callback16_t callback16, SwigDirector_Call::SWIG_Callback17_t callback17, SwigDirector_Call::SWIG_Callback18_t callback18, SwigDirector_Call::SWIG_Callback19_t callback19, SwigDirector_Call::SWIG_Callback20_t callback20, SwigDirector_Call::SWIG_Callback21_t callback21, SwigDirector_Call::SWIG_Callback22_t callback22, SwigDirector_Call::SWIG_Callback23_t callback23) {
  pj::Call *obj = (pj::Call *)objarg;
  SwigDirector_Call *director = static_cast<SwigDirector_Call *>(obj);
  director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_JsonDocument() {
  void * jresult ;
  pj::JsonDocument *result = 0 ;
  
  result = (pj::JsonDocument *)new pj::JsonDocument();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_JsonDocument(void * jarg1) {
  pj::JsonDocument *arg1 = (pj::JsonDocument *) 0 ;
  
  arg1 = (pj::JsonDocument *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JsonDocument_loadFile(void * jarg1, const char * jarg2) {
  pj::JsonDocument *arg1 = (pj::JsonDocument *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::JsonDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->loadFile((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_JsonDocument_loadString(void * jarg1, const char * jarg2) {
  pj::JsonDocument *arg1 = (pj::JsonDocument *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::JsonDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->loadString((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_JsonDocument_saveFile(void * jarg1, const char * jarg2) {
  pj::JsonDocument *arg1 = (pj::JsonDocument *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::JsonDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->saveFile((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_JsonDocument_saveString(void * jarg1) {
  const char * jresult ;
  pj::JsonDocument *arg1 = (pj::JsonDocument *) 0 ;
  pj::string result;
  
  arg1 = (pj::JsonDocument *)jarg1; 
  try {
    result = (arg1)->saveString();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JsonDocument_getRootContainer(void * jarg1) {
  void * jresult ;
  pj::JsonDocument *arg1 = (pj::JsonDocument *) 0 ;
  pj::ContainerNode *result = 0 ;
  
  arg1 = (pj::JsonDocument *)jarg1; 
  result = (pj::ContainerNode *) &((pj::JsonDocument const *)arg1)->getRootContainer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnNatDetectionCompleteParam_status_set(void * jarg1, int jarg2) {
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  pj_status_t arg2 ;
  
  arg1 = (pj::OnNatDetectionCompleteParam *)jarg1; 
  arg2 = (pj_status_t)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OnNatDetectionCompleteParam_status_get(void * jarg1) {
  int jresult ;
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  pj_status_t result;
  
  arg1 = (pj::OnNatDetectionCompleteParam *)jarg1; 
  result = (pj_status_t) ((arg1)->status);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnNatDetectionCompleteParam_reason_set(void * jarg1, const char * jarg2) {
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnNatDetectionCompleteParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->reason = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OnNatDetectionCompleteParam_reason_get(void * jarg1) {
  const char * jresult ;
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnNatDetectionCompleteParam *)jarg1; 
  result = (pj::string *) & ((arg1)->reason);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnNatDetectionCompleteParam_natType_set(void * jarg1, int jarg2) {
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  pj_stun_nat_type arg2 ;
  
  arg1 = (pj::OnNatDetectionCompleteParam *)jarg1; 
  arg2 = (pj_stun_nat_type)jarg2; 
  if (arg1) (arg1)->natType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OnNatDetectionCompleteParam_natType_get(void * jarg1) {
  int jresult ;
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  pj_stun_nat_type result;
  
  arg1 = (pj::OnNatDetectionCompleteParam *)jarg1; 
  result = (pj_stun_nat_type) ((arg1)->natType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnNatDetectionCompleteParam_natTypeName_set(void * jarg1, const char * jarg2) {
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnNatDetectionCompleteParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->natTypeName = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OnNatDetectionCompleteParam_natTypeName_get(void * jarg1) {
  const char * jresult ;
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnNatDetectionCompleteParam *)jarg1; 
  result = (pj::string *) & ((arg1)->natTypeName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnNatDetectionCompleteParam() {
  void * jresult ;
  pj::OnNatDetectionCompleteParam *result = 0 ;
  
  result = (pj::OnNatDetectionCompleteParam *)new pj::OnNatDetectionCompleteParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnNatDetectionCompleteParam(void * jarg1) {
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  
  arg1 = (pj::OnNatDetectionCompleteParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnNatCheckStunServersCompleteParam_userData_set(void * jarg1, void * jarg2) {
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  pj::Token arg2 = (pj::Token) 0 ;
  
  arg1 = (pj::OnNatCheckStunServersCompleteParam *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->userData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnNatCheckStunServersCompleteParam_userData_get(void * jarg1) {
  void * jresult ;
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  pj::Token result;
  
  arg1 = (pj::OnNatCheckStunServersCompleteParam *)jarg1; 
  result = (pj::Token) ((arg1)->userData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnNatCheckStunServersCompleteParam_status_set(void * jarg1, int jarg2) {
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  pj_status_t arg2 ;
  
  arg1 = (pj::OnNatCheckStunServersCompleteParam *)jarg1; 
  arg2 = (pj_status_t)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OnNatCheckStunServersCompleteParam_status_get(void * jarg1) {
  int jresult ;
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  pj_status_t result;
  
  arg1 = (pj::OnNatCheckStunServersCompleteParam *)jarg1; 
  result = (pj_status_t) ((arg1)->status);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnNatCheckStunServersCompleteParam_name_set(void * jarg1, const char * jarg2) {
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnNatCheckStunServersCompleteParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OnNatCheckStunServersCompleteParam_name_get(void * jarg1) {
  const char * jresult ;
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnNatCheckStunServersCompleteParam *)jarg1; 
  result = (pj::string *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnNatCheckStunServersCompleteParam_addr_set(void * jarg1, const char * jarg2) {
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  arg1 = (pj::OnNatCheckStunServersCompleteParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::SocketAddress arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->addr = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OnNatCheckStunServersCompleteParam_addr_get(void * jarg1) {
  const char * jresult ;
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  arg1 = (pj::OnNatCheckStunServersCompleteParam *)jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->addr);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnNatCheckStunServersCompleteParam() {
  void * jresult ;
  pj::OnNatCheckStunServersCompleteParam *result = 0 ;
  
  result = (pj::OnNatCheckStunServersCompleteParam *)new pj::OnNatCheckStunServersCompleteParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnNatCheckStunServersCompleteParam(void * jarg1) {
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  
  arg1 = (pj::OnNatCheckStunServersCompleteParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnTimerParam_userData_set(void * jarg1, void * jarg2) {
  pj::OnTimerParam *arg1 = (pj::OnTimerParam *) 0 ;
  pj::Token arg2 = (pj::Token) 0 ;
  
  arg1 = (pj::OnTimerParam *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->userData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnTimerParam_userData_get(void * jarg1) {
  void * jresult ;
  pj::OnTimerParam *arg1 = (pj::OnTimerParam *) 0 ;
  pj::Token result;
  
  arg1 = (pj::OnTimerParam *)jarg1; 
  result = (pj::Token) ((arg1)->userData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnTimerParam_msecDelay_set(void * jarg1, unsigned int jarg2) {
  pj::OnTimerParam *arg1 = (pj::OnTimerParam *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::OnTimerParam *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->msecDelay = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OnTimerParam_msecDelay_get(void * jarg1) {
  unsigned int jresult ;
  pj::OnTimerParam *arg1 = (pj::OnTimerParam *) 0 ;
  unsigned int result;
  
  arg1 = (pj::OnTimerParam *)jarg1; 
  result = (unsigned int) ((arg1)->msecDelay);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnTimerParam() {
  void * jresult ;
  pj::OnTimerParam *result = 0 ;
  
  result = (pj::OnTimerParam *)new pj::OnTimerParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnTimerParam(void * jarg1) {
  pj::OnTimerParam *arg1 = (pj::OnTimerParam *) 0 ;
  
  arg1 = (pj::OnTimerParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SslCertName_type_set(void * jarg1, int jarg2) {
  pj::SslCertName *arg1 = (pj::SslCertName *) 0 ;
  pj_ssl_cert_name_type arg2 ;
  
  arg1 = (pj::SslCertName *)jarg1; 
  arg2 = (pj_ssl_cert_name_type)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SslCertName_type_get(void * jarg1) {
  int jresult ;
  pj::SslCertName *arg1 = (pj::SslCertName *) 0 ;
  pj_ssl_cert_name_type result;
  
  arg1 = (pj::SslCertName *)jarg1; 
  result = (pj_ssl_cert_name_type) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SslCertName_name_set(void * jarg1, const char * jarg2) {
  pj::SslCertName *arg1 = (pj::SslCertName *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SslCertName *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SslCertName_name_get(void * jarg1) {
  const char * jresult ;
  pj::SslCertName *arg1 = (pj::SslCertName *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SslCertName *)jarg1; 
  result = (pj::string *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SslCertName() {
  void * jresult ;
  pj::SslCertName *result = 0 ;
  
  result = (pj::SslCertName *)new pj::SslCertName();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SslCertName(void * jarg1) {
  pj::SslCertName *arg1 = (pj::SslCertName *) 0 ;
  
  arg1 = (pj::SslCertName *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SslCertInfo_version_set(void * jarg1, unsigned int jarg2) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->version = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SslCertInfo_version_get(void * jarg1) {
  unsigned int jresult ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  result = (unsigned int) ((arg1)->version);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SslCertInfo_serialNo_set(void * jarg1, void * jarg2) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  unsigned char *arg2 = (unsigned char *) (unsigned char *)0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  {
    size_t ii;
    unsigned char *b = (unsigned char *) arg1->serialNo;
    for (ii = 0; ii < (size_t)20; ii++) b[ii] = *((unsigned char *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SslCertInfo_serialNo_get(void * jarg1) {
  void * jresult ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  result = (unsigned char *)(unsigned char *) ((arg1)->serialNo);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SslCertInfo_subjectCn_set(void * jarg1, const char * jarg2) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->subjectCn = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SslCertInfo_subjectCn_get(void * jarg1) {
  const char * jresult ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->subjectCn);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SslCertInfo_subjectInfo_set(void * jarg1, const char * jarg2) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->subjectInfo = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SslCertInfo_subjectInfo_get(void * jarg1) {
  const char * jresult ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->subjectInfo);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SslCertInfo_issuerCn_set(void * jarg1, const char * jarg2) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->issuerCn = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SslCertInfo_issuerCn_get(void * jarg1) {
  const char * jresult ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->issuerCn);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SslCertInfo_issuerInfo_set(void * jarg1, const char * jarg2) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->issuerInfo = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SslCertInfo_issuerInfo_get(void * jarg1) {
  const char * jresult ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->issuerInfo);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SslCertInfo_validityStart_set(void * jarg1, void * jarg2) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::TimeVal *arg2 = (pj::TimeVal *) 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  arg2 = (pj::TimeVal *)jarg2; 
  if (arg1) (arg1)->validityStart = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SslCertInfo_validityStart_get(void * jarg1) {
  void * jresult ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::TimeVal *result = 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  result = (pj::TimeVal *)& ((arg1)->validityStart);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SslCertInfo_validityEnd_set(void * jarg1, void * jarg2) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::TimeVal *arg2 = (pj::TimeVal *) 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  arg2 = (pj::TimeVal *)jarg2; 
  if (arg1) (arg1)->validityEnd = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SslCertInfo_validityEnd_get(void * jarg1) {
  void * jresult ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::TimeVal *result = 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  result = (pj::TimeVal *)& ((arg1)->validityEnd);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SslCertInfo_validityGmt_set(void * jarg1, unsigned int jarg2) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->validityGmt = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SslCertInfo_validityGmt_get(void * jarg1) {
  unsigned int jresult ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  bool result;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  result = (bool) ((arg1)->validityGmt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SslCertInfo_subjectAltName_set(void * jarg1, void * jarg2) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::SslCertNameVector *arg2 = (pj::SslCertNameVector *) 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  arg2 = (pj::SslCertNameVector *)jarg2; 
  if (arg1) (arg1)->subjectAltName = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SslCertInfo_subjectAltName_get(void * jarg1) {
  void * jresult ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::SslCertNameVector *result = 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  result = (pj::SslCertNameVector *)& ((arg1)->subjectAltName);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SslCertInfo_raw_set(void * jarg1, const char * jarg2) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->raw = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SslCertInfo_raw_get(void * jarg1) {
  const char * jresult ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->raw);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SslCertInfo() {
  void * jresult ;
  pj::SslCertInfo *result = 0 ;
  
  result = (pj::SslCertInfo *)new pj::SslCertInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SslCertInfo_isEmpty(void * jarg1) {
  unsigned int jresult ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  bool result;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  result = (bool)((pj::SslCertInfo const *)arg1)->isEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SslCertInfo(void * jarg1) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsInfo_established_set(void * jarg1, unsigned int jarg2) {
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->established = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TlsInfo_established_get(void * jarg1) {
  unsigned int jresult ;
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  bool result;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  result = (bool) ((arg1)->established);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsInfo_protocol_set(void * jarg1, unsigned int jarg2) {
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->protocol = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TlsInfo_protocol_get(void * jarg1) {
  unsigned int jresult ;
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  result = (unsigned int) ((arg1)->protocol);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsInfo_cipher_set(void * jarg1, int jarg2) {
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj_ssl_cipher arg2 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  arg2 = (pj_ssl_cipher)jarg2; 
  if (arg1) (arg1)->cipher = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TlsInfo_cipher_get(void * jarg1) {
  int jresult ;
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj_ssl_cipher result;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  result = (pj_ssl_cipher) ((arg1)->cipher);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsInfo_cipherName_set(void * jarg1, const char * jarg2) {
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->cipherName = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_TlsInfo_cipherName_get(void * jarg1) {
  const char * jresult ;
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->cipherName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsInfo_localAddr_set(void * jarg1, const char * jarg2) {
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::SocketAddress arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->localAddr = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_TlsInfo_localAddr_get(void * jarg1) {
  const char * jresult ;
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->localAddr);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsInfo_remoteAddr_set(void * jarg1, const char * jarg2) {
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::SocketAddress arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->remoteAddr = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_TlsInfo_remoteAddr_get(void * jarg1) {
  const char * jresult ;
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->remoteAddr);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsInfo_localCertInfo_set(void * jarg1, void * jarg2) {
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::SslCertInfo *arg2 = (pj::SslCertInfo *) 0 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  arg2 = (pj::SslCertInfo *)jarg2; 
  if (arg1) (arg1)->localCertInfo = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TlsInfo_localCertInfo_get(void * jarg1) {
  void * jresult ;
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::SslCertInfo *result = 0 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  result = (pj::SslCertInfo *)& ((arg1)->localCertInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsInfo_remoteCertInfo_set(void * jarg1, void * jarg2) {
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::SslCertInfo *arg2 = (pj::SslCertInfo *) 0 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  arg2 = (pj::SslCertInfo *)jarg2; 
  if (arg1) (arg1)->remoteCertInfo = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TlsInfo_remoteCertInfo_get(void * jarg1) {
  void * jresult ;
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::SslCertInfo *result = 0 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  result = (pj::SslCertInfo *)& ((arg1)->remoteCertInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsInfo_verifyStatus_set(void * jarg1, unsigned int jarg2) {
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->verifyStatus = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TlsInfo_verifyStatus_get(void * jarg1) {
  unsigned int jresult ;
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  result = (unsigned int) ((arg1)->verifyStatus);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TlsInfo_verifyMsgs_set(void * jarg1, void * jarg2) {
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::StringVector *arg2 = (pj::StringVector *) 0 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  arg2 = (pj::StringVector *)jarg2; 
  if (arg1) (arg1)->verifyMsgs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TlsInfo_verifyMsgs_get(void * jarg1) {
  void * jresult ;
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::StringVector *result = 0 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  result = (pj::StringVector *)& ((arg1)->verifyMsgs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TlsInfo() {
  void * jresult ;
  pj::TlsInfo *result = 0 ;
  
  result = (pj::TlsInfo *)new pj::TlsInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TlsInfo_isEmpty(void * jarg1) {
  unsigned int jresult ;
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  bool result;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  result = (bool)((pj::TlsInfo const *)arg1)->isEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TlsInfo(void * jarg1) {
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnTransportStateParam_hnd_set(void * jarg1, void * jarg2) {
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pj::TransportHandle arg2 = (pj::TransportHandle) 0 ;
  
  arg1 = (pj::OnTransportStateParam *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->hnd = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnTransportStateParam_hnd_get(void * jarg1) {
  void * jresult ;
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pj::TransportHandle result;
  
  arg1 = (pj::OnTransportStateParam *)jarg1; 
  result = (pj::TransportHandle) ((arg1)->hnd);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnTransportStateParam_type_set(void * jarg1, const char * jarg2) {
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnTransportStateParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->type = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OnTransportStateParam_type_get(void * jarg1) {
  const char * jresult ;
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnTransportStateParam *)jarg1; 
  result = (pj::string *) & ((arg1)->type);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnTransportStateParam_state_set(void * jarg1, int jarg2) {
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pjsip_transport_state arg2 ;
  
  arg1 = (pj::OnTransportStateParam *)jarg1; 
  arg2 = (pjsip_transport_state)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OnTransportStateParam_state_get(void * jarg1) {
  int jresult ;
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pjsip_transport_state result;
  
  arg1 = (pj::OnTransportStateParam *)jarg1; 
  result = (pjsip_transport_state) ((arg1)->state);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnTransportStateParam_lastError_set(void * jarg1, int jarg2) {
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pj_status_t arg2 ;
  
  arg1 = (pj::OnTransportStateParam *)jarg1; 
  arg2 = (pj_status_t)jarg2; 
  if (arg1) (arg1)->lastError = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OnTransportStateParam_lastError_get(void * jarg1) {
  int jresult ;
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pj_status_t result;
  
  arg1 = (pj::OnTransportStateParam *)jarg1; 
  result = (pj_status_t) ((arg1)->lastError);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnTransportStateParam_tlsInfo_set(void * jarg1, void * jarg2) {
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pj::TlsInfo *arg2 = (pj::TlsInfo *) 0 ;
  
  arg1 = (pj::OnTransportStateParam *)jarg1; 
  arg2 = (pj::TlsInfo *)jarg2; 
  if (arg1) (arg1)->tlsInfo = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnTransportStateParam_tlsInfo_get(void * jarg1) {
  void * jresult ;
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pj::TlsInfo *result = 0 ;
  
  arg1 = (pj::OnTransportStateParam *)jarg1; 
  result = (pj::TlsInfo *)& ((arg1)->tlsInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnTransportStateParam() {
  void * jresult ;
  pj::OnTransportStateParam *result = 0 ;
  
  result = (pj::OnTransportStateParam *)new pj::OnTransportStateParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnTransportStateParam(void * jarg1) {
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  
  arg1 = (pj::OnTransportStateParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnSelectAccountParam_rdata_set(void * jarg1, void * jarg2) {
  pj::OnSelectAccountParam *arg1 = (pj::OnSelectAccountParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  arg1 = (pj::OnSelectAccountParam *)jarg1; 
  arg2 = (pj::SipRxData *)jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnSelectAccountParam_rdata_get(void * jarg1) {
  void * jresult ;
  pj::OnSelectAccountParam *arg1 = (pj::OnSelectAccountParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  arg1 = (pj::OnSelectAccountParam *)jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnSelectAccountParam_accountIndex_set(void * jarg1, int jarg2) {
  pj::OnSelectAccountParam *arg1 = (pj::OnSelectAccountParam *) 0 ;
  int arg2 ;
  
  arg1 = (pj::OnSelectAccountParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->accountIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OnSelectAccountParam_accountIndex_get(void * jarg1) {
  int jresult ;
  pj::OnSelectAccountParam *arg1 = (pj::OnSelectAccountParam *) 0 ;
  int result;
  
  arg1 = (pj::OnSelectAccountParam *)jarg1; 
  result = (int) ((arg1)->accountIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnSelectAccountParam() {
  void * jresult ;
  pj::OnSelectAccountParam *result = 0 ;
  
  result = (pj::OnSelectAccountParam *)new pj::OnSelectAccountParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnSelectAccountParam(void * jarg1) {
  pj::OnSelectAccountParam *arg1 = (pj::OnSelectAccountParam *) 0 ;
  
  arg1 = (pj::OnSelectAccountParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IpChangeParam_restartListener_set(void * jarg1, unsigned int jarg2) {
  pj::IpChangeParam *arg1 = (pj::IpChangeParam *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::IpChangeParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->restartListener = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IpChangeParam_restartListener_get(void * jarg1) {
  unsigned int jresult ;
  pj::IpChangeParam *arg1 = (pj::IpChangeParam *) 0 ;
  bool result;
  
  arg1 = (pj::IpChangeParam *)jarg1; 
  result = (bool) ((arg1)->restartListener);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IpChangeParam_restartLisDelay_set(void * jarg1, unsigned int jarg2) {
  pj::IpChangeParam *arg1 = (pj::IpChangeParam *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::IpChangeParam *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->restartLisDelay = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IpChangeParam_restartLisDelay_get(void * jarg1) {
  unsigned int jresult ;
  pj::IpChangeParam *arg1 = (pj::IpChangeParam *) 0 ;
  unsigned int result;
  
  arg1 = (pj::IpChangeParam *)jarg1; 
  result = (unsigned int) ((arg1)->restartLisDelay);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IpChangeParam_shutdownTransport_set(void * jarg1, unsigned int jarg2) {
  pj::IpChangeParam *arg1 = (pj::IpChangeParam *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::IpChangeParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->shutdownTransport = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IpChangeParam_shutdownTransport_get(void * jarg1) {
  unsigned int jresult ;
  pj::IpChangeParam *arg1 = (pj::IpChangeParam *) 0 ;
  bool result;
  
  arg1 = (pj::IpChangeParam *)jarg1; 
  result = (bool) ((arg1)->shutdownTransport);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IpChangeParam() {
  void * jresult ;
  pj::IpChangeParam *result = 0 ;
  
  result = (pj::IpChangeParam *)new pj::IpChangeParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IpChangeParam(void * jarg1) {
  pj::IpChangeParam *arg1 = (pj::IpChangeParam *) 0 ;
  
  arg1 = (pj::IpChangeParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RegProgressParam_isRegister_set(void * jarg1, unsigned int jarg2) {
  pj::RegProgressParam *arg1 = (pj::RegProgressParam *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::RegProgressParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isRegister = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RegProgressParam_isRegister_get(void * jarg1) {
  unsigned int jresult ;
  pj::RegProgressParam *arg1 = (pj::RegProgressParam *) 0 ;
  bool result;
  
  arg1 = (pj::RegProgressParam *)jarg1; 
  result = (bool) ((arg1)->isRegister);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RegProgressParam_code_set(void * jarg1, int jarg2) {
  pj::RegProgressParam *arg1 = (pj::RegProgressParam *) 0 ;
  int arg2 ;
  
  arg1 = (pj::RegProgressParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->code = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RegProgressParam_code_get(void * jarg1) {
  int jresult ;
  pj::RegProgressParam *arg1 = (pj::RegProgressParam *) 0 ;
  int result;
  
  arg1 = (pj::RegProgressParam *)jarg1; 
  result = (int) ((arg1)->code);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RegProgressParam() {
  void * jresult ;
  pj::RegProgressParam *result = 0 ;
  
  result = (pj::RegProgressParam *)new pj::RegProgressParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RegProgressParam(void * jarg1) {
  pj::RegProgressParam *arg1 = (pj::RegProgressParam *) 0 ;
  
  arg1 = (pj::RegProgressParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnIpChangeProgressParam_op_set(void * jarg1, int jarg2) {
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  pjsua_ip_change_op arg2 ;
  
  arg1 = (pj::OnIpChangeProgressParam *)jarg1; 
  arg2 = (pjsua_ip_change_op)jarg2; 
  if (arg1) (arg1)->op = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OnIpChangeProgressParam_op_get(void * jarg1) {
  int jresult ;
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  pjsua_ip_change_op result;
  
  arg1 = (pj::OnIpChangeProgressParam *)jarg1; 
  result = (pjsua_ip_change_op) ((arg1)->op);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnIpChangeProgressParam_status_set(void * jarg1, int jarg2) {
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  pj_status_t arg2 ;
  
  arg1 = (pj::OnIpChangeProgressParam *)jarg1; 
  arg2 = (pj_status_t)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OnIpChangeProgressParam_status_get(void * jarg1) {
  int jresult ;
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  pj_status_t result;
  
  arg1 = (pj::OnIpChangeProgressParam *)jarg1; 
  result = (pj_status_t) ((arg1)->status);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnIpChangeProgressParam_transportId_set(void * jarg1, int jarg2) {
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  pj::TransportId arg2 ;
  
  arg1 = (pj::OnIpChangeProgressParam *)jarg1; 
  arg2 = (pj::TransportId)jarg2; 
  if (arg1) (arg1)->transportId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OnIpChangeProgressParam_transportId_get(void * jarg1) {
  int jresult ;
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  pj::TransportId result;
  
  arg1 = (pj::OnIpChangeProgressParam *)jarg1; 
  result = (pj::TransportId) ((arg1)->transportId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnIpChangeProgressParam_accId_set(void * jarg1, int jarg2) {
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  int arg2 ;
  
  arg1 = (pj::OnIpChangeProgressParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->accId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OnIpChangeProgressParam_accId_get(void * jarg1) {
  int jresult ;
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  int result;
  
  arg1 = (pj::OnIpChangeProgressParam *)jarg1; 
  result = (int) ((arg1)->accId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnIpChangeProgressParam_callId_set(void * jarg1, int jarg2) {
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  int arg2 ;
  
  arg1 = (pj::OnIpChangeProgressParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->callId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OnIpChangeProgressParam_callId_get(void * jarg1) {
  int jresult ;
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  int result;
  
  arg1 = (pj::OnIpChangeProgressParam *)jarg1; 
  result = (int) ((arg1)->callId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnIpChangeProgressParam_regInfo_set(void * jarg1, void * jarg2) {
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  pj::RegProgressParam *arg2 = (pj::RegProgressParam *) 0 ;
  
  arg1 = (pj::OnIpChangeProgressParam *)jarg1; 
  arg2 = (pj::RegProgressParam *)jarg2; 
  if (arg1) (arg1)->regInfo = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnIpChangeProgressParam_regInfo_get(void * jarg1) {
  void * jresult ;
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  pj::RegProgressParam *result = 0 ;
  
  arg1 = (pj::OnIpChangeProgressParam *)jarg1; 
  result = (pj::RegProgressParam *)& ((arg1)->regInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnIpChangeProgressParam() {
  void * jresult ;
  pj::OnIpChangeProgressParam *result = 0 ;
  
  result = (pj::OnIpChangeProgressParam *)new pj::OnIpChangeProgressParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnIpChangeProgressParam(void * jarg1) {
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  
  arg1 = (pj::OnIpChangeProgressParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnMediaEventParam_ev_set(void * jarg1, void * jarg2) {
  pj::OnMediaEventParam *arg1 = (pj::OnMediaEventParam *) 0 ;
  pj::MediaEvent *arg2 = (pj::MediaEvent *) 0 ;
  
  arg1 = (pj::OnMediaEventParam *)jarg1; 
  arg2 = (pj::MediaEvent *)jarg2; 
  if (arg1) (arg1)->ev = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnMediaEventParam_ev_get(void * jarg1) {
  void * jresult ;
  pj::OnMediaEventParam *arg1 = (pj::OnMediaEventParam *) 0 ;
  pj::MediaEvent *result = 0 ;
  
  arg1 = (pj::OnMediaEventParam *)jarg1; 
  result = (pj::MediaEvent *)& ((arg1)->ev);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnMediaEventParam() {
  void * jresult ;
  pj::OnMediaEventParam *result = 0 ;
  
  result = (pj::OnMediaEventParam *)new pj::OnMediaEventParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnMediaEventParam(void * jarg1) {
  pj::OnMediaEventParam *arg1 = (pj::OnMediaEventParam *) 0 ;
  
  arg1 = (pj::OnMediaEventParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnRejectedIncomingCallParam_callId_set(void * jarg1, int jarg2) {
  pj::OnRejectedIncomingCallParam *arg1 = (pj::OnRejectedIncomingCallParam *) 0 ;
  pjsua_call_id arg2 ;
  
  arg1 = (pj::OnRejectedIncomingCallParam *)jarg1; 
  arg2 = (pjsua_call_id)jarg2; 
  if (arg1) (arg1)->callId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OnRejectedIncomingCallParam_callId_get(void * jarg1) {
  int jresult ;
  pj::OnRejectedIncomingCallParam *arg1 = (pj::OnRejectedIncomingCallParam *) 0 ;
  pjsua_call_id result;
  
  arg1 = (pj::OnRejectedIncomingCallParam *)jarg1; 
  result = (pjsua_call_id) ((arg1)->callId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnRejectedIncomingCallParam_localInfo_set(void * jarg1, const char * jarg2) {
  pj::OnRejectedIncomingCallParam *arg1 = (pj::OnRejectedIncomingCallParam *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (pj::OnRejectedIncomingCallParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->localInfo = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OnRejectedIncomingCallParam_localInfo_get(void * jarg1) {
  const char * jresult ;
  pj::OnRejectedIncomingCallParam *arg1 = (pj::OnRejectedIncomingCallParam *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (pj::OnRejectedIncomingCallParam *)jarg1; 
  result = (std::string *) & ((arg1)->localInfo);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnRejectedIncomingCallParam_remoteInfo_set(void * jarg1, const char * jarg2) {
  pj::OnRejectedIncomingCallParam *arg1 = (pj::OnRejectedIncomingCallParam *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (pj::OnRejectedIncomingCallParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->remoteInfo = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OnRejectedIncomingCallParam_remoteInfo_get(void * jarg1) {
  const char * jresult ;
  pj::OnRejectedIncomingCallParam *arg1 = (pj::OnRejectedIncomingCallParam *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (pj::OnRejectedIncomingCallParam *)jarg1; 
  result = (std::string *) & ((arg1)->remoteInfo);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnRejectedIncomingCallParam_statusCode_set(void * jarg1, int jarg2) {
  pj::OnRejectedIncomingCallParam *arg1 = (pj::OnRejectedIncomingCallParam *) 0 ;
  int arg2 ;
  
  arg1 = (pj::OnRejectedIncomingCallParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->statusCode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OnRejectedIncomingCallParam_statusCode_get(void * jarg1) {
  int jresult ;
  pj::OnRejectedIncomingCallParam *arg1 = (pj::OnRejectedIncomingCallParam *) 0 ;
  int result;
  
  arg1 = (pj::OnRejectedIncomingCallParam *)jarg1; 
  result = (int) ((arg1)->statusCode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnRejectedIncomingCallParam_reason_set(void * jarg1, const char * jarg2) {
  pj::OnRejectedIncomingCallParam *arg1 = (pj::OnRejectedIncomingCallParam *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (pj::OnRejectedIncomingCallParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->reason = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OnRejectedIncomingCallParam_reason_get(void * jarg1) {
  const char * jresult ;
  pj::OnRejectedIncomingCallParam *arg1 = (pj::OnRejectedIncomingCallParam *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (pj::OnRejectedIncomingCallParam *)jarg1; 
  result = (std::string *) & ((arg1)->reason);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnRejectedIncomingCallParam_rdata_set(void * jarg1, void * jarg2) {
  pj::OnRejectedIncomingCallParam *arg1 = (pj::OnRejectedIncomingCallParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  arg1 = (pj::OnRejectedIncomingCallParam *)jarg1; 
  arg2 = (pj::SipRxData *)jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnRejectedIncomingCallParam_rdata_get(void * jarg1) {
  void * jresult ;
  pj::OnRejectedIncomingCallParam *arg1 = (pj::OnRejectedIncomingCallParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  arg1 = (pj::OnRejectedIncomingCallParam *)jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnRejectedIncomingCallParam() {
  void * jresult ;
  pj::OnRejectedIncomingCallParam *result = 0 ;
  
  result = (pj::OnRejectedIncomingCallParam *)new pj::OnRejectedIncomingCallParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnRejectedIncomingCallParam(void * jarg1) {
  pj::OnRejectedIncomingCallParam *arg1 = (pj::OnRejectedIncomingCallParam *) 0 ;
  
  arg1 = (pj::OnRejectedIncomingCallParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DigestChallenge_realm_set(void * jarg1, const char * jarg2) {
  pj::DigestChallenge *arg1 = (pj::DigestChallenge *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (pj::DigestChallenge *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->realm = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_DigestChallenge_realm_get(void * jarg1) {
  const char * jresult ;
  pj::DigestChallenge *arg1 = (pj::DigestChallenge *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (pj::DigestChallenge *)jarg1; 
  result = (std::string *) & ((arg1)->realm);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DigestChallenge_otherParam_set(void * jarg1, void * jarg2) {
  pj::DigestChallenge *arg1 = (pj::DigestChallenge *) 0 ;
  pj::StringToStringMap *arg2 = (pj::StringToStringMap *) 0 ;
  
  arg1 = (pj::DigestChallenge *)jarg1; 
  arg2 = (pj::StringToStringMap *)jarg2; 
  if (arg1) (arg1)->otherParam = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DigestChallenge_otherParam_get(void * jarg1) {
  void * jresult ;
  pj::DigestChallenge *arg1 = (pj::DigestChallenge *) 0 ;
  pj::StringToStringMap *result = 0 ;
  
  arg1 = (pj::DigestChallenge *)jarg1; 
  result = (pj::StringToStringMap *)& ((arg1)->otherParam);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DigestChallenge_domain_set(void * jarg1, const char * jarg2) {
  pj::DigestChallenge *arg1 = (pj::DigestChallenge *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (pj::DigestChallenge *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->domain = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_DigestChallenge_domain_get(void * jarg1) {
  const char * jresult ;
  pj::DigestChallenge *arg1 = (pj::DigestChallenge *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (pj::DigestChallenge *)jarg1; 
  result = (std::string *) & ((arg1)->domain);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DigestChallenge_nonce_set(void * jarg1, const char * jarg2) {
  pj::DigestChallenge *arg1 = (pj::DigestChallenge *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (pj::DigestChallenge *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->nonce = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_DigestChallenge_nonce_get(void * jarg1) {
  const char * jresult ;
  pj::DigestChallenge *arg1 = (pj::DigestChallenge *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (pj::DigestChallenge *)jarg1; 
  result = (std::string *) & ((arg1)->nonce);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DigestChallenge_opaque_set(void * jarg1, const char * jarg2) {
  pj::DigestChallenge *arg1 = (pj::DigestChallenge *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (pj::DigestChallenge *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->opaque = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_DigestChallenge_opaque_get(void * jarg1) {
  const char * jresult ;
  pj::DigestChallenge *arg1 = (pj::DigestChallenge *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (pj::DigestChallenge *)jarg1; 
  result = (std::string *) & ((arg1)->opaque);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DigestChallenge_stale_set(void * jarg1, int jarg2) {
  pj::DigestChallenge *arg1 = (pj::DigestChallenge *) 0 ;
  int arg2 ;
  
  arg1 = (pj::DigestChallenge *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->stale = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DigestChallenge_stale_get(void * jarg1) {
  int jresult ;
  pj::DigestChallenge *arg1 = (pj::DigestChallenge *) 0 ;
  int result;
  
  arg1 = (pj::DigestChallenge *)jarg1; 
  result = (int) ((arg1)->stale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DigestChallenge_algorithm_set(void * jarg1, const char * jarg2) {
  pj::DigestChallenge *arg1 = (pj::DigestChallenge *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (pj::DigestChallenge *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->algorithm = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_DigestChallenge_algorithm_get(void * jarg1) {
  const char * jresult ;
  pj::DigestChallenge *arg1 = (pj::DigestChallenge *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (pj::DigestChallenge *)jarg1; 
  result = (std::string *) & ((arg1)->algorithm);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DigestChallenge_qop_set(void * jarg1, const char * jarg2) {
  pj::DigestChallenge *arg1 = (pj::DigestChallenge *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (pj::DigestChallenge *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->qop = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_DigestChallenge_qop_get(void * jarg1) {
  const char * jresult ;
  pj::DigestChallenge *arg1 = (pj::DigestChallenge *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (pj::DigestChallenge *)jarg1; 
  result = (std::string *) & ((arg1)->qop);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DigestChallenge() {
  void * jresult ;
  pj::DigestChallenge *result = 0 ;
  
  result = (pj::DigestChallenge *)new pj::DigestChallenge();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DigestChallenge(void * jarg1) {
  pj::DigestChallenge *arg1 = (pj::DigestChallenge *) 0 ;
  
  arg1 = (pj::DigestChallenge *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DigestCredential_realm_set(void * jarg1, const char * jarg2) {
  pj::DigestCredential *arg1 = (pj::DigestCredential *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (pj::DigestCredential *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->realm = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_DigestCredential_realm_get(void * jarg1) {
  const char * jresult ;
  pj::DigestCredential *arg1 = (pj::DigestCredential *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (pj::DigestCredential *)jarg1; 
  result = (std::string *) & ((arg1)->realm);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DigestCredential_otherParam_set(void * jarg1, void * jarg2) {
  pj::DigestCredential *arg1 = (pj::DigestCredential *) 0 ;
  pj::StringToStringMap *arg2 = (pj::StringToStringMap *) 0 ;
  
  arg1 = (pj::DigestCredential *)jarg1; 
  arg2 = (pj::StringToStringMap *)jarg2; 
  if (arg1) (arg1)->otherParam = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DigestCredential_otherParam_get(void * jarg1) {
  void * jresult ;
  pj::DigestCredential *arg1 = (pj::DigestCredential *) 0 ;
  pj::StringToStringMap *result = 0 ;
  
  arg1 = (pj::DigestCredential *)jarg1; 
  result = (pj::StringToStringMap *)& ((arg1)->otherParam);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DigestCredential_username_set(void * jarg1, const char * jarg2) {
  pj::DigestCredential *arg1 = (pj::DigestCredential *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (pj::DigestCredential *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->username = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_DigestCredential_username_get(void * jarg1) {
  const char * jresult ;
  pj::DigestCredential *arg1 = (pj::DigestCredential *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (pj::DigestCredential *)jarg1; 
  result = (std::string *) & ((arg1)->username);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DigestCredential_nonce_set(void * jarg1, const char * jarg2) {
  pj::DigestCredential *arg1 = (pj::DigestCredential *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (pj::DigestCredential *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->nonce = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_DigestCredential_nonce_get(void * jarg1) {
  const char * jresult ;
  pj::DigestCredential *arg1 = (pj::DigestCredential *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (pj::DigestCredential *)jarg1; 
  result = (std::string *) & ((arg1)->nonce);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DigestCredential_uri_set(void * jarg1, const char * jarg2) {
  pj::DigestCredential *arg1 = (pj::DigestCredential *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (pj::DigestCredential *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->uri = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_DigestCredential_uri_get(void * jarg1) {
  const char * jresult ;
  pj::DigestCredential *arg1 = (pj::DigestCredential *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (pj::DigestCredential *)jarg1; 
  result = (std::string *) & ((arg1)->uri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DigestCredential_response_set(void * jarg1, const char * jarg2) {
  pj::DigestCredential *arg1 = (pj::DigestCredential *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (pj::DigestCredential *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->response = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_DigestCredential_response_get(void * jarg1) {
  const char * jresult ;
  pj::DigestCredential *arg1 = (pj::DigestCredential *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (pj::DigestCredential *)jarg1; 
  result = (std::string *) & ((arg1)->response);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DigestCredential_algorithm_set(void * jarg1, const char * jarg2) {
  pj::DigestCredential *arg1 = (pj::DigestCredential *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (pj::DigestCredential *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->algorithm = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_DigestCredential_algorithm_get(void * jarg1) {
  const char * jresult ;
  pj::DigestCredential *arg1 = (pj::DigestCredential *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (pj::DigestCredential *)jarg1; 
  result = (std::string *) & ((arg1)->algorithm);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DigestCredential_cnonce_set(void * jarg1, const char * jarg2) {
  pj::DigestCredential *arg1 = (pj::DigestCredential *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (pj::DigestCredential *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->cnonce = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_DigestCredential_cnonce_get(void * jarg1) {
  const char * jresult ;
  pj::DigestCredential *arg1 = (pj::DigestCredential *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (pj::DigestCredential *)jarg1; 
  result = (std::string *) & ((arg1)->cnonce);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DigestCredential_opaque_set(void * jarg1, const char * jarg2) {
  pj::DigestCredential *arg1 = (pj::DigestCredential *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (pj::DigestCredential *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->opaque = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_DigestCredential_opaque_get(void * jarg1) {
  const char * jresult ;
  pj::DigestCredential *arg1 = (pj::DigestCredential *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (pj::DigestCredential *)jarg1; 
  result = (std::string *) & ((arg1)->opaque);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DigestCredential_qop_set(void * jarg1, const char * jarg2) {
  pj::DigestCredential *arg1 = (pj::DigestCredential *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (pj::DigestCredential *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->qop = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_DigestCredential_qop_get(void * jarg1) {
  const char * jresult ;
  pj::DigestCredential *arg1 = (pj::DigestCredential *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (pj::DigestCredential *)jarg1; 
  result = (std::string *) & ((arg1)->qop);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DigestCredential_nc_set(void * jarg1, const char * jarg2) {
  pj::DigestCredential *arg1 = (pj::DigestCredential *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (pj::DigestCredential *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->nc = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_DigestCredential_nc_get(void * jarg1) {
  const char * jresult ;
  pj::DigestCredential *arg1 = (pj::DigestCredential *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (pj::DigestCredential *)jarg1; 
  result = (std::string *) & ((arg1)->nc);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DigestCredential() {
  void * jresult ;
  pj::DigestCredential *result = 0 ;
  
  result = (pj::DigestCredential *)new pj::DigestCredential();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DigestCredential(void * jarg1) {
  pj::DigestCredential *arg1 = (pj::DigestCredential *) 0 ;
  
  arg1 = (pj::DigestCredential *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCredAuthParam_digestChallenge_set(void * jarg1, void * jarg2) {
  pj::OnCredAuthParam *arg1 = (pj::OnCredAuthParam *) 0 ;
  pj::DigestChallenge *arg2 = (pj::DigestChallenge *) 0 ;
  
  arg1 = (pj::OnCredAuthParam *)jarg1; 
  arg2 = (pj::DigestChallenge *)jarg2; 
  if (arg1) (arg1)->digestChallenge = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnCredAuthParam_digestChallenge_get(void * jarg1) {
  void * jresult ;
  pj::OnCredAuthParam *arg1 = (pj::OnCredAuthParam *) 0 ;
  pj::DigestChallenge *result = 0 ;
  
  arg1 = (pj::OnCredAuthParam *)jarg1; 
  result = (pj::DigestChallenge *)& ((arg1)->digestChallenge);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCredAuthParam_credentialInfo_set(void * jarg1, void * jarg2) {
  pj::OnCredAuthParam *arg1 = (pj::OnCredAuthParam *) 0 ;
  pj::AuthCredInfo *arg2 = (pj::AuthCredInfo *) 0 ;
  
  arg1 = (pj::OnCredAuthParam *)jarg1; 
  arg2 = (pj::AuthCredInfo *)jarg2; 
  if (arg1) (arg1)->credentialInfo = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnCredAuthParam_credentialInfo_get(void * jarg1) {
  void * jresult ;
  pj::OnCredAuthParam *arg1 = (pj::OnCredAuthParam *) 0 ;
  pj::AuthCredInfo *result = 0 ;
  
  arg1 = (pj::OnCredAuthParam *)jarg1; 
  result = (pj::AuthCredInfo *)& ((arg1)->credentialInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCredAuthParam_method_set(void * jarg1, const char * jarg2) {
  pj::OnCredAuthParam *arg1 = (pj::OnCredAuthParam *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (pj::OnCredAuthParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->method = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OnCredAuthParam_method_get(void * jarg1) {
  const char * jresult ;
  pj::OnCredAuthParam *arg1 = (pj::OnCredAuthParam *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (pj::OnCredAuthParam *)jarg1; 
  result = (std::string *) & ((arg1)->method);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OnCredAuthParam_digestCredential_set(void * jarg1, void * jarg2) {
  pj::OnCredAuthParam *arg1 = (pj::OnCredAuthParam *) 0 ;
  pj::DigestCredential *arg2 = (pj::DigestCredential *) 0 ;
  
  arg1 = (pj::OnCredAuthParam *)jarg1; 
  arg2 = (pj::DigestCredential *)jarg2; 
  if (arg1) (arg1)->digestCredential = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OnCredAuthParam_digestCredential_get(void * jarg1) {
  void * jresult ;
  pj::OnCredAuthParam *arg1 = (pj::OnCredAuthParam *) 0 ;
  pj::DigestCredential *result = 0 ;
  
  arg1 = (pj::OnCredAuthParam *)jarg1; 
  result = (pj::DigestCredential *)& ((arg1)->digestCredential);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OnCredAuthParam() {
  void * jresult ;
  pj::OnCredAuthParam *result = 0 ;
  
  result = (pj::OnCredAuthParam *)new pj::OnCredAuthParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OnCredAuthParam(void * jarg1) {
  pj::OnCredAuthParam *arg1 = (pj::OnCredAuthParam *) 0 ;
  
  arg1 = (pj::OnCredAuthParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UaConfig_maxCalls_set(void * jarg1, unsigned int jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->maxCalls = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UaConfig_maxCalls_get(void * jarg1) {
  unsigned int jresult ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::UaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->maxCalls);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UaConfig_threadCnt_set(void * jarg1, unsigned int jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->threadCnt = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UaConfig_threadCnt_get(void * jarg1) {
  unsigned int jresult ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::UaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->threadCnt);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UaConfig_mainThreadOnly_set(void * jarg1, unsigned int jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->mainThreadOnly = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UaConfig_mainThreadOnly_get(void * jarg1) {
  unsigned int jresult ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  bool result;
  
  arg1 = (pj::UaConfig *)jarg1; 
  result = (bool) ((arg1)->mainThreadOnly);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UaConfig_nameserver_set(void * jarg1, void * jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::StringVector *arg2 = (pj::StringVector *) 0 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  arg2 = (pj::StringVector *)jarg2; 
  if (arg1) (arg1)->nameserver = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UaConfig_nameserver_get(void * jarg1) {
  void * jresult ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::StringVector *result = 0 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  result = (pj::StringVector *)& ((arg1)->nameserver);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UaConfig_outboundProxies_set(void * jarg1, void * jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::StringVector *arg2 = (pj::StringVector *) 0 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  arg2 = (pj::StringVector *)jarg2; 
  if (arg1) (arg1)->outboundProxies = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UaConfig_outboundProxies_get(void * jarg1) {
  void * jresult ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::StringVector *result = 0 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  result = (pj::StringVector *)& ((arg1)->outboundProxies);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UaConfig_userAgent_set(void * jarg1, const char * jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->userAgent = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_UaConfig_userAgent_get(void * jarg1) {
  const char * jresult ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->userAgent);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UaConfig_stunServer_set(void * jarg1, void * jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::StringVector *arg2 = (pj::StringVector *) 0 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  arg2 = (pj::StringVector *)jarg2; 
  if (arg1) (arg1)->stunServer = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UaConfig_stunServer_get(void * jarg1) {
  void * jresult ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::StringVector *result = 0 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  result = (pj::StringVector *)& ((arg1)->stunServer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UaConfig_stunTryIpv6_set(void * jarg1, unsigned int jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->stunTryIpv6 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UaConfig_stunTryIpv6_get(void * jarg1) {
  unsigned int jresult ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  bool result;
  
  arg1 = (pj::UaConfig *)jarg1; 
  result = (bool) ((arg1)->stunTryIpv6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UaConfig_stunIgnoreFailure_set(void * jarg1, unsigned int jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->stunIgnoreFailure = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UaConfig_stunIgnoreFailure_get(void * jarg1) {
  unsigned int jresult ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  bool result;
  
  arg1 = (pj::UaConfig *)jarg1; 
  result = (bool) ((arg1)->stunIgnoreFailure);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UaConfig_natTypeInSdp_set(void * jarg1, int jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->natTypeInSdp = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UaConfig_natTypeInSdp_get(void * jarg1) {
  int jresult ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  int result;
  
  arg1 = (pj::UaConfig *)jarg1; 
  result = (int) ((arg1)->natTypeInSdp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UaConfig_mwiUnsolicitedEnabled_set(void * jarg1, unsigned int jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->mwiUnsolicitedEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UaConfig_mwiUnsolicitedEnabled_get(void * jarg1) {
  unsigned int jresult ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  bool result;
  
  arg1 = (pj::UaConfig *)jarg1; 
  result = (bool) ((arg1)->mwiUnsolicitedEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UaConfig_enableUpnp_set(void * jarg1, unsigned int jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enableUpnp = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UaConfig_enableUpnp_get(void * jarg1) {
  unsigned int jresult ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  bool result;
  
  arg1 = (pj::UaConfig *)jarg1; 
  result = (bool) ((arg1)->enableUpnp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UaConfig_upnpIfName_set(void * jarg1, const char * jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->upnpIfName = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_UaConfig_upnpIfName_get(void * jarg1) {
  const char * jresult ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->upnpIfName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UaConfig() {
  void * jresult ;
  pj::UaConfig *result = 0 ;
  
  result = (pj::UaConfig *)new pj::UaConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UaConfig_readObject(void * jarg1, void * jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UaConfig_writeObject(void * jarg1, void * jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & is null", 0);
    return ;
  } 
  try {
    ((pj::UaConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UaConfig(void * jarg1) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogEntry_level_set(void * jarg1, int jarg2) {
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  int arg2 ;
  
  arg1 = (pj::LogEntry *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->level = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LogEntry_level_get(void * jarg1) {
  int jresult ;
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  int result;
  
  arg1 = (pj::LogEntry *)jarg1; 
  result = (int) ((arg1)->level);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogEntry_msg_set(void * jarg1, const char * jarg2) {
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::LogEntry *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->msg = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_LogEntry_msg_get(void * jarg1) {
  const char * jresult ;
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::LogEntry *)jarg1; 
  result = (pj::string *) & ((arg1)->msg);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogEntry_threadId_set(void * jarg1, int jarg2) {
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  long arg2 ;
  
  arg1 = (pj::LogEntry *)jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->threadId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LogEntry_threadId_get(void * jarg1) {
  int jresult ;
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  long result;
  
  arg1 = (pj::LogEntry *)jarg1; 
  result = (long) ((arg1)->threadId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogEntry_threadName_set(void * jarg1, const char * jarg2) {
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::LogEntry *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->threadName = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_LogEntry_threadName_get(void * jarg1) {
  const char * jresult ;
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::LogEntry *)jarg1; 
  result = (pj::string *) & ((arg1)->threadName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LogEntry() {
  void * jresult ;
  pj::LogEntry *result = 0 ;
  
  result = (pj::LogEntry *)new pj::LogEntry();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LogEntry(void * jarg1) {
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  
  arg1 = (pj::LogEntry *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LogWriter(void * jarg1) {
  pj::LogWriter *arg1 = (pj::LogWriter *) 0 ;
  
  arg1 = (pj::LogWriter *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogWriter_write(void * jarg1, void * jarg2) {
  pj::LogWriter *arg1 = (pj::LogWriter *) 0 ;
  pj::LogEntry *arg2 = 0 ;
  
  arg1 = (pj::LogWriter *)jarg1; 
  arg2 = (pj::LogEntry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::LogEntry const & is null", 0);
    return ;
  } 
  (arg1)->write((pj::LogEntry const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LogWriter() {
  void * jresult ;
  pj::LogWriter *result = 0 ;
  
  result = (pj::LogWriter *)new SwigDirector_LogWriter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogWriter_director_connect(void *objarg, SwigDirector_LogWriter::SWIG_Callback0_t callback0) {
  pj::LogWriter *obj = (pj::LogWriter *)objarg;
  SwigDirector_LogWriter *director = static_cast<SwigDirector_LogWriter *>(obj);
  director->swig_connect_director(callback0);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogConfig_msgLogging_set(void * jarg1, unsigned int jarg2) {
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::LogConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->msgLogging = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LogConfig_msgLogging_get(void * jarg1) {
  unsigned int jresult ;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::LogConfig *)jarg1; 
  result = (unsigned int) ((arg1)->msgLogging);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogConfig_level_set(void * jarg1, unsigned int jarg2) {
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::LogConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->level = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LogConfig_level_get(void * jarg1) {
  unsigned int jresult ;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::LogConfig *)jarg1; 
  result = (unsigned int) ((arg1)->level);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogConfig_consoleLevel_set(void * jarg1, unsigned int jarg2) {
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::LogConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->consoleLevel = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LogConfig_consoleLevel_get(void * jarg1) {
  unsigned int jresult ;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::LogConfig *)jarg1; 
  result = (unsigned int) ((arg1)->consoleLevel);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogConfig_decor_set(void * jarg1, unsigned int jarg2) {
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::LogConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->decor = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LogConfig_decor_get(void * jarg1) {
  unsigned int jresult ;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::LogConfig *)jarg1; 
  result = (unsigned int) ((arg1)->decor);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogConfig_filename_set(void * jarg1, const char * jarg2) {
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::LogConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->filename = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_LogConfig_filename_get(void * jarg1) {
  const char * jresult ;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::LogConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->filename);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogConfig_fileFlags_set(void * jarg1, unsigned int jarg2) {
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::LogConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->fileFlags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LogConfig_fileFlags_get(void * jarg1) {
  unsigned int jresult ;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::LogConfig *)jarg1; 
  result = (unsigned int) ((arg1)->fileFlags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogConfig_writer_set(void * jarg1, void * jarg2) {
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  pj::LogWriter *arg2 = (pj::LogWriter *) 0 ;
  
  arg1 = (pj::LogConfig *)jarg1; 
  arg2 = (pj::LogWriter *)jarg2; 
  if (arg1) (arg1)->writer = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LogConfig_writer_get(void * jarg1) {
  void * jresult ;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  pj::LogWriter *result = 0 ;
  
  arg1 = (pj::LogConfig *)jarg1; 
  result = (pj::LogWriter *) ((arg1)->writer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LogConfig() {
  void * jresult ;
  pj::LogConfig *result = 0 ;
  
  result = (pj::LogConfig *)new pj::LogConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogConfig_readObject(void * jarg1, void * jarg2) {
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::LogConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogConfig_writeObject(void * jarg1, void * jarg2) {
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::LogConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & is null", 0);
    return ;
  } 
  try {
    ((pj::LogConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LogConfig(void * jarg1) {
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  
  arg1 = (pj::LogConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaConfig_clockRate_set(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->clockRate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaConfig_clockRate_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->clockRate);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaConfig_sndClockRate_set(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->sndClockRate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaConfig_sndClockRate_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->sndClockRate);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaConfig_channelCount_set(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->channelCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaConfig_channelCount_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->channelCount);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaConfig_audioFramePtime_set(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->audioFramePtime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaConfig_audioFramePtime_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->audioFramePtime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaConfig_maxMediaPorts_set(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->maxMediaPorts = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaConfig_maxMediaPorts_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->maxMediaPorts);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaConfig_hasIoqueue_set(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasIoqueue = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaConfig_hasIoqueue_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  bool result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (bool) ((arg1)->hasIoqueue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaConfig_threadCnt_set(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->threadCnt = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaConfig_threadCnt_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->threadCnt);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaConfig_quality_set(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->quality = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaConfig_quality_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->quality);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaConfig_ptime_set(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->ptime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaConfig_ptime_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->ptime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaConfig_noVad_set(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->noVad = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaConfig_noVad_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  bool result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (bool) ((arg1)->noVad);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaConfig_ilbcMode_set(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->ilbcMode = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaConfig_ilbcMode_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->ilbcMode);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaConfig_txDropPct_set(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->txDropPct = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaConfig_txDropPct_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->txDropPct);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaConfig_rxDropPct_set(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->rxDropPct = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaConfig_rxDropPct_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->rxDropPct);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaConfig_ecOptions_set(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->ecOptions = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaConfig_ecOptions_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->ecOptions);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaConfig_ecTailLen_set(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->ecTailLen = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaConfig_ecTailLen_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->ecTailLen);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaConfig_sndRecLatency_set(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->sndRecLatency = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaConfig_sndRecLatency_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->sndRecLatency);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaConfig_sndPlayLatency_set(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->sndPlayLatency = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaConfig_sndPlayLatency_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->sndPlayLatency);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaConfig_jbInit_set(void * jarg1, int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->jbInit = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MediaConfig_jbInit_get(void * jarg1) {
  int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (int) ((arg1)->jbInit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaConfig_jbMinPre_set(void * jarg1, int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->jbMinPre = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MediaConfig_jbMinPre_get(void * jarg1) {
  int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (int) ((arg1)->jbMinPre);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaConfig_jbMaxPre_set(void * jarg1, int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->jbMaxPre = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MediaConfig_jbMaxPre_get(void * jarg1) {
  int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (int) ((arg1)->jbMaxPre);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaConfig_jbMax_set(void * jarg1, int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->jbMax = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MediaConfig_jbMax_get(void * jarg1) {
  int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (int) ((arg1)->jbMax);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaConfig_jbDiscardAlgo_set(void * jarg1, void * jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  pjmedia_jb_discard_algo arg2 ;
  pjmedia_jb_discard_algo *argp2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  argp2 = (pjmedia_jb_discard_algo *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null pjmedia_jb_discard_algo", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->jbDiscardAlgo = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MediaConfig_jbDiscardAlgo_get(void * jarg1) {
  void * jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  pjmedia_jb_discard_algo result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result =  ((arg1)->jbDiscardAlgo);
  jresult = new pjmedia_jb_discard_algo(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaConfig_sndAutoCloseTime_set(void * jarg1, int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->sndAutoCloseTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MediaConfig_sndAutoCloseTime_get(void * jarg1) {
  int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (int) ((arg1)->sndAutoCloseTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaConfig_vidPreviewEnableNative_set(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->vidPreviewEnableNative = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MediaConfig_vidPreviewEnableNative_get(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  bool result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (bool) ((arg1)->vidPreviewEnableNative);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MediaConfig() {
  void * jresult ;
  pj::MediaConfig *result = 0 ;
  
  result = (pj::MediaConfig *)new pj::MediaConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaConfig_readObject(void * jarg1, void * jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MediaConfig_writeObject(void * jarg1, void * jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & is null", 0);
    return ;
  } 
  try {
    ((pj::MediaConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MediaConfig(void * jarg1) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EpConfig_uaConfig_set(void * jarg1, void * jarg2) {
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  pj::UaConfig *arg2 = (pj::UaConfig *) 0 ;
  
  arg1 = (pj::EpConfig *)jarg1; 
  arg2 = (pj::UaConfig *)jarg2; 
  if (arg1) (arg1)->uaConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EpConfig_uaConfig_get(void * jarg1) {
  void * jresult ;
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  pj::UaConfig *result = 0 ;
  
  arg1 = (pj::EpConfig *)jarg1; 
  result = (pj::UaConfig *)& ((arg1)->uaConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EpConfig_logConfig_set(void * jarg1, void * jarg2) {
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  pj::LogConfig *arg2 = (pj::LogConfig *) 0 ;
  
  arg1 = (pj::EpConfig *)jarg1; 
  arg2 = (pj::LogConfig *)jarg2; 
  if (arg1) (arg1)->logConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EpConfig_logConfig_get(void * jarg1) {
  void * jresult ;
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  pj::LogConfig *result = 0 ;
  
  arg1 = (pj::EpConfig *)jarg1; 
  result = (pj::LogConfig *)& ((arg1)->logConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EpConfig_medConfig_set(void * jarg1, void * jarg2) {
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  pj::MediaConfig *arg2 = (pj::MediaConfig *) 0 ;
  
  arg1 = (pj::EpConfig *)jarg1; 
  arg2 = (pj::MediaConfig *)jarg2; 
  if (arg1) (arg1)->medConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EpConfig_medConfig_get(void * jarg1) {
  void * jresult ;
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  pj::MediaConfig *result = 0 ;
  
  arg1 = (pj::EpConfig *)jarg1; 
  result = (pj::MediaConfig *)& ((arg1)->medConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EpConfig_readObject(void * jarg1, void * jarg2) {
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::EpConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_EpConfig_writeObject(void * jarg1, void * jarg2) {
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::EpConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & is null", 0);
    return ;
  } 
  try {
    ((pj::EpConfig const *)arg1)->writeObject(*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EpConfig() {
  void * jresult ;
  pj::EpConfig *result = 0 ;
  
  result = (pj::EpConfig *)new pj::EpConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EpConfig(void * jarg1) {
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  
  arg1 = (pj::EpConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Endpoint_instance() {
  void * jresult ;
  pj::Endpoint *result = 0 ;
  
  try {
    result = (pj::Endpoint *) &pj::Endpoint::instance();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Endpoint() {
  void * jresult ;
  pj::Endpoint *result = 0 ;
  
  result = (pj::Endpoint *)new SwigDirector_Endpoint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Endpoint(void * jarg1) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Endpoint_libVersion(void * jarg1) {
  void * jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::Version result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  result = ((pj::Endpoint const *)arg1)->libVersion();
  jresult = new pj::Version(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_libCreate(void * jarg1) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  try {
    (arg1)->libCreate();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_Endpoint_libGetState(void * jarg1) {
  int jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pjsua_state result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  result = (pjsua_state)((pj::Endpoint const *)arg1)->libGetState();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_libInit(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::EpConfig *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::EpConfig *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::EpConfig const & is null", 0);
    return ;
  } 
  try {
    (arg1)->libInit((pj::EpConfig const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_libStart(void * jarg1) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  try {
    (arg1)->libStart();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_libRegisterThread(void * jarg1, const char * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->libRegisterThread((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Endpoint_libIsThreadRegistered(void * jarg1) {
  unsigned int jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  bool result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  result = (bool)(arg1)->libIsThreadRegistered();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_libStopWorkerThreads(void * jarg1) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  (arg1)->libStopWorkerThreads();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Endpoint_libHandleEvents(void * jarg1, unsigned int jarg2) {
  int jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  unsigned int arg2 ;
  int result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->libHandleEvents(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_libDestroy__SWIG_0(void * jarg1, unsigned int jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    (arg1)->libDestroy(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_libDestroy__SWIG_1(void * jarg1) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  try {
    (arg1)->libDestroy();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Endpoint_utilStrError(void * jarg1, int jarg2) {
  const char * jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj_status_t arg2 ;
  pj::string result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj_status_t)jarg2; 
  result = (arg1)->utilStrError(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_utilLogWrite__SWIG_0(void * jarg1, int jarg2, const char * jarg3, const char * jarg4) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  int arg2 ;
  pj::string *arg3 = 0 ;
  pj::string *arg4 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  (arg1)->utilLogWrite(arg2,(pj::string const &)*arg3,(pj::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_utilLogWrite__SWIG_1(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::LogEntry *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::LogEntry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::LogEntry & is null", 0);
    return ;
  } 
  (arg1)->utilLogWrite(*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Endpoint_utilVerifySipUri(void * jarg1, const char * jarg2) {
  int jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  pj_status_t result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (pj_status_t)(arg1)->utilVerifySipUri((pj::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Endpoint_utilVerifyUri(void * jarg1, const char * jarg2) {
  int jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  pj_status_t result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (pj_status_t)(arg1)->utilVerifyUri((pj::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Endpoint_utilTimerSchedule(void * jarg1, unsigned int jarg2, void * jarg3) {
  void * jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  unsigned int arg2 ;
  pj::Token arg3 = (pj::Token) 0 ;
  pj::Token result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = jarg3; 
  try {
    result = (pj::Token)(arg1)->utilTimerSchedule(arg2,arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_utilTimerCancel(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::Token arg2 = (pj::Token) 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = jarg2; 
  (arg1)->utilTimerCancel(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Endpoint_utilSslGetAvailableCiphers(void * jarg1) {
  void * jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::IntVector result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  try {
    result = (arg1)->utilSslGetAvailableCiphers();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::IntVector(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_natDetectType(void * jarg1) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  try {
    (arg1)->natDetectType();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_Endpoint_natGetType(void * jarg1) {
  int jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj_stun_nat_type result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  try {
    result = (pj_stun_nat_type)(arg1)->natGetType();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_natUpdateStunServers(void * jarg1, void * jarg2, unsigned int jarg3) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::StringVector *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::StringVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::StringVector const & is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->natUpdateStunServers((pj::StringVector const &)*arg2,arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_natCheckStunServers(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::StringVector *arg2 = 0 ;
  bool arg3 ;
  pj::Token arg4 = (pj::Token) 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::StringVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::StringVector const & is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4; 
  try {
    (arg1)->natCheckStunServers((pj::StringVector const &)*arg2,arg3,arg4);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_natCancelCheckStunServers__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::Token arg2 = (pj::Token) 0 ;
  bool arg3 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->natCancelCheckStunServers(arg2,arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_natCancelCheckStunServers__SWIG_1(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::Token arg2 = (pj::Token) 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = jarg2; 
  try {
    (arg1)->natCancelCheckStunServers(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_Endpoint_transportCreate(void * jarg1, int jarg2, void * jarg3) {
  int jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pjsip_transport_type_e arg2 ;
  pj::TransportConfig *arg3 = 0 ;
  pj::TransportId result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pjsip_transport_type_e)jarg2; 
  arg3 = (pj::TransportConfig *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::TransportConfig const & is null", 0);
    return 0;
  } 
  try {
    result = (pj::TransportId)(arg1)->transportCreate(arg2,(pj::TransportConfig const &)*arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Endpoint_transportEnum(void * jarg1) {
  void * jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::IntVector result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  try {
    result = ((pj::Endpoint const *)arg1)->transportEnum();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::IntVector(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Endpoint_transportGetInfo(void * jarg1, int jarg2) {
  void * jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::TransportId arg2 ;
  pj::TransportInfo result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::TransportId)jarg2; 
  try {
    result = ((pj::Endpoint const *)arg1)->transportGetInfo(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::TransportInfo(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_transportClose(void * jarg1, int jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::TransportId arg2 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::TransportId)jarg2; 
  try {
    (arg1)->transportClose(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_transportShutdown(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::TransportHandle arg2 = (pj::TransportHandle) 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = jarg2; 
  try {
    (arg1)->transportShutdown(arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_hangupAllCalls(void * jarg1) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  (arg1)->hangupAllCalls();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_mediaAdd(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::AudioMedia *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::AudioMedia *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AudioMedia & is null", 0);
    return ;
  } 
  (arg1)->mediaAdd(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_mediaRemove(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::AudioMedia *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::AudioMedia *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AudioMedia & is null", 0);
    return ;
  } 
  (arg1)->mediaRemove(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Endpoint_mediaExists(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::AudioMedia *arg2 = 0 ;
  bool result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::AudioMedia *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AudioMedia const & is null", 0);
    return 0;
  } 
  result = (bool)((pj::Endpoint const *)arg1)->mediaExists((pj::AudioMedia const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Endpoint_mediaMaxPorts(void * jarg1) {
  unsigned int jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  unsigned int result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  result = (unsigned int)((pj::Endpoint const *)arg1)->mediaMaxPorts();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Endpoint_mediaActivePorts(void * jarg1) {
  unsigned int jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  unsigned int result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  result = (unsigned int)((pj::Endpoint const *)arg1)->mediaActivePorts();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Endpoint_mediaEnumPorts2(void * jarg1) {
  void * jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::AudioMediaVector2 result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  try {
    result = ((pj::Endpoint const *)arg1)->mediaEnumPorts2();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::AudioMediaVector2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Endpoint_mediaEnumVidPorts(void * jarg1) {
  void * jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::VideoMediaVector result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  try {
    result = ((pj::Endpoint const *)arg1)->mediaEnumVidPorts();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::VideoMediaVector(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Endpoint_audDevManager(void * jarg1) {
  void * jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::AudDevManager *result = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  result = (pj::AudDevManager *) &(arg1)->audDevManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Endpoint_vidDevManager(void * jarg1) {
  void * jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::VidDevManager *result = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  result = (pj::VidDevManager *) &(arg1)->vidDevManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Endpoint_codecEnum2(void * jarg1) {
  void * jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::CodecInfoVector2 result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  try {
    result = ((pj::Endpoint const *)arg1)->codecEnum2();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::CodecInfoVector2(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_codecSetPriority(void * jarg1, const char * jarg2, unsigned char jarg3) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  pj_uint8_t arg3 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (pj_uint8_t)jarg3; 
  try {
    (arg1)->codecSetPriority((pj::string const &)*arg2,arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Endpoint_codecGetParam(void * jarg1, const char * jarg2) {
  void * jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  pj::CodecParam result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = ((pj::Endpoint const *)arg1)->codecGetParam((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::CodecParam(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_codecSetParam(void * jarg1, const char * jarg2, void * jarg3) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  pj::CodecParam arg3 ;
  pj::CodecParam const *argp3 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  argp3 = (pj::CodecParam *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null pj::CodecParam const", 0);
    return ;
  }
  arg3 = *argp3; 
  try {
    (arg1)->codecSetParam((pj::string const &)*arg2,arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Endpoint_videoCodecEnum2(void * jarg1) {
  void * jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::CodecInfoVector2 result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  try {
    result = ((pj::Endpoint const *)arg1)->videoCodecEnum2();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::CodecInfoVector2(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_videoCodecSetPriority(void * jarg1, const char * jarg2, unsigned char jarg3) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  pj_uint8_t arg3 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (pj_uint8_t)jarg3; 
  try {
    (arg1)->videoCodecSetPriority((pj::string const &)*arg2,arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Endpoint_getVideoCodecParam(void * jarg1, const char * jarg2) {
  void * jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  pj::VidCodecParam result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = ((pj::Endpoint const *)arg1)->getVideoCodecParam((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::VidCodecParam(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_setVideoCodecParam(void * jarg1, const char * jarg2, void * jarg3) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  pj::VidCodecParam *arg3 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (pj::VidCodecParam *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::VidCodecParam const & is null", 0);
    return ;
  } 
  try {
    (arg1)->setVideoCodecParam((pj::string const &)*arg2,(pj::VidCodecParam const &)*arg3);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_resetVideoCodecParam(void * jarg1, const char * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->resetVideoCodecParam((pj::string const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Endpoint_getCodecOpusConfig(void * jarg1) {
  void * jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::CodecOpusConfig result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  try {
    result = ((pj::Endpoint const *)arg1)->getCodecOpusConfig();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::CodecOpusConfig(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_setCodecOpusConfig(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::CodecOpusConfig *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::CodecOpusConfig *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CodecOpusConfig const & is null", 0);
    return ;
  } 
  try {
    (arg1)->setCodecOpusConfig((pj::CodecOpusConfig const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Endpoint_getCodecLyraConfig(void * jarg1) {
  void * jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::CodecLyraConfig result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  try {
    result = ((pj::Endpoint const *)arg1)->getCodecLyraConfig();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::CodecLyraConfig(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_setCodecLyraConfig(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::CodecLyraConfig *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::CodecLyraConfig *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CodecLyraConfig const & is null", 0);
    return ;
  } 
  try {
    (arg1)->setCodecLyraConfig((pj::CodecLyraConfig const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Endpoint_srtpCryptoEnum(void * jarg1) {
  void * jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::StringVector result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  try {
    result = (arg1)->srtpCryptoEnum();
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return 0;
    }
  }
  jresult = new pj::StringVector(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_handleIpChange(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::IpChangeParam *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::IpChangeParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::IpChangeParam const & is null", 0);
    return ;
  } 
  try {
    (arg1)->handleIpChange((pj::IpChangeParam const &)*arg2);
  } catch(pj::Error &_e) {
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, 
        (std::string("C++ pj::Error:\n") + (&_e)->info(true).c_str()).c_str());
      
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_onNatDetectionComplete(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnNatDetectionCompleteParam *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::OnNatDetectionCompleteParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnNatDetectionCompleteParam const & is null", 0);
    return ;
  } 
  (arg1)->onNatDetectionComplete((pj::OnNatDetectionCompleteParam const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_onNatDetectionCompleteSwigExplicitEndpoint(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnNatDetectionCompleteParam *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::OnNatDetectionCompleteParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnNatDetectionCompleteParam const & is null", 0);
    return ;
  } 
  (arg1)->pj::Endpoint::onNatDetectionComplete((pj::OnNatDetectionCompleteParam const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_onNatCheckStunServersComplete(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnNatCheckStunServersCompleteParam *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::OnNatCheckStunServersCompleteParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnNatCheckStunServersCompleteParam const & is null", 0);
    return ;
  } 
  (arg1)->onNatCheckStunServersComplete((pj::OnNatCheckStunServersCompleteParam const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_onNatCheckStunServersCompleteSwigExplicitEndpoint(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnNatCheckStunServersCompleteParam *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::OnNatCheckStunServersCompleteParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnNatCheckStunServersCompleteParam const & is null", 0);
    return ;
  } 
  (arg1)->pj::Endpoint::onNatCheckStunServersComplete((pj::OnNatCheckStunServersCompleteParam const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_onTransportState(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnTransportStateParam *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::OnTransportStateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnTransportStateParam const & is null", 0);
    return ;
  } 
  (arg1)->onTransportState((pj::OnTransportStateParam const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_onTransportStateSwigExplicitEndpoint(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnTransportStateParam *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::OnTransportStateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnTransportStateParam const & is null", 0);
    return ;
  } 
  (arg1)->pj::Endpoint::onTransportState((pj::OnTransportStateParam const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_onTimer(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnTimerParam *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::OnTimerParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnTimerParam const & is null", 0);
    return ;
  } 
  (arg1)->onTimer((pj::OnTimerParam const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_onTimerSwigExplicitEndpoint(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnTimerParam *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::OnTimerParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnTimerParam const & is null", 0);
    return ;
  } 
  (arg1)->pj::Endpoint::onTimer((pj::OnTimerParam const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_onSelectAccount(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnSelectAccountParam *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::OnSelectAccountParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnSelectAccountParam & is null", 0);
    return ;
  } 
  (arg1)->onSelectAccount(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_onSelectAccountSwigExplicitEndpoint(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnSelectAccountParam *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::OnSelectAccountParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnSelectAccountParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Endpoint::onSelectAccount(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_onIpChangeProgress(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnIpChangeProgressParam *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::OnIpChangeProgressParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnIpChangeProgressParam & is null", 0);
    return ;
  } 
  (arg1)->onIpChangeProgress(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_onIpChangeProgressSwigExplicitEndpoint(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnIpChangeProgressParam *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::OnIpChangeProgressParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnIpChangeProgressParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Endpoint::onIpChangeProgress(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_onMediaEvent(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnMediaEventParam *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::OnMediaEventParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnMediaEventParam & is null", 0);
    return ;
  } 
  (arg1)->onMediaEvent(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_onMediaEventSwigExplicitEndpoint(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnMediaEventParam *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::OnMediaEventParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnMediaEventParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Endpoint::onMediaEvent(*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Endpoint_onCredAuth(void * jarg1, void * jarg2) {
  int jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnCredAuthParam *arg2 = 0 ;
  pj_status_t result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::OnCredAuthParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCredAuthParam & is null", 0);
    return 0;
  } 
  result = (pj_status_t)(arg1)->onCredAuth(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Endpoint_onCredAuthSwigExplicitEndpoint(void * jarg1, void * jarg2) {
  int jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnCredAuthParam *arg2 = 0 ;
  pj_status_t result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::OnCredAuthParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCredAuthParam & is null", 0);
    return 0;
  } 
  result = (pj_status_t)(arg1)->pj::Endpoint::onCredAuth(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_onRejectedIncomingCall(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnRejectedIncomingCallParam *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::OnRejectedIncomingCallParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnRejectedIncomingCallParam & is null", 0);
    return ;
  } 
  (arg1)->onRejectedIncomingCall(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_onRejectedIncomingCallSwigExplicitEndpoint(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnRejectedIncomingCallParam *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::OnRejectedIncomingCallParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnRejectedIncomingCallParam & is null", 0);
    return ;
  } 
  (arg1)->pj::Endpoint::onRejectedIncomingCall(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Endpoint_director_connect(void *objarg, SwigDirector_Endpoint::SWIG_Callback0_t callback0, SwigDirector_Endpoint::SWIG_Callback1_t callback1, SwigDirector_Endpoint::SWIG_Callback2_t callback2, SwigDirector_Endpoint::SWIG_Callback3_t callback3, SwigDirector_Endpoint::SWIG_Callback4_t callback4, SwigDirector_Endpoint::SWIG_Callback5_t callback5, SwigDirector_Endpoint::SWIG_Callback6_t callback6, SwigDirector_Endpoint::SWIG_Callback7_t callback7, SwigDirector_Endpoint::SWIG_Callback8_t callback8) {
  pj::Endpoint *obj = (pj::Endpoint *)objarg;
  SwigDirector_Endpoint *director = static_cast<SwigDirector_Endpoint *>(obj);
  director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8);
}


SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_AuthCredInfo_SWIGUpcast(pj::AuthCredInfo *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_SockOptParams_SWIGUpcast(pj::SockOptParams *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_TlsConfig_SWIGUpcast(pj::TlsConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_TransportConfig_SWIGUpcast(pj::TransportConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::MediaFormat * SWIGSTDCALL CSharp_MediaFormatAudio_SWIGUpcast(pj::MediaFormatAudio *jarg1) {
    return (pj::MediaFormat *)jarg1;
}

SWIGEXPORT pj::MediaFormat * SWIGSTDCALL CSharp_MediaFormatVideo_SWIGUpcast(pj::MediaFormatVideo *jarg1) {
    return (pj::MediaFormat *)jarg1;
}

SWIGEXPORT pj::Media * SWIGSTDCALL CSharp_AudioMedia_SWIGUpcast(pj::AudioMedia *jarg1) {
    return (pj::Media *)jarg1;
}

SWIGEXPORT pj::AudioMedia * SWIGSTDCALL CSharp_AudioMediaPort_SWIGUpcast(pj::AudioMediaPort *jarg1) {
    return (pj::AudioMedia *)jarg1;
}

SWIGEXPORT pj::AudioMedia * SWIGSTDCALL CSharp_AudioMediaPlayer_SWIGUpcast(pj::AudioMediaPlayer *jarg1) {
    return (pj::AudioMedia *)jarg1;
}

SWIGEXPORT pj::AudioMedia * SWIGSTDCALL CSharp_AudioMediaRecorder_SWIGUpcast(pj::AudioMediaRecorder *jarg1) {
    return (pj::AudioMedia *)jarg1;
}

SWIGEXPORT pjmedia_tone_desc * SWIGSTDCALL CSharp_ToneDesc_SWIGUpcast(pj::ToneDesc *jarg1) {
    return (pjmedia_tone_desc *)jarg1;
}

SWIGEXPORT pjmedia_tone_digit * SWIGSTDCALL CSharp_ToneDigit_SWIGUpcast(pj::ToneDigit *jarg1) {
    return (pjmedia_tone_digit *)jarg1;
}

SWIGEXPORT pj::AudioMedia * SWIGSTDCALL CSharp_ToneGenerator_SWIGUpcast(pj::ToneGenerator *jarg1) {
    return (pj::AudioMedia *)jarg1;
}

SWIGEXPORT pj::AudioMedia * SWIGSTDCALL CSharp_ExtraAudioDevice_SWIGUpcast(pj::ExtraAudioDevice *jarg1) {
    return (pj::AudioMedia *)jarg1;
}

SWIGEXPORT pj::Media * SWIGSTDCALL CSharp_VideoMedia_SWIGUpcast(pj::VideoMedia *jarg1) {
    return (pj::Media *)jarg1;
}

SWIGEXPORT pj::AudioMedia * SWIGSTDCALL CSharp_AudioMediaCapture_SWIGUpcast(pj::AudioMediaCapture *jarg1) {
    return (pj::AudioMedia *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_BuddyConfig_SWIGUpcast(pj::BuddyConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_AccountRegConfig_SWIGUpcast(pj::AccountRegConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_AccountSipConfig_SWIGUpcast(pj::AccountSipConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_AccountCallConfig_SWIGUpcast(pj::AccountCallConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_AccountPresConfig_SWIGUpcast(pj::AccountPresConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_AccountMwiConfig_SWIGUpcast(pj::AccountMwiConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_AccountNatConfig_SWIGUpcast(pj::AccountNatConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_SrtpOpt_SWIGUpcast(pj::SrtpOpt *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_RtcpFbConfig_SWIGUpcast(pj::RtcpFbConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_AccountMediaConfig_SWIGUpcast(pj::AccountMediaConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_AccountVideoConfig_SWIGUpcast(pj::AccountVideoConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_AccountConfig_SWIGUpcast(pj::AccountConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentDocument * SWIGSTDCALL CSharp_JsonDocument_SWIGUpcast(pj::JsonDocument *jarg1) {
    return (pj::PersistentDocument *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_UaConfig_SWIGUpcast(pj::UaConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_LogConfig_SWIGUpcast(pj::LogConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_MediaConfig_SWIGUpcast(pj::MediaConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_EpConfig_SWIGUpcast(pj::EpConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

#ifdef __cplusplus
}
#endif

